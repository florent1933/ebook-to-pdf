<section class="appendix" data-original-filename="appendix-a.asciidoc" id="APPENDIX"><div class="titlepage"><div><div><h1 class="title">Appendix A. Solutions to Études</h1></div></div></div>
<p id="here_are_the_so">Here are the solutions that I came up with for the études in
this book. Since I was learning Erlang as I wrote them, you
may expect some of the code to be naïve in the extreme.</p>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION02-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 2-1</h2></div></div></div>
<p id="here_is_a_sugge_id1">Here is a suggested solution for
<a class="link" href="ch02.html#CH02-ET01" title="Étude 2-1: Writing a Function">Étude 2-1</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="modulegeom_"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION02-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 2-2</h2></div></div></div>
<p id="here_is_a_sugge_id2">Here is a suggested solution for
<a class="link" href="ch02.html#CH02-ET02" title="Étude 2-2: Documenting a Module">Étude 2-2</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id1"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a rectangle, given the</code>
<code class="c">%% length and width. Returns the product</code>
<code class="c">%% of its arguments.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION02-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 2-3</h2></div></div></div>
<p id="here_is_a_sugge_id3">Here is a suggested solution for
<a class="link" href="ch02.html#CH02-ET03" title="Étude 2-3: Documenting a Function">Étude 2-3</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id2"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a rectangle, given the</code>
<code class="c">%% length and width. Returns the product</code>
<code class="c">%% of its arguments.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION03-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 3-1</h2></div></div></div>
<p id="here_is_a_sugge_id4">Here is a suggested solution for
<a class="link" href="ch03.html#CH03-ET01" title="Étude 3-1: Pattern Matching">Étude 3-1</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_4">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id3"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">H</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">B</code> <code class="o">*</code> <code class="nv">H</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION03-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 3-2</h2></div></div></div>
<p id="here_is_a_sugge_id5">Here is a suggested solution for
<a class="link" href="ch03.html#CH03-ET02" title="Étude 3-2: Guards">Étude 3-2</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_5">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id4"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse. Ensure that both arguments are greater than</code>
<code class="c">%% or equal to zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="k">when</code> <code class="nv">L</code> <code class="o">&gt;=</code><code class="mi">0</code><code class="p">,</code> <code class="nv">W</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">H</code><code class="p">)</code> <code class="k">when</code> <code class="nv">B</code><code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">H</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">B</code> <code class="o">*</code> <code class="nv">H</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION03-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 3-3</h2></div></div></div>
<p id="here_is_a_sugge_id6">Here is a suggested solution for
<a class="link" href="ch03.html#CH03-ET03" title="Étude 3-3: Underscores">Étude 3-3</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_6">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id5"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse. Invalid data returns zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="k">when</code> <code class="nv">L</code> <code class="o">&gt;=</code><code class="mi">0</code><code class="p">,</code> <code class="nv">W</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">H</code><code class="p">)</code> <code class="k">when</code> <code class="nv">B</code><code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">H</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">B</code> <code class="o">*</code> <code class="nv">H</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(_,</code> <code class="p">_,</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION03-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 3-4</h2></div></div></div>
<p id="here_is_a_sugge_id7">Here is a suggested solution for
<a class="link" href="ch03.html#CH03-ET04" title="Étude 3-4: Tuples as Parameters">Étude 3-4</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_7">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id6"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given a tuple</code>
<code class="c">%% containing a shape and two of the dimensions.</code>
<code class="c">%% Works by calling a private function.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">({</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">()})</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">({</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">Dim1</code><code class="p">,</code> <code class="nv">Dim2</code><code class="p">})</code> <code class="o">-&gt;</code> <code class="n">area</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">Dim1</code><code class="p">,</code> <code class="nv">Dim2</code><code class="p">).</code>

<code class="c">%% @doc Returns the product of its arguments for a rectangle,</code>
<code class="c">%% one half the product of the arguments for a triangle,</code>
<code class="c">%% and math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse. Invalid data returns zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="k">when</code> <code class="nv">L</code> <code class="o">&gt;=</code><code class="mi">0</code><code class="p">,</code> <code class="nv">W</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">H</code><code class="p">)</code> <code class="k">when</code> <code class="nv">B</code><code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">H</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">B</code> <code class="o">*</code> <code class="nv">H</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(_,</code> <code class="p">_,</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 4-1</h2></div></div></div>
<p id="here_is_a_sugge_id8">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET01" title="Étude 4-1: Using case">Étude 4-1</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_8">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id7"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Shape</code> <code class="k">of</code>
    <code class="n">rectangle</code> <code class="o">-&gt;</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">;</code>
    <code class="n">triangle</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>
    <code class="n">ellipse</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 4-2</h2></div></div></div>
<p id="here_is_a_sugge_id9">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET02" title="Étude 4-2: Recursion">Étude 4-2</a>.</p>
<div class="sect2" id="_literal_dijkstra_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dijkstra.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id8"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Recursive function for calculating GCD</code>
<code class="c">%% of two numbers using Dijkstra's algorithm.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dijkstra</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">gcd</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the greatest common divisor of two</code>
<code class="c">%% integers. Uses Dijkstra's algorithm, which does not</code>
<code class="c">%% require any division.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">gcd</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nv">M</code> <code class="o">==</code> <code class="nv">N</code>  <code class="o">-&gt;</code> <code class="nv">M</code><code class="p">;</code>
    <code class="nv">M</code> <code class="o">&gt;</code> <code class="nv">N</code> <code class="o">-&gt;</code> <code class="n">gcd</code><code class="p">(</code><code class="nv">M</code> <code class="o">-</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">N</code><code class="p">);</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="nv">M</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET02B">
<div class="titlepage"><div><div><h2 class="title">Solution 4-2</h2></div></div></div>
<p id="here_is_another">Here is another solution for
<a class="link" href="ch04.html#CH04-ET02" title="Étude 4-2: Recursion">Étude 4-2</a>. This solution uses guards instead of
<code class="literal">if</code>.</p>
<div class="sect2" id="_literal_dijkstra_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dijkstra.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id9"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Recursive function for calculating GCD</code>
<code class="c">%% of two numbers using Dijkstra's algorithm.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dijkstra</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">gcd</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the greatest common divisor of two</code>
<code class="c">%% integers. Uses Dijkstra's algorithm, which does not</code>
<code class="c">%% require any division.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">gcd</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">M</code> <code class="o">==</code> <code class="nv">N</code> <code class="o">-&gt;</code>
  <code class="nv">M</code><code class="p">;</code>

<code class="nf">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code><code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="nv">N</code> <code class="o">-&gt;</code>
  <code class="n">gcd</code><code class="p">(</code><code class="nv">M</code> <code class="o">-</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">N</code><code class="p">);</code>

<code class="nf">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="nv">M</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 4-3</h2></div></div></div>
<p id="here_is_a_sugge_id10">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET03" title="Étude 4-3: Non-Tail Recursive Functions">Étude 4-3</a>.</p>
<div class="sect2" id="_literal_powers_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id10"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power</code>
<code class="c">%% and finding the Nth root of a number using Newton's method.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is positive, X^N is equal to X times X^(N - 1)</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="mi">1</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">X</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nv">X</code> <code class="o">*</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">);</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code></pre>
</div>
<div class="sect2" id="_literal_powers_traced_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers_traced.erl</code></h3></div></div></div>
<p id="this_code_conta_id1">This code contains output that lets you see the progress
of the recursion.</p>
<pre class="programlisting" data-language="erlang" id="author_j_d__id11"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power</code>
<code class="c">%% and finding the Nth root of a number using Newton's method.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers_traced</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is positive, X^N is equal to X times X^(N - 1)</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="mi">1</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">X</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Enter X: </code><code class="si">~p</code><code class="s">, N: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">]),</code>
  <code class="nv">Result</code> <code class="o">=</code> <code class="nv">X</code> <code class="o">*</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Result is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Result</code><code class="p">]),</code>
  <code class="nv">Result</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 4-4</h2></div></div></div>
<p id="here_is_a_sugge_id11">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET04" title="Étude 4-4: Tail Recursion with an Accumulator">Étude 4-4</a>.</p>
<div class="sect2" id="_literal_powers_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id12"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is positive, X^N is equal to X times X^(N - 1)</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code>

<code class="c">%% @doc Helper function to raise X to N by passing an Accumulator</code>
<code class="c">%% from call to call.</code>
<code class="c">%% When N is 0, return the value of the Accumulator;</code>
<code class="c">%% otherwise return raise(X, N - 1, X * Accumulator)</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Accumulator</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="nv">X</code> <code class="o">*</code> <code class="nv">Accumulator</code><code class="p">).</code></pre>
</div>
<div class="sect2" id="_literal_powers_traced_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers_traced.erl</code></h3></div></div></div>
<p id="this_code_conta_id2">This code contains output that lets you see the progress
of the recursion.</p>
<pre class="programlisting" data-language="erlang" id="author_j_d__id13"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers_traced</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>
<code class="c">%% When N is positive, call raise/3 with 1 as the accumulator.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code>

<code class="c">%% @doc Helper function to raise X to N by passing an Accumulator</code>
<code class="c">%% from call to call.</code>
<code class="c">%% When N is 0, return the value of the Accumulator;</code>
<code class="c">%% otherwise return raise(X, N - 1, X * Accumulator)</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"N equals 0."</code><code class="p">),</code>
  <code class="nv">Result</code> <code class="o">=</code> <code class="nv">Accumulator</code><code class="p">,</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Result is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Result</code><code class="p">]),</code>
  <code class="nv">Result</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Enter: X is </code><code class="si">~p</code><code class="s">, N is </code><code class="si">~p</code><code class="s">, Accumulator is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">]),</code>
  <code class="nv">Result</code> <code class="o">=</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="nv">X</code> <code class="o">*</code> <code class="nv">Accumulator</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Result is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Result</code><code class="p">]),</code>
  <code class="nv">Result</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET05">
<div class="titlepage"><div><div><h2 class="title">Solution 4-5</h2></div></div></div>
<p id="here_is_a_sugge_id12">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET05" title="Étude 4-5: Recursion with a Helper Function">Étude 4-5</a>.</p>
<div class="sect2" id="_literal_powers_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id14"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power</code>
<code class="c">%% and finding the Nth root of a number using Newton's method.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">nth_root</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Find the nth root of a given number.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">nth_root</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">nth_root</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">A</code> <code class="o">=</code> <code class="nv">X</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">,</code>
  <code class="n">nth_root</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">A</code><code class="p">).</code>

<code class="c">%% @doc Helper function to find an nth_root by passing</code>
<code class="c">%% an approximation from one call to the next.</code>
<code class="c">%% If the difference between current and next approximations</code>
<code class="c">%% is less than 1.0e-8, return the next approximation; otherwise return</code>
<code class="c">%% nth_root(X, N, NextApproximation).</code>

<code class="nf">nth_root</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">A</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Current guess is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">A</code><code class="p">]),</code> <code class="c">%% see the guesses converge</code>
  <code class="nv">F</code> <code class="o">=</code> <code class="n">raise</code><code class="p">(</code><code class="nv">A</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-</code> <code class="nv">X</code><code class="p">,</code>
  <code class="nv">Fprime</code> <code class="o">=</code> <code class="nv">N</code> <code class="o">*</code> <code class="n">raise</code><code class="p">(</code><code class="nv">A</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">),</code>
  <code class="nv">Next</code> <code class="o">=</code> <code class="nv">A</code> <code class="o">-</code> <code class="nv">F</code> <code class="o">/</code> <code class="nv">Fprime</code><code class="p">,</code>
  <code class="nv">Change</code> <code class="o">=</code> <code class="nb">abs</code><code class="p">(</code><code class="nv">Next</code> <code class="o">-</code> <code class="nv">A</code><code class="p">),</code>
  <code class="k">if</code>
    <code class="nv">Change</code> <code class="o">&lt;</code> <code class="mi">1</code><code class="p">.</code><code class="mi">0</code><code class="n">e</code><code class="o">-</code><code class="mi">8</code> <code class="o">-&gt;</code> <code class="nv">Next</code><code class="p">;</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">nth_root</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Next</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is positive, X^N is equal to X times X^(N - 1)</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code>

<code class="c">%% @doc Helper function to raise X to N by passing an Accumulator</code>
<code class="c">%% from call to call.</code>
<code class="c">%% When N is 0, return the value of the Accumulator;</code>
<code class="c">%% otherwise return raise(X, N - 1, X * Accumulator)</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Accumulator</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="nv">X</code> <code class="o">*</code> <code class="nv">Accumulator</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION05-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 5-1</h2></div></div></div>
<p id="here_is_a_sugge_id13">Here is a suggested solution for
<a class="link" href="ch05.html#CH05-ET01" title="Étude 5-1: Validating Input">Étude 5-1</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_9">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id15"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Shape</code> <code class="k">of</code>
    <code class="n">rectangle</code> <code class="o">-&gt;</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">;</code>
    <code class="n">triangle</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>
    <code class="n">ellipse</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
<div class="sect2" id="_literal_ask_area_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">ask_area.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id16"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions to calculate areas of shape given user input.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">ask_area</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code>

<code class="c">%% @doc Requests a character for the name of a shape,</code>
<code class="c">%% numbers for its dimensions, and calculates shape's area.</code>
<code class="c">%% The characters are R for rectangle, T for triangle,</code>
<code class="c">%% and E for ellipse. Input is allowed in either upper</code>
<code class="c">%% or lower case.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">Answer</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="s">"R)ectangle, T)riangle, or E)llipse &gt; "</code><code class="p">),</code>
  <code class="nv">Shape</code> <code class="o">=</code> <code class="n">char_to_shape</code><code class="p">(</code><code class="nb">hd</code><code class="p">(</code><code class="nv">Answer</code><code class="p">)),</code>
  <code class="k">case</code> <code class="nv">Shape</code> <code class="k">of</code>
    <code class="n">rectangle</code> <code class="o">-&gt;</code> <code class="nv">Numbers</code> <code class="o">=</code> <code class="n">get_dimensions</code><code class="p">(</code><code class="s">"width"</code><code class="p">,</code> <code class="s">"height"</code><code class="p">);</code>
    <code class="n">triangle</code> <code class="o">-&gt;</code> <code class="nv">Numbers</code> <code class="o">=</code> <code class="n">get_dimensions</code><code class="p">(</code><code class="s">"base"</code><code class="p">,</code> <code class="s">"height"</code><code class="p">);</code>
    <code class="n">ellipse</code> <code class="o">-&gt;</code> <code class="nv">Numbers</code> <code class="o">=</code> <code class="n">get_dimensions</code><code class="p">(</code><code class="s">"major axis"</code><code class="p">,</code> <code class="s">"minor axis"</code><code class="p">);</code>
    <code class="n">unknown</code> <code class="o">-&gt;</code> <code class="nv">Numbers</code> <code class="o">=</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="s">"Unknown shape "</code> <code class="o">++</code> <code class="p">[</code><code class="nb">hd</code><code class="p">(</code><code class="nv">Answer</code><code class="p">)]}</code>
  <code class="k">end</code><code class="p">,</code>

  <code class="nv">Area</code> <code class="o">=</code> <code class="n">calculate</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">),</code> <code class="nb">element</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">)),</code>
  <code class="nv">Area</code><code class="p">.</code>

<code class="c">%% @doc Given a character, returns an atom representing the</code>
<code class="c">%% specified shape (or the atom unknown if a bad character is given).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">char_to_shape</code><code class="p">(</code><code class="n">char</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">char_to_shape</code><code class="p">(</code><code class="nv">Char</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Char</code> <code class="k">of</code>
    <code class="sc">$R</code> <code class="o">-&gt;</code> <code class="n">rectangle</code><code class="p">;</code>
    <code class="sc">$r</code> <code class="o">-&gt;</code> <code class="n">rectangle</code><code class="p">;</code>
    <code class="sc">$T</code> <code class="o">-&gt;</code> <code class="n">triangle</code><code class="p">;</code>
    <code class="sc">$t</code> <code class="o">-&gt;</code> <code class="n">triangle</code><code class="p">;</code>
    <code class="sc">$E</code> <code class="o">-&gt;</code> <code class="n">ellipse</code><code class="p">;</code>
    <code class="sc">$e</code> <code class="o">-&gt;</code> <code class="n">ellipse</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code>  <code class="n">unknown</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Present a prompt and get a number from the</code>
<code class="c">%% user. Allow either integers or floats.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">get_number</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">get_number</code><code class="p">(</code><code class="nv">Prompt</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Str</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="s">"Enter "</code> <code class="o">++</code> <code class="nv">Prompt</code> <code class="o">++</code> <code class="s">" &gt; "</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Test</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">Test</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="nv">N</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">Str</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">N</code> <code class="o">=</code> <code class="nv">Test</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nv">N</code><code class="p">.</code>

<code class="c">%% @doc Get dimensions for a shape. Input are the two prompts,</code>
<code class="c">%% output is a tuple {Dimension1, Dimension2}.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">get_dimensions</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">()}).</code>

<code class="nf">get_dimensions</code><code class="p">(</code><code class="nv">Prompt1</code><code class="p">,</code> <code class="nv">Prompt2</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">N1</code> <code class="o">=</code> <code class="n">get_number</code><code class="p">(</code><code class="nv">Prompt1</code><code class="p">),</code>
  <code class="nv">N2</code> <code class="o">=</code> <code class="n">get_number</code><code class="p">(</code><code class="nv">Prompt2</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">N1</code><code class="p">,</code> <code class="nv">N2</code><code class="p">}.</code>

<code class="c">%% @doc Calculate area of a shape, given its shape and dimensions.</code>
<code class="c">%% Handle errors appropriately.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">calculate</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">calculate</code><code class="p">(</code><code class="n">unknown</code><code class="p">,</code> <code class="p">_,</code> <code class="nv">Err</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~s~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Err</code><code class="p">]);</code>
<code class="nf">calculate</code><code class="p">(_,</code> <code class="n">error</code><code class="p">,</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error in first number.</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
<code class="nf">calculate</code><code class="p">(_,</code> <code class="p">_,</code> <code class="n">error</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error in second number.</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
<code class="nf">calculate</code><code class="p">(_,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&lt;</code> <code class="mi">0</code><code class="p">;</code> <code class="nv">B</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Both numbers must be greater than or equal to zero</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
<code class="nf">calculate</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION05-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 5-2</h2></div></div></div>
<p id="here_is_a_sugge_id14">Here is a suggested solution for
<a class="link" href="ch05.html#CH05-ET02" title="Étude 5-2: Using the re Module">Étude 5-2</a>.</p>
<div class="sect2" id="_literal_dates_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dates.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id17"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for splitting a date into a list of</code>
<code class="c">%% year-month-day.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dates</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">date_parts</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns a list of integers in form [year, month, day].</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">date_parts</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">YStr</code><code class="p">,</code> <code class="nv">MStr</code><code class="p">,</code> <code class="nv">DStr</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[</code><code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">YStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">MStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">DStr</code><code class="p">))].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 6-1</h2></div></div></div>
<p id="here_is_a_sugge_id15">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET01" title="Étude 6-1: Recursive Iteration through a List">Étude 6-1</a>.</p>
<div class="sect2" id="_literal_stats_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id18"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">(</code><code class="n">list</code><code class="p">(</code><code class="n">number</code><code class="p">()))</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Result</code> <code class="p">|</code> <code class="nv">Rest</code><code class="p">]</code> <code class="o">=</code> <code class="nv">NumberList</code><code class="p">,</code>
  <code class="n">minimum</code><code class="p">(</code><code class="nv">Rest</code><code class="p">,</code> <code class="nv">Result</code><code class="p">).</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 6-2</h2></div></div></div>
<p id="here_is_a_sugge_id16">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET02" title="Étude 6-2: Iteration through Lists (More Practice)">Étude 6-2</a>.</p>
<div class="sect2" id="_literal_stats_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id19"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">maximum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">range</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">(</code><code class="n">list</code><code class="p">(</code><code class="n">number</code><code class="p">()))</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Result</code> <code class="p">|</code> <code class="nv">Rest</code><code class="p">]</code> <code class="o">=</code> <code class="nv">NumberList</code><code class="p">,</code>
  <code class="n">minimum</code><code class="p">(</code><code class="nv">Rest</code><code class="p">,</code> <code class="nv">Result</code><code class="p">).</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the maximum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">maximum</code><code class="p">(</code><code class="n">list</code><code class="p">(</code><code class="n">number</code><code class="p">()))</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Result</code> <code class="p">|</code> <code class="nv">Rest</code><code class="p">]</code> <code class="o">=</code> <code class="nv">NumberList</code><code class="p">,</code>
  <code class="n">maximum</code><code class="p">(</code><code class="nv">Rest</code><code class="p">,</code> <code class="nv">Result</code><code class="p">).</code>

<code class="nf">maximum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">maximum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&gt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Return the range (maximum and minimum) of a list of numbers</code>
<code class="c">%% as a two-element list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">range</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">number</code><code class="p">()]).</code>

<code class="nf">range</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 6-3</h2></div></div></div>
<p id="here_is_a_sugge_id17">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET03" title="Étude 6-3: Accumulating the Sum of a List">Étude 6-3</a> with leap years handled in the
<code class="literal">julian/5</code> function.</p>
<div class="sect2" id="_literal_dates_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dates.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id20"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for splitting a date into a list of</code>
<code class="c">%% year-month-day and finding Julian date.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dates</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">date_parts</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">julian</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">is_leap_year</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns a list of integers in form [year, month, day].</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">date_parts</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">(</code><code class="n">integer</code><code class="p">())).</code>

<code class="nf">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">YStr</code><code class="p">,</code> <code class="nv">MStr</code><code class="p">,</code> <code class="nv">DStr</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[</code><code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">YStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">MStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">DStr</code><code class="p">))].</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns the day of the year (Julian date).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">pos_integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">IsoDate</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">DaysPerMonth</code> <code class="o">=</code> <code class="p">[</code><code class="mi">31</code><code class="p">,</code> <code class="mi">28</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">],</code>
  <code class="p">[</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">]</code> <code class="o">=</code> <code class="n">date_parts</code><code class="p">(</code><code class="nv">IsoDate</code><code class="p">),</code>
  <code class="n">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">DaysPerMonth</code><code class="p">,</code> <code class="mi">0</code><code class="p">).</code>

<code class="c">%% @doc Helper function that recursively accumulates the number of days</code>
<code class="c">%% up to the specified date.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="p">[</code><code class="n">integer</code><code class="p">()],</code> <code class="n">integer</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">MonthList</code><code class="p">,</code> <code class="nv">Total</code><code class="p">)</code> <code class="k">when</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="mi">13</code> <code class="o">-</code> <code class="nb">length</code><code class="p">(</code><code class="nv">MonthList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">ThisMonth</code><code class="p">|</code><code class="nv">RemainingMonths</code><code class="p">]</code> <code class="o">=</code> <code class="nv">MonthList</code><code class="p">,</code>
  <code class="n">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">RemainingMonths</code><code class="p">,</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">ThisMonth</code><code class="p">);</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="p">_</code><code class="nv">MonthList</code><code class="p">,</code> <code class="nv">Total</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="mi">2</code> <code class="ow">andalso</code> <code class="n">is_leap_year</code><code class="p">(</code><code class="nv">Y</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code> <code class="o">+</code> <code class="mi">1</code><code class="p">;</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Given a year, return true or false depending on whether</code>
<code class="c">%% the year is a leap year.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">is_leap_year</code><code class="p">(</code><code class="n">pos_integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">boolean</code><code class="p">()).</code>

<code class="nf">is_leap_year</code><code class="p">(</code><code class="nv">Year</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">4</code> <code class="o">==</code> <code class="mi">0</code> <code class="ow">andalso</code> <code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">100</code> <code class="o">/=</code> <code class="mi">0</code><code class="p">)</code>
    <code class="ow">orelse</code> <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">400</code> <code class="o">==</code> <code class="mi">0</code><code class="p">).</code></pre>
<p id="here_is_a_sugge_id18">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET03" title="Étude 6-3: Accumulating the Sum of a List">Étude 6-3</a> with leap years handled in the
<code class="literal">julian/1</code> function.</p>
</div>
<div class="sect2" id="_literal_dates_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dates.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id21"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for splitting a date into a list of</code>
<code class="c">%% year-month-day and finding Julian date.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dates</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">date_parts</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">julian</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">is_leap_year</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns a list of integers in form [year, month, day].</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">date_parts</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">(</code><code class="n">integer</code><code class="p">())).</code>

<code class="nf">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">YStr</code><code class="p">,</code> <code class="nv">MStr</code><code class="p">,</code> <code class="nv">DStr</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[</code><code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">YStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">MStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">DStr</code><code class="p">))].</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns the day of the year (Julian date).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">pos_integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">IsoDate</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">]</code> <code class="o">=</code> <code class="n">date_parts</code><code class="p">(</code><code class="nv">IsoDate</code><code class="p">),</code>
  <code class="nv">DaysInFeb</code> <code class="o">=</code> <code class="k">case</code> <code class="n">is_leap_year</code><code class="p">(</code><code class="nv">Y</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="mi">29</code><code class="p">;</code>
    <code class="p">_</code><code class="n">else</code> <code class="o">-&gt;</code> <code class="mi">28</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nv">DaysPerMonth</code> <code class="o">=</code> <code class="p">[</code><code class="mi">31</code><code class="p">,</code> <code class="nv">DaysInFeb</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">],</code>
  <code class="n">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">DaysPerMonth</code><code class="p">,</code> <code class="mi">0</code><code class="p">).</code>

<code class="c">%% @doc Helper function that recursively accumulates the number of days</code>
<code class="c">%% up to the specified date.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="p">[</code><code class="n">integer</code><code class="p">()],</code> <code class="n">integer</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">MonthList</code><code class="p">,</code> <code class="nv">Total</code><code class="p">)</code> <code class="k">when</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="mi">13</code> <code class="o">-</code> <code class="nb">length</code><code class="p">(</code><code class="nv">MonthList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">ThisMonth</code><code class="p">|</code><code class="nv">RemainingMonths</code><code class="p">]</code> <code class="o">=</code> <code class="nv">MonthList</code><code class="p">,</code>
  <code class="n">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">RemainingMonths</code><code class="p">,</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">ThisMonth</code><code class="p">);</code>

<code class="nf">julian</code><code class="p">(_</code><code class="nv">Y</code><code class="p">,</code> <code class="p">_</code><code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="p">_</code><code class="nv">MonthList</code><code class="p">,</code> <code class="nv">Total</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code><code class="p">.</code>

<code class="c">%% @doc Given a year, return true or false depending on whether</code>
<code class="c">%% the year is a leap year.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">is_leap_year</code><code class="p">(</code><code class="n">pos_integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">boolean</code><code class="p">()).</code>

<code class="nf">is_leap_year</code><code class="p">(</code><code class="nv">Year</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">4</code> <code class="o">==</code> <code class="mi">0</code> <code class="ow">andalso</code> <code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">100</code> <code class="o">/=</code> <code class="mi">0</code><code class="p">)</code>
    <code class="ow">orelse</code> <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">400</code> <code class="o">==</code> <code class="mi">0</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 6-4</h2></div></div></div>
<p id="here_is_a_sugge_id19">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET04" title="Étude 6-4: Lists of Lists">Étude 6-4</a>.</p>
<div class="sect2" id="_literal_teeth_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">teeth.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id22"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Show teeth that need attention due to excessive pocket depth.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">teeth</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">alert</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Create a list of tooth numbers that require attention.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">alert</code><code class="p">[</code><code class="n">integer</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">integer</code><code class="p">()]).</code>

<code class="nf">alert</code><code class="p">(</code><code class="nv">ToothList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">alert</code><code class="p">(</code><code class="nv">ToothList</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% @doc Helper function that accumulates the list of teeth needing attention</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">alert</code><code class="p">([</code><code class="n">integer</code><code class="p">()],</code> <code class="n">integer</code><code class="p">(),</code> <code class="p">[</code><code class="n">integer</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">integer</code><code class="p">()]).</code>

<code class="nf">alert</code><code class="p">([],</code> <code class="p">_</code><code class="nv">Tooth_number</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">Result</code><code class="p">);</code>

<code class="nf">alert</code><code class="p">([</code><code class="nv">Head</code> <code class="p">|</code> <code class="nv">Tail</code> <code class="p">],</code> <code class="nv">ToothNumber</code><code class="p">,</code> <code class="nv">Result</code> <code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nn">stats</code><code class="p">:</code><code class="n">maximum</code><code class="p">(</code><code class="nv">Head</code><code class="p">)</code> <code class="o">&gt;=</code> <code class="mi">4</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">alert</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">ToothNumber</code> <code class="o">+</code> <code class="mi">1</code><code class="p">,</code> <code class="p">[</code><code class="nv">ToothNumber</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">]);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">alert</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">ToothNumber</code> <code class="o">+</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
<div class="sect2" id="_literal_stats_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id23"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">maximum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">range</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)).</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the maximum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">maximum</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)).</code>

<code class="nf">maximum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">maximum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&gt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Return the range (maximum and minimum) of a list of numbers</code>
<code class="c">%% as a two-element list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">range</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">number</code><code class="p">()]).</code>

<code class="nf">range</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET05">
<div class="titlepage"><div><div><h2 class="title">Solution 6-5</h2></div></div></div>
<p id="here_is_a_sugge_id20">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET05" title="Étude 6-5: Random Numbers; Generating Lists of Lists">Étude 6-5</a>.</p>
<div class="sect2" id="_literal_non_fp_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">non_fp.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id24"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Generate a random set of teeth, with a certain</code>
<code class="c">%% percentage expected to be bad.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">non_fp</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">generate_teeth</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">test_teeth</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code>

<code class="c">%% @doc Generate a list of lists, six numbers per tooth, giving random</code>
<code class="c">%% pocket depths. Takes a string where T="there's a tooth there"</code>
<code class="c">%% and F="no tooth"), and a float giving probability that a tooth is good.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">generate_teeth</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="nb">float</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">(</code><code class="n">list</code><code class="p">(</code><code class="n">integer</code><code class="p">()))).</code>

<code class="nf">generate_teeth</code><code class="p">(</code><code class="nv">TeethPresent</code><code class="p">,</code> <code class="nv">ProbGood</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">random</code><code class="p">:</code><code class="n">seed</code><code class="p">(</code><code class="n">now</code><code class="p">()),</code>
  <code class="n">generate_teeth</code><code class="p">(</code><code class="nv">TeethPresent</code><code class="p">,</code> <code class="nv">ProbGood</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% @doc Helper function that adds tooth data to the ultimate result.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">generate_teeth</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="nb">float</code><code class="p">(),</code> <code class="p">[[</code><code class="n">integer</code><code class="p">()]])</code> <code class="o">-&gt;</code> <code class="p">[[</code><code class="n">integer</code><code class="p">()]]).</code>

<code class="nf">generate_teeth</code><code class="p">([],</code> <code class="p">_</code><code class="nv">Prob</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">Result</code><code class="p">);</code>

<code class="nf">generate_teeth</code><code class="p">([</code><code class="sc">$F</code> <code class="p">|</code> <code class="nv">Tail</code><code class="p">],</code> <code class="nv">ProbGood</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">generate_teeth</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">ProbGood</code><code class="p">,</code> <code class="p">[[</code><code class="mi">0</code><code class="p">]</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">]);</code>

<code class="nf">generate_teeth</code><code class="p">([</code><code class="sc">$T</code> <code class="p">|</code> <code class="nv">Tail</code><code class="p">],</code> <code class="nv">ProbGood</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">generate_teeth</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">ProbGood</code><code class="p">,</code>
  <code class="p">[</code><code class="n">generate_tooth</code><code class="p">(</code><code class="nv">ProbGood</code><code class="p">)</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">]).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">generate_tooth</code><code class="p">(</code><code class="nb">float</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">(</code><code class="n">integer</code><code class="p">())).</code>

<code class="c">%% @doc Generates a list of six numbers for a single tooth. Choose a</code>
<code class="c">%% random number between 0 and 1. If that number is less than the probability</code>
<code class="c">%% of a good tooth, it sets the "base depth" to 2, otherwise it sets the base</code>
<code class="c">%% depth to 3.</code>

<code class="nf">generate_tooth</code><code class="p">(</code><code class="nv">ProbGood</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Good</code> <code class="o">=</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">()</code> <code class="o">&lt;</code> <code class="nv">ProbGood</code><code class="p">,</code>
  <code class="k">case</code> <code class="nv">Good</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="nv">BaseDepth</code> <code class="o">=</code> <code class="mi">2</code><code class="p">;</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="nv">BaseDepth</code> <code class="o">=</code> <code class="mi">3</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="n">generate_tooth</code><code class="p">(</code><code class="nv">BaseDepth</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% @doc Take the base depth, add a number in range -1..1 to it,</code>
<code class="c">%% and add it to the list.</code>

<code class="nf">generate_tooth</code><code class="p">(_</code><code class="nv">Base</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">generate_tooth</code><code class="p">(</code><code class="nv">Base</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Base</code> <code class="o">+</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="mi">3</code><code class="p">)</code> <code class="o">-</code> <code class="mi">2</code> <code class="p">|</code> <code class="n">generate_tooth</code><code class="p">(</code><code class="nv">Base</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)].</code>

<code class="nf">test_teeth</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">TList</code> <code class="o">=</code> <code class="s">"FTTTTTTTTTTTTTTFTTTTTTTTTTTTTTTT"</code><code class="p">,</code>
  <code class="nv">N</code> <code class="o">=</code> <code class="n">generate_teeth</code><code class="p">(</code><code class="nv">TList</code><code class="p">,</code> <code class="mi">0</code><code class="p">.</code><code class="mi">75</code><code class="p">),</code>
  <code class="n">print_tooth</code><code class="p">(</code><code class="nv">N</code><code class="p">).</code>

<code class="nf">print_tooth</code><code class="p">([])</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Finished.</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
<code class="nf">print_tooth</code><code class="p">([</code><code class="nv">H</code><code class="p">|</code><code class="nv">T</code><code class="p">])</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code><code class="p">]),</code>
  <code class="n">print_tooth</code><code class="p">(</code><code class="nv">T</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 7-1</h2></div></div></div>
<p id="here_is_a_sugge_id21">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET01" title="Étude 7-1: Simple Higher Order Functions">Étude 7-1</a>.</p>
<div class="sect2" id="_literal_calculus_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">calculus.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id25"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Find the derivative of a function Fn at point X.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">calculus</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">derivative</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculate derivative by classical definition.</code>
<code class="c">%% (Fn(X + H) - Fn(X)) / H</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">derivative</code><code class="p">(</code><code class="n">function</code><code class="p">(),</code> <code class="nb">float</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">derivative</code><code class="p">(</code><code class="nv">Fn</code><code class="p">,</code> <code class="nv">X</code><code class="p">)</code> <code class="o">-&gt;</code>
        <code class="nv">Delta</code> <code class="o">=</code> <code class="mi">1</code><code class="p">.</code><code class="mi">0</code><code class="n">e</code><code class="o">-</code><code class="mi">10</code><code class="p">,</code>
        <code class="p">(</code><code class="nv">Fn</code><code class="p">(</code><code class="nv">X</code> <code class="o">+</code> <code class="nv">Delta</code><code class="p">)</code> <code class="o">-</code> <code class="nv">Fn</code><code class="p">(</code><code class="nv">X</code><code class="p">))</code> <code class="o">/</code> <code class="nv">Delta</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 7-2</h2></div></div></div>
<p id="here_is_a_sugge_id22">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET02" title="Étude 7-2: List Comprehensions and Pattern Matching">Étude 7-2</a>.</p>
<div class="sect2" id="_literal_patmatch_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">patmatch.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id26"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Use pattern matching in a list comprehension.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">patmatch</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">older_males</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">older_or_male</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code>

<code class="c">%% @doc Select all males older than 40 from a list of tuples giving</code>
<code class="c">%% name, gender, and age.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">older_males</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">get_people</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="p">[{</code><code class="s">"Federico"</code><code class="p">,</code> <code class="sc">$M</code><code class="p">,</code> <code class="mi">22</code><code class="p">},</code> <code class="p">{</code><code class="s">"Kim"</code><code class="p">,</code> <code class="sc">$F</code><code class="p">,</code> <code class="mi">45</code><code class="p">},</code> <code class="p">{</code><code class="s">"Hansa"</code><code class="p">,</code> <code class="sc">$F</code><code class="p">,</code> <code class="mi">30</code><code class="p">},</code>
  <code class="p">{</code><code class="s">"Vu"</code><code class="p">,</code> <code class="sc">$M</code><code class="p">,</code> <code class="mi">47</code><code class="p">},</code> <code class="p">{</code><code class="s">"Cathy"</code><code class="p">,</code> <code class="sc">$F</code><code class="p">,</code> <code class="mi">32</code><code class="p">},</code> <code class="p">{</code><code class="s">"Elias"</code><code class="p">,</code> <code class="sc">$M</code><code class="p">,</code> <code class="mi">50</code><code class="p">}].</code>

<code class="nf">older_males</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">People</code> <code class="o">=</code> <code class="n">get_people</code><code class="p">(),</code>
  <code class="p">[</code><code class="nv">Name</code> <code class="p">||</code> <code class="p">{</code><code class="nv">Name</code><code class="p">,</code> <code class="nv">Gender</code><code class="p">,</code> <code class="nv">Age</code><code class="p">}</code> <code class="o">&lt;-</code> <code class="nv">People</code><code class="p">,</code> <code class="nv">Gender</code> <code class="o">==</code> <code class="sc">$M</code><code class="p">,</code> <code class="nv">Age</code> <code class="o">&gt;</code> <code class="mi">40</code><code class="p">].</code>

<code class="nf">older_or_male</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">People</code> <code class="o">=</code> <code class="n">get_people</code><code class="p">(),</code>
  <code class="p">[</code><code class="nv">Name</code> <code class="p">||</code> <code class="p">{</code><code class="nv">Name</code><code class="p">,</code> <code class="nv">Gender</code><code class="p">,</code> <code class="nv">Age</code><code class="p">}</code> <code class="o">&lt;-</code> <code class="nv">People</code><code class="p">,</code> <code class="p">(</code><code class="nv">Gender</code> <code class="o">==</code> <code class="sc">$M</code><code class="p">)</code> <code class="ow">orelse</code> <code class="p">(</code><code class="nv">Age</code> <code class="o">&gt;</code> <code class="mi">40</code><code class="p">)].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 7-3</h2></div></div></div>
<p id="here_is_a_sugge_id23">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET03" title="Étude 7-3: Using lists:foldl/3">Étude 7-3</a>.</p>
<div class="sect2" id="_literal_stats_erl_literal_4">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id27"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">maximum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">range</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">mean</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">stdv</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">stdv_sums</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)).</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the maximum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">maximum</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)).</code>

<code class="nf">maximum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">maximum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&gt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Return the range (maximum and minimum) of a list of numbers</code>
<code class="c">%% as a two-element list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">range</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">range</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)].</code>

<code class="c">%% @doc Return the mean of the list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">mean</code><code class="p">(</code><code class="n">list</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">mean</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Sum</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">V</code><code class="p">,</code> <code class="nv">A</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">V</code> <code class="o">+</code> <code class="nv">A</code> <code class="k">end</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">NumberList</code><code class="p">),</code>
  <code class="nv">Sum</code> <code class="o">/</code> <code class="nb">length</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">).</code>

<code class="nf">stdv_sums</code><code class="p">(</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Sum</code><code class="p">,</code> <code class="nv">SumSquares</code><code class="p">]</code> <code class="o">=</code> <code class="nv">Accumulator</code><code class="p">,</code>
  <code class="p">[</code><code class="nv">Sum</code> <code class="o">+</code> <code class="nv">Value</code><code class="p">,</code> <code class="nv">SumSquares</code> <code class="o">+</code> <code class="nv">Value</code> <code class="o">*</code> <code class="nv">Value</code><code class="p">].</code>

<code class="nf">stdv</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">N</code> <code class="o">=</code> <code class="nb">length</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code>
  <code class="p">[</code><code class="nv">Sum</code><code class="p">,</code> <code class="nv">SumSquares</code><code class="p">]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code> <code class="n">stdv_sums</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="p">[</code><code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">],</code> <code class="nv">NumberList</code><code class="p">),</code>
  <code class="nn">math</code><code class="p">:</code><code class="n">sqrt</code><code class="p">((</code><code class="nv">N</code> <code class="o">*</code> <code class="nv">SumSquares</code> <code class="o">-</code> <code class="nv">Sum</code> <code class="o">*</code> <code class="nv">Sum</code><code class="p">)</code> <code class="o">/</code> <code class="p">(</code><code class="nv">N</code> <code class="o">*</code> <code class="p">(</code><code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">))).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 7-4</h2></div></div></div>
<p id="here_is_a_sugge_id24">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET04" title="Étude 7-4: Using lists:split/2">Étude 7-4</a>.</p>
<div class="sect2" id="_literal_dates_erl_literal_4">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dates.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id28"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for splitting a date into a list of</code>
<code class="c">%% year-month-day and finding Julian date.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dates</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">date_parts</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">julian</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">is_leap_year</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns a list of integers in form [year, month, day].</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">date_parts</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">YStr</code><code class="p">,</code> <code class="nv">MStr</code><code class="p">,</code> <code class="nv">DStr</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[</code><code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">YStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">MStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">DStr</code><code class="p">))].</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns the day of the year (Julian date).</code>
<code class="c">%% Works by summing the days per month up to, but not including,</code>
<code class="c">%% the month in question, then adding the number of days.</code>
<code class="c">%% If it's a leap year and past February, add a leap day.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">DaysPerMonth</code> <code class="o">=</code> <code class="p">[</code><code class="mi">31</code><code class="p">,</code> <code class="mi">28</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">],</code>
  <code class="p">[</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">]</code> <code class="o">=</code> <code class="n">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Sublist</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">M</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">DaysPerMonth</code><code class="p">),</code>
  <code class="nv">Total</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">V</code><code class="p">,</code> <code class="nv">A</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">V</code> <code class="o">+</code> <code class="nv">A</code> <code class="k">end</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Sublist</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="mi">2</code> <code class="ow">andalso</code> <code class="n">is_leap_year</code><code class="p">(</code><code class="nv">Y</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code> <code class="o">+</code> <code class="mi">1</code><code class="p">;</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">is_leap_year</code><code class="p">(</code><code class="nv">Year</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">4</code> <code class="o">==</code> <code class="mi">0</code> <code class="ow">andalso</code> <code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">100</code> <code class="o">/=</code> <code class="mi">0</code><code class="p">)</code>
    <code class="ow">orelse</code> <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">400</code> <code class="o">==</code> <code class="mi">0</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET05">
<div class="titlepage"><div><div><h2 class="title">Solution 7-5</h2></div></div></div>
<p id="here_is_a_sugge_id25">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET05" title="Étude 7-5: Multiple Generators in List Comprehensions">Étude 7-5</a>.</p>
<div class="sect2" id="_literal_cards_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">cards.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id29"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for playing a card game.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">cards</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">make_deck</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">show_deck</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc generate a deck of cards</code>
<code class="nf">make_deck</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="p">[{</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Suit</code><code class="p">}</code> <code class="p">||</code> <code class="nv">Value</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"A"</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">7</code><code class="p">,</code> <code class="mi">8</code><code class="p">,</code> <code class="mi">9</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="s">"J"</code><code class="p">,</code> <code class="s">"Q"</code><code class="p">,</code> <code class="s">"K"</code><code class="p">],</code>
    <code class="nv">Suit</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"Clubs"</code><code class="p">,</code> <code class="s">"Diamonds"</code><code class="p">,</code> <code class="s">"Hearts"</code><code class="p">,</code> <code class="s">"Spades"</code><code class="p">]].</code>

<code class="nf">show_deck</code><code class="p">(</code><code class="nv">Deck</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">foreach</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">Item</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Item</code><code class="p">])</code> <code class="k">end</code><code class="p">,</code> <code class="nv">Deck</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET06">
<div class="titlepage"><div><div><h2 class="title">Solution 7-6</h2></div></div></div>
<p id="here_is_a_sugge_id26">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET06" title="Étude 7-6: Explaining an Algorithm">Étude 7-6</a>.</p>
<div class="sect2" id="_literal_cards_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">cards.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id30"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for playing a card game.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">cards</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">make_deck</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">shuffle</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc generate a deck of cards</code>
<code class="nf">make_deck</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="p">[{</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Suit</code><code class="p">}</code> <code class="p">||</code> <code class="nv">Value</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"A"</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">7</code><code class="p">,</code> <code class="mi">8</code><code class="p">,</code> <code class="mi">9</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="s">"J"</code><code class="p">,</code> <code class="s">"Q"</code><code class="p">,</code> <code class="s">"K"</code><code class="p">],</code>
    <code class="nv">Suit</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"Clubs"</code><code class="p">,</code> <code class="s">"Diamonds"</code><code class="p">,</code> <code class="s">"Hearts"</code><code class="p">,</code> <code class="s">"Spades"</code><code class="p">]].</code>

<code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% If the list is empty, return the accumulated value.</code>
<code class="nf">shuffle</code><code class="p">([],</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Acc</code><code class="p">;</code>

<code class="c">%% Otherwise, find a random location in the list and split the list</code>
<code class="c">%% at that location. Let's say the list has 52 elements and the random</code>
<code class="c">%% location is location 22. The first 22 elements go into Leading, and the</code>
<code class="c">%% last 30 elements go into [H|T]. Thus, H would contain element 23, and</code>
<code class="c">%% T would contain elements 24 through 52.</code>
<code class="c">%%</code>
<code class="c">%% H is the "chosen element". It goes into the accumulator (the shuffled list)</code>
<code class="c">%% and then we call shuffle again with the remainder of the deck: the</code>
<code class="c">%% leading elements and the tail of the split list.</code>

<code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Leading</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">T</code><code class="p">]}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">List</code><code class="p">))</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">List</code><code class="p">),</code>
  <code class="n">shuffle</code><code class="p">(</code><code class="nv">Leading</code> <code class="o">++</code> <code class="nv">T</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">Acc</code><code class="p">]).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION08-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 8-1</h2></div></div></div>
<p id="here_is_a_sugge_id27">Here is a suggested solution for
<a class="link" href="ch08.html#CH08-ET01" title="Étude 8-1: Using Processes to Simulate a Card Game">Étude 8-1</a>.</p>
<div class="sect2" id="_literal_cards_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">cards.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id31"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for playing card games.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">cards</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">make_deck</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">shuffle</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc generate a deck of cards</code>
<code class="p">-</code><code class="ni">type</code> <code class="n">card</code><code class="p">()::{</code><code class="n">string</code><code class="p">()|</code><code class="n">integer</code><code class="p">(),</code> <code class="n">string</code><code class="p">()}.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">make_deck</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">card</code><code class="p">()]).</code>

<code class="c">%%make_deck() -&gt;</code>
<code class="c">%%  [{Value, Suit} || Value &lt;- ["A", 2, 3, 4, 5, 6, 7, 8, 9, 10, "J", "Q", "K"],</code>
<code class="c">%%    Suit &lt;- ["Clubs", "Diamonds", "Hearts", "Spades"]].</code>

<code class="nf">make_deck</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="p">[{</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Suit</code><code class="p">}</code> <code class="p">||</code> <code class="nv">Value</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"A"</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">],</code>
    <code class="nv">Suit</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"Clubs"</code><code class="p">,</code> <code class="s">"Diamonds"</code><code class="p">]].</code>

<code class="c">%% Do a Fisher-Yates shuffle of a deck</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">shuffle</code><code class="p">([</code><code class="n">card</code><code class="p">()])</code><code class="o">-&gt;</code> <code class="p">[</code><code class="n">card</code><code class="p">()]).</code>

<code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% If the list is empty, return the accumulated value.</code>
<code class="nf">shuffle</code><code class="p">([],</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Acc</code><code class="p">;</code>

<code class="c">%% Otherwise, find a random location in the list and split the list</code>
<code class="c">%% at that location. Let's say the list has 52 elements and the random</code>
<code class="c">%% location is location 22. The first 22 elements go into Leading, and the</code>
<code class="c">%% last 30 elements go into [H|T]. Thus, H would contain element 23, and</code>
<code class="c">%% T would contain elements 24 through 52.</code>
<code class="c">%%</code>
<code class="c">%% H is the "chosen element". It goes into the accumulator (the shuffled list)</code>
<code class="c">%% and then we call shuffle again with the remainder of the deck: the</code>
<code class="c">%% leading elements and the tail of the split list.</code>

<code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Leading</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">T</code><code class="p">]}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">List</code><code class="p">))</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">List</code><code class="p">),</code>
  <code class="n">shuffle</code><code class="p">(</code><code class="nv">Leading</code> <code class="o">++</code> <code class="nv">T</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">Acc</code><code class="p">]).</code></pre>
</div>
<div class="sect2" id="_literal_game_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">game.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id32"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Play the card game "war" with two players.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">game</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">play_game</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">dealer</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">player</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">value</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc create a dealer</code>
<code class="nf">play_game</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nb">spawn</code><code class="p">(</code><code class="n">game</code><code class="p">,</code> <code class="n">dealer</code><code class="p">,</code> <code class="p">[]).</code>

<code class="nf">dealer</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">random</code><code class="p">:</code><code class="n">seed</code><code class="p">(</code><code class="n">now</code><code class="p">()),</code>
  <code class="nv">DealerPid</code> <code class="o">=</code> <code class="n">self</code><code class="p">(),</code>
  <code class="nv">Deck</code> <code class="o">=</code> <code class="nn">cards</code><code class="p">:</code><code class="n">shuffle</code><code class="p">(</code><code class="nn">cards</code><code class="p">:</code><code class="n">make_deck</code><code class="p">()),</code>
  <code class="p">{</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nb">trunc</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">Deck</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">),</code> <code class="nv">Deck</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"About to spawn players each with </code><code class="si">~p</code><code class="s"> cards.</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code>
    <code class="p">[</code><code class="nb">trunc</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">Deck</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">)]),</code>
  <code class="nv">P1</code> <code class="o">=</code> <code class="nb">spawn</code><code class="p">(</code><code class="n">game</code><code class="p">,</code> <code class="n">player</code><code class="p">,</code> <code class="p">[</code><code class="nv">DealerPid</code><code class="p">,</code> <code class="nv">P1Cards</code><code class="p">]),</code>
  <code class="nv">P2</code> <code class="o">=</code> <code class="nb">spawn</code><code class="p">(</code><code class="n">game</code><code class="p">,</code> <code class="n">player</code><code class="p">,</code> <code class="p">[</code><code class="nv">DealerPid</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">]),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Spawned players </code><code class="si">~p</code><code class="s"> and </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">P1</code><code class="p">,</code> <code class="nv">P2</code><code class="p">]),</code>
  <code class="n">dealer</code><code class="p">([</code><code class="nv">P1</code><code class="p">,</code> <code class="nv">P2</code><code class="p">],</code> <code class="n">pre_battle</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% The dealer has to keep track of the players' process IDs,</code>
<code class="c">%% the cards they have given to the dealer for comparison,</code>
<code class="c">%% how many players have responded (0, 1, or 2), and the pile</code>
<code class="c">%% in the middle of the table in case of a war.</code>

<code class="nf">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">,</code> <code class="nv">Count</code><code class="p">,</code> <code class="nv">Pile</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">P1</code><code class="p">,</code> <code class="nv">P2</code><code class="p">]</code> <code class="o">=</code> <code class="nv">Pids</code><code class="p">,</code>
  <code class="nv">NCards</code> <code class="o">=</code> <code class="k">if</code>
    <code class="nv">Pile</code> <code class="o">==</code> <code class="p">[]</code>  <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>
    <code class="nv">Pile</code> <code class="o">/=</code> <code class="p">[]</code> <code class="o">-&gt;</code> <code class="mi">3</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="k">case</code> <code class="nv">State</code> <code class="k">of</code>
    <code class="n">pre_battle</code> <code class="o">-&gt;</code>
      <code class="nv">P1</code> <code class="o">!</code> <code class="p">{</code><code class="n">give_cards</code><code class="p">,</code> <code class="nv">NCards</code><code class="p">},</code>
      <code class="nv">P2</code> <code class="o">!</code> <code class="p">{</code><code class="n">give_cards</code><code class="p">,</code> <code class="nv">NCards</code><code class="p">},</code>
      <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">await_battle</code><code class="p">,</code> <code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">,</code> <code class="nv">Count</code><code class="p">,</code> <code class="nv">Pile</code><code class="p">);</code>
    <code class="n">await_battle</code> <code class="o">-&gt;</code>
      <code class="k">receive</code>
        <code class="p">{</code><code class="n">accept</code><code class="p">,</code> <code class="nv">Pid</code><code class="p">,</code> <code class="nv">Data</code><code class="p">}</code> <code class="o">-&gt;</code>
          <code class="nv">NextCount</code> <code class="o">=</code> <code class="nv">Count</code> <code class="o">+</code> <code class="mi">1</code><code class="p">,</code>
          <code class="k">case</code> <code class="nv">Pid</code> <code class="k">of</code>
            <code class="nv">P1</code> <code class="o">-&gt;</code> <code class="nv">Next_P1Cards</code> <code class="o">=</code> <code class="nv">Data</code><code class="p">,</code> <code class="nv">Next_P2Cards</code> <code class="o">=</code> <code class="nv">P2Cards</code><code class="p">;</code>
            <code class="nv">P2</code> <code class="o">-&gt;</code> <code class="nv">Next_P1Cards</code> <code class="o">=</code> <code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">Next_P2Cards</code> <code class="o">=</code> <code class="nv">Data</code>
          <code class="k">end</code>
      <code class="k">end</code><code class="p">,</code>
      <code class="k">if</code>
        <code class="nv">NextCount</code> <code class="o">==</code> <code class="mi">2</code> <code class="o">-&gt;</code> <code class="nv">NextState</code> <code class="o">=</code> <code class="n">check_cards</code><code class="p">;</code>
        <code class="nv">NextCount</code> <code class="o">/=</code> <code class="mi">2</code> <code class="o">-&gt;</code> <code class="nv">NextState</code> <code class="o">=</code> <code class="nv">State</code>
      <code class="k">end</code><code class="p">,</code>
      <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="nv">NextState</code><code class="p">,</code> <code class="nv">Next_P1Cards</code><code class="p">,</code> <code class="nv">Next_P2Cards</code><code class="p">,</code>
        <code class="nv">NextCount</code><code class="p">,</code> <code class="nv">Pile</code><code class="p">);</code>
    <code class="n">check_cards</code> <code class="o">-&gt;</code>
      <code class="nv">Winner</code> <code class="o">=</code> <code class="n">game_winner</code><code class="p">(</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">),</code>
      <code class="k">case</code> <code class="nv">Winner</code> <code class="k">of</code>
        <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Compare </code><code class="si">~p</code><code class="s"> to </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">]),</code>
          <code class="nv">NewPile</code> <code class="o">=</code> <code class="nv">Pile</code> <code class="o">++</code> <code class="nv">P1Cards</code> <code class="o">++</code> <code class="nv">P2Cards</code><code class="p">,</code>
          <code class="k">case</code> <code class="n">battle_winner</code><code class="p">(</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">)</code> <code class="k">of</code>
             <code class="mi">0</code> <code class="o">-&gt;</code> <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">pre_battle</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">NewPile</code><code class="p">);</code>
             <code class="mi">1</code> <code class="o">-&gt;</code>
              <code class="nv">P1</code> <code class="o">!</code> <code class="p">{</code><code class="n">take_cards</code><code class="p">,</code> <code class="nv">NewPile</code><code class="p">},</code>
              <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">await_confirmation</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="p">[]);</code>
             <code class="mi">2</code> <code class="o">-&gt;</code>
              <code class="nv">P2</code> <code class="o">!</code> <code class="p">{</code><code class="n">take_cards</code><code class="p">,</code> <code class="nv">NewPile</code><code class="p">},</code>
              <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">await_confirmation</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="p">[])</code>
           <code class="k">end</code><code class="p">;</code>
        <code class="mi">3</code> <code class="o">-&gt;</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"It's a draw!</code><code class="si">~n</code><code class="s">"</code><code class="p">),</code>
          <code class="n">end_game</code><code class="p">(</code><code class="nv">Pids</code><code class="p">);</code>
        <code class="p">_</code> <code class="o">-&gt;</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Player </code><code class="si">~p</code><code class="s"> wins</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Winner</code><code class="p">]),</code>
          <code class="n">end_game</code><code class="p">(</code><code class="nv">Pids</code><code class="p">)</code>
      <code class="k">end</code><code class="p">;</code>
    <code class="n">await_war</code><code class="o">-&gt;</code>
      <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Awaiting war</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
    <code class="n">await_confirmation</code> <code class="o">-&gt;</code>
      <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Awaiting confirmation of player receiving cards</code><code class="si">~n</code><code class="s">"</code><code class="p">),</code>
      <code class="k">receive</code>
        <code class="p">{</code><code class="n">confirmed</code><code class="p">,</code> <code class="p">_</code><code class="nv">Pid</code><code class="p">,</code> <code class="p">_</code><code class="nv">Data</code><code class="p">}</code> <code class="o">-&gt;</code>
        <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">pre_battle</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="p">[])</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">end_game</code><code class="p">(</code><code class="nv">Pids</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">foreach</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">Process</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nb">exit</code><code class="p">(</code><code class="nv">Process</code><code class="p">,</code> <code class="n">kill</code><code class="p">)</code> <code class="k">end</code><code class="p">,</code> <code class="nv">Pids</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Game finished.</code><code class="si">~n</code><code class="s">"</code><code class="p">).</code>

<code class="c">%% Do we have a winner? If both players are out of cards,</code>
<code class="c">%% it's a draw. If one player is out of cards, the other is the winner.</code>

<code class="nf">game_winner</code><code class="p">([],</code> <code class="p">[])</code> <code class="o">-&gt;</code> <code class="mi">3</code><code class="p">;</code>
<code class="nf">game_winner</code><code class="p">([],</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="mi">2</code><code class="p">;</code>
<code class="nf">game_winner</code><code class="p">(_,</code> <code class="p">[])</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>
<code class="nf">game_winner</code><code class="p">(_,</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">.</code>

<code class="nf">battle_winner</code><code class="p">(</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">V1</code> <code class="o">=</code> <code class="n">value</code><code class="p">(</code><code class="nb">hd</code><code class="p">(</code><code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">P1Cards</code><code class="p">))),</code>
  <code class="nv">V2</code> <code class="o">=</code> <code class="n">value</code><code class="p">(</code><code class="nb">hd</code><code class="p">(</code><code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">P2Cards</code><code class="p">))),</code>
  <code class="nv">Winner</code> <code class="o">=</code> <code class="k">if</code>
    <code class="nv">V1</code> <code class="o">&gt;</code> <code class="nv">V2</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>
    <code class="nv">V2</code> <code class="o">&gt;</code> <code class="nv">V1</code> <code class="o">-&gt;</code> <code class="mi">2</code><code class="p">;</code>
    <code class="nv">V1</code> <code class="o">==</code> <code class="nv">V2</code> <code class="o">-&gt;</code> <code class="mi">0</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Winner of </code><code class="si">~p</code><code class="s"> vs. </code><code class="si">~p</code><code class="s"> is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">V1</code><code class="p">,</code> <code class="nv">V2</code><code class="p">,</code> <code class="nv">Winner</code><code class="p">]),</code>
  <code class="nv">Winner</code> <code class="o">=</code> <code class="nv">Winner</code><code class="p">.</code>

<code class="nf">player</code><code class="p">(</code><code class="nv">Dealer</code><code class="p">,</code> <code class="nv">Hand</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">receive</code>
    <code class="p">{</code><code class="nv">Command</code><code class="p">,</code> <code class="nv">Data</code><code class="p">}</code> <code class="o">-&gt;</code>
      <code class="k">case</code> <code class="nv">Command</code> <code class="k">of</code>
        <code class="n">give_cards</code> <code class="o">-&gt;</code>
          <code class="p">{</code><code class="nv">ToSend</code><code class="p">,</code> <code class="nv">NewHand</code><code class="p">}</code> <code class="o">=</code> <code class="n">give_cards</code><code class="p">(</code><code class="nv">Hand</code><code class="p">,</code> <code class="nv">Data</code><code class="p">),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Sending </code><code class="si">~p</code><code class="s"> to </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">ToSend</code><code class="p">,</code> <code class="nv">Dealer</code><code class="p">]),</code>
          <code class="nv">Dealer</code><code class="o">!</code><code class="p">{</code><code class="n">accept</code><code class="p">,</code> <code class="n">self</code><code class="p">(),</code> <code class="nv">ToSend</code><code class="p">};</code>
        <code class="n">take_cards</code> <code class="o">-&gt;</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~p</code><code class="s"> now has </code><code class="si">~p</code><code class="s"> (cards)</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="n">self</code><code class="p">(),</code>
            <code class="nb">length</code><code class="p">(</code><code class="nv">Data</code><code class="p">)</code> <code class="o">+</code> <code class="nb">length</code><code class="p">(</code><code class="nv">Hand</code><code class="p">)]),</code>
          <code class="nv">NewHand</code> <code class="o">=</code> <code class="nv">Hand</code> <code class="o">++</code> <code class="nv">Data</code><code class="p">,</code>
          <code class="nv">Dealer</code><code class="o">!</code><code class="p">{</code><code class="n">confirmed</code><code class="p">,</code> <code class="n">self</code><code class="p">(),</code> <code class="p">[]}</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="n">player</code><code class="p">(</code><code class="nv">Dealer</code><code class="p">,</code> <code class="nv">NewHand</code><code class="p">).</code>

<code class="c">%% Player gives N cards from current Hand. N is 1 or 3,</code>
<code class="c">%% depending if there is a war or not.</code>
<code class="c">%% If a player is asked for 3 cards but doesn't have enough,</code>
<code class="c">%% give all the cards in the hand.</code>
<code class="c">%% This function returns a tuple: {[cards to send], [remaining cards in hand]}</code>

<code class="nf">give_cards</code><code class="p">([],</code> <code class="p">_</code><code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">{[],[]};</code>
<code class="nf">give_cards</code><code class="p">([</code><code class="nv">A</code><code class="p">],</code> <code class="p">_</code><code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">{[</code><code class="nv">A</code><code class="p">],[]};</code>
<code class="nf">give_cards</code><code class="p">([</code><code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">],</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nv">N</code> <code class="o">==</code> <code class="mi">1</code> <code class="o">-&gt;</code> <code class="p">{[</code><code class="nv">A</code><code class="p">],</code> <code class="p">[</code><code class="nv">B</code><code class="p">]};</code>
    <code class="nv">N</code> <code class="o">==</code> <code class="mi">3</code> <code class="o">-&gt;</code> <code class="p">{[</code><code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">],</code> <code class="p">[]}</code>
  <code class="k">end</code><code class="p">;</code>
<code class="nf">give_cards</code><code class="p">(</code><code class="nv">Hand</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nv">N</code> <code class="o">==</code> <code class="mi">1</code> <code class="o">-&gt;</code> <code class="p">{[</code><code class="nb">hd</code><code class="p">(</code><code class="nv">Hand</code><code class="p">)],</code> <code class="nb">tl</code><code class="p">(</code><code class="nv">Hand</code><code class="p">)};</code>
    <code class="nv">N</code> <code class="o">==</code> <code class="mi">3</code> <code class="o">-&gt;</code>
      <code class="p">[</code><code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">C</code> <code class="p">|</code> <code class="nv">Remainder</code><code class="p">]</code> <code class="o">=</code> <code class="nv">Hand</code><code class="p">,</code>
      <code class="p">{[</code><code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">C</code><code class="p">],</code> <code class="nv">Remainder</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the value of a card. Aces are high; K &gt; Q &gt; J</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">value</code><code class="p">({</code><code class="nn">cards</code><code class="p">:</code><code class="n">card</code><code class="p">()})</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">value</code><code class="p">({</code><code class="nv">V</code><code class="p">,</code> <code class="p">_</code><code class="nv">Suit</code><code class="p">})</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nb">is_integer</code><code class="p">(</code><code class="nv">V</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">V</code><code class="p">;</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">V</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="k">case</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">V</code><code class="p">)</code> <code class="k">of</code>
        <code class="sc">$J</code> <code class="o">-&gt;</code> <code class="mi">11</code><code class="p">;</code>
        <code class="sc">$Q</code> <code class="o">-&gt;</code> <code class="mi">12</code><code class="p">;</code>
        <code class="sc">$K</code> <code class="o">-&gt;</code> <code class="mi">13</code><code class="p">;</code>
        <code class="sc">$A</code> <code class="o">-&gt;</code> <code class="mi">14</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION09-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 9-1</h2></div></div></div>
<p id="here_is_a_sugge_id28">Here is a suggested solution for
<a class="link" href="ch09.html#CH09-ET01" title="Étude 9-1: try and catch">Étude 9-1</a>.</p>
<div class="sect2" id="_literal_stats_erl_literal_5">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id33"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">maximum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">range</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">mean</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">stdv</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">stdv_sums</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Uses</code>
<code class="c">%% try/catch to return an error when there's an empty list,</code>
<code class="c">%% as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">try</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">))</code> <code class="k">of</code>
    <code class="nv">Answer</code> <code class="o">-&gt;</code> <code class="nv">Answer</code>
  <code class="k">catch</code>
    <code class="nn">error</code><code class="p">:</code><code class="nv">Error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="nv">Error</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the maximum item in a list of numbers. Catches</code>
<code class="c">%% errors when given an empty list.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">maximum</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">try</code>
    <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">))</code>
  <code class="k">catch</code>
    <code class="nn">error</code><code class="p">:</code><code class="nv">Error</code><code class="o">-&gt;</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="nv">Error</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">maximum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">maximum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&gt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Return the range (maximum and minimum) of a list of numbers</code>
<code class="c">%% as a two-element list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">range</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">range</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)].</code>

<code class="c">%% @doc Return the mean of the list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">mean</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">mean</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">try</code>
    <code class="nv">Sum</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">V</code><code class="p">,</code> <code class="nv">A</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">V</code> <code class="o">+</code> <code class="nv">A</code> <code class="k">end</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">NumberList</code><code class="p">),</code>
    <code class="nv">Sum</code> <code class="o">/</code> <code class="nb">length</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code>
  <code class="k">catch</code>
    <code class="nn">error</code><code class="p">:</code><code class="nv">Error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="nv">Error</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Helper function to generate sums and sums of squares</code>
<code class="c">%% when calculating standard deviation.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">stdv_sums</code><code class="p">(</code><code class="n">number</code><code class="p">(),[</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">number</code><code class="p">()]).</code>

<code class="nf">stdv_sums</code><code class="p">(</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Sum</code><code class="p">,</code> <code class="nv">SumSquares</code><code class="p">]</code> <code class="o">=</code> <code class="nv">Accumulator</code><code class="p">,</code>
  <code class="p">[</code><code class="nv">Sum</code> <code class="o">+</code> <code class="nv">Value</code><code class="p">,</code> <code class="nv">SumSquares</code> <code class="o">+</code> <code class="nv">Value</code> <code class="o">*</code> <code class="nv">Value</code><code class="p">].</code>

<code class="c">%% @doc Calculate the standard deviation of a list of numbers.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">stdv</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">stdv</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">N</code> <code class="o">=</code> <code class="nb">length</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code>
  <code class="k">try</code>
    <code class="p">[</code><code class="nv">Sum</code><code class="p">,</code> <code class="nv">SumSquares</code><code class="p">]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code> <code class="n">stdv_sums</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="p">[</code><code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">],</code> <code class="nv">NumberList</code><code class="p">),</code>
    <code class="nn">math</code><code class="p">:</code><code class="n">sqrt</code><code class="p">((</code><code class="nv">N</code> <code class="o">*</code> <code class="nv">SumSquares</code> <code class="o">-</code> <code class="nv">Sum</code> <code class="o">*</code> <code class="nv">Sum</code><code class="p">)</code> <code class="o">/</code> <code class="p">(</code><code class="nv">N</code> <code class="o">*</code> <code class="p">(</code><code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)))</code>
  <code class="k">catch</code>
    <code class="nn">error</code><code class="p">:</code><code class="nv">Error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="nv">Error</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION09-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 9-2</h2></div></div></div>
<p id="here_is_a_sugge_id29">Here is a suggested solution for
<a class="link" href="ch09.html#CH09-ET02" title="Étude 9-2: Logging Errors">Étude 9-2</a>.</p>
<div class="sect2" id="_literal_bank_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">bank.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id34"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Implement a bank account that logs its transactions.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">bank</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">account</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">account</code><code class="p">(</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="c">%% @doc create a client and give it a starting balance</code>

<code class="nf">account</code><code class="p">(</code><code class="nv">Balance</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Input</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="s">"D)eposit, W)ithdraw, B)alance, Q)uit: "</code><code class="p">),</code>
  <code class="nv">Action</code> <code class="o">=</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">Input</code><code class="p">),</code>

  <code class="k">case</code> <code class="nv">Action</code> <code class="k">of</code>
    <code class="sc">$D</code> <code class="o">-&gt;</code>
      <code class="nv">Amount</code> <code class="o">=</code> <code class="n">get_number</code><code class="p">(</code><code class="s">"Amount to deposit: "</code><code class="p">),</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="n">transaction</code><code class="p">(</code><code class="n">deposit</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">,</code> <code class="nv">Amount</code><code class="p">);</code>
    <code class="sc">$W</code> <code class="o">-&gt;</code>
      <code class="nv">Amount</code> <code class="o">=</code> <code class="n">get_number</code><code class="p">(</code><code class="s">"Amount to withdraw: "</code><code class="p">),</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="n">transaction</code><code class="p">(</code><code class="n">withdraw</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">,</code> <code class="nv">Amount</code><code class="p">);</code>
    <code class="sc">$B</code> <code class="o">-&gt;</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="n">transaction</code><code class="p">(</code><code class="n">balance</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">);</code>
    <code class="sc">$Q</code> <code class="o">-&gt;</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code>
      <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Unknown command </code><code class="si">~c~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Action</code><code class="p">]),</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="k">if</code>
    <code class="nv">Action</code> <code class="o">/=</code> <code class="sc">$Q</code> <code class="o">-&gt;</code>
    <code class="n">account</code><code class="p">(</code><code class="nv">NewBalance</code><code class="p">);</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">true</code>
  <code class="k">end</code><code class="p">.</code>


<code class="c">%% @doc Present a prompt and get a number from the</code>
<code class="c">%% user. Allow either integers or floats.</code>
<code class="nf">get_number</code><code class="p">(</code><code class="nv">Prompt</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Str</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">Prompt</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Test</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">Test</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="nv">N</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">Str</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">N</code> <code class="o">=</code> <code class="nv">Test</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nv">N</code><code class="p">.</code>

<code class="nf">transaction</code><code class="p">(</code><code class="nv">Action</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">,</code> <code class="nv">Amount</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Action</code> <code class="k">of</code>
    <code class="n">deposit</code> <code class="o">-&gt;</code>
      <code class="k">if</code>
        <code class="nv">Amount</code> <code class="o">&gt;=</code> <code class="mi">10000</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">warning_msg</code><code class="p">(</code><code class="s">"Excessive deposit </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Your deposit of $</code><code class="si">~p</code><code class="s"> may be subject to hold."</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Your new balance is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Balance</code> <code class="o">+</code> <code class="nv">Amount</code><code class="p">]),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code> <code class="o">+</code> <code class="nv">Amount</code><code class="p">;</code>
        <code class="nv">Amount</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">error_msg</code><code class="p">(</code><code class="s">"Negative deposit amount </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Deposits may not be less than zero."</code><code class="p">),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code><code class="p">;</code>
        <code class="nv">Amount</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">info_msg</code><code class="p">(</code><code class="s">"Successful deposit </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code> <code class="o">+</code> <code class="nv">Amount</code><code class="p">,</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Your new balance is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">NewBalance</code><code class="p">])</code>
      <code class="k">end</code><code class="p">;</code>
    <code class="n">withdraw</code> <code class="o">-&gt;</code>
      <code class="k">if</code>
        <code class="nv">Amount</code> <code class="o">&gt;</code> <code class="nv">Balance</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">error_msg</code><code class="p">(</code><code class="s">"Overdraw </code><code class="si">~p</code><code class="s"> from balance </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">,</code>
            <code class="nv">Balance</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"You cannot withdraw more than your current balance of </code><code class="si">~p</code><code class="s">.</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code>
            <code class="p">[</code><code class="nv">Balance</code><code class="p">]),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code><code class="p">;</code>
        <code class="nv">Amount</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">error_msg</code><code class="p">(</code><code class="s">"Negative withdrawal amount </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Withdrawals may not be less than zero."</code><code class="p">),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code><code class="p">;</code>
        <code class="nv">Amount</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">info_msg</code><code class="p">(</code><code class="s">"Successful withdrawal </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code> <code class="o">-</code> <code class="nv">Amount</code><code class="p">,</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Your new balance is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">NewBalance</code><code class="p">])</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nv">NewBalance</code><code class="p">.</code>

<code class="nf">transaction</code><code class="p">(</code><code class="n">balance</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">error_logger</code><code class="p">:</code><code class="n">info_msg</code><code class="p">(</code><code class="s">"Balance inquiry </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Balance</code><code class="p">]),</code>
  <code class="nv">Balance</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION10-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 10-1</h2></div></div></div>
<p id="here_is_a_sugge_id30">Here is a suggested solution for
<a class="link" href="ch10.html#CH10-ET01" title="Étude 10-1: Using ETS">Étude 10-1</a>.</p>
<div class="sect2" id="_literal_phone_records_hrl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">phone_records.hrl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="recordphone_c_id1"><code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">phone_call</code><code class="p">,</code>
  <code class="p">{</code><code class="n">phone_number</code><code class="p">,</code> <code class="n">start_date</code><code class="p">,</code> <code class="n">start_time</code><code class="p">,</code> <code class="n">end_date</code><code class="p">,</code> <code class="n">end_time</code><code class="p">}).</code></pre>
</div>
<div class="sect2" id="_literal_phone_ets_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">phone_ets.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id35"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Read in a database of phone calls</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">phone_ets</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">setup</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">summary</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">summary</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>
<code class="p">-</code><code class="ni">include</code><code class="p">(</code><code class="s">"phone_records.hrl"</code><code class="p">).</code>

<code class="c">%% @doc Create an ets table of phone calls from the given file name.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">setup</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">setup</code><code class="p">(</code><code class="nv">FileName</code><code class="p">)</code> <code class="o">-&gt;</code>

  <code class="c">%% If the table exists, delete it</code>
  <code class="k">case</code> <code class="nn">ets</code><code class="p">:</code><code class="n">info</code><code class="p">(</code><code class="n">call_table</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">undefined</code> <code class="o">-&gt;</code> <code class="n">false</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nn">ets</code><code class="p">:</code><code class="n">delete</code><code class="p">(</code><code class="n">call_table</code><code class="p">)</code>
   <code class="k">end</code><code class="p">,</code>

  <code class="c">%% and create it anew</code>
  <code class="nn">ets</code><code class="p">:</code><code class="n">new</code><code class="p">(</code><code class="n">call_table</code><code class="p">,</code> <code class="p">[</code><code class="n">named_table</code><code class="p">,</code> <code class="n">bag</code><code class="p">,</code>
    <code class="p">{</code><code class="n">keypos</code><code class="p">,</code> <code class="nl">#phone_call.phone_number</code><code class="p">}]),</code>

  <code class="p">{</code><code class="nv">ResultCode</code><code class="p">,</code> <code class="nv">InputFile</code><code class="p">}</code> <code class="o">=</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="nv">FileName</code><code class="p">,</code> <code class="p">[</code><code class="n">read</code><code class="p">]),</code>
  <code class="k">case</code> <code class="nv">ResultCode</code> <code class="k">of</code>
    <code class="n">ok</code> <code class="o">-&gt;</code> <code class="n">read_item</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error opening file: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">InputFile</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% Read a line from the input file, and insert its contents into</code>
<code class="c">%% the call_table. This function is called recursively until end of file</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">read_item</code><code class="p">(</code><code class="nn">file</code><code class="p">:</code><code class="n">io_device</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">read_item</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">RawData</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">),</code>
  <code class="k">if</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">RawData</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nv">Data</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">strip</code><code class="p">(</code><code class="nv">RawData</code><code class="p">,</code> <code class="n">right</code><code class="p">,</code> <code class="sc">$\n</code><code class="p">),</code>
      <code class="p">[</code><code class="nv">Number</code><code class="p">,</code> <code class="nv">SDate</code><code class="p">,</code> <code class="nv">STime</code><code class="p">,</code> <code class="nv">EDate</code><code class="p">,</code> <code class="nv">ETime</code><code class="p">]</code> <code class="o">=</code>
        <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Data</code><code class="p">,</code> <code class="s">","</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
      <code class="nn">ets</code><code class="p">:</code><code class="n">insert</code><code class="p">(</code><code class="n">call_table</code><code class="p">,</code> <code class="nl">#phone_call</code><code class="p">{</code><code class="n">phone_number</code> <code class="o">=</code> <code class="nv">Number</code><code class="p">,</code>
        <code class="n">start_date</code> <code class="o">=</code> <code class="n">to_date</code><code class="p">(</code><code class="nv">SDate</code><code class="p">),</code> <code class="n">start_time</code> <code class="o">=</code> <code class="n">to_time</code><code class="p">(</code><code class="nv">STime</code><code class="p">),</code>
        <code class="n">end_date</code> <code class="o">=</code> <code class="n">to_date</code><code class="p">(</code><code class="nv">EDate</code><code class="p">),</code> <code class="n">end_time</code><code class="o">=</code> <code class="n">to_time</code><code class="p">(</code><code class="nv">ETime</code><code class="p">)}),</code>
      <code class="n">read_item</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">);</code>
    <code class="nv">RawData</code> <code class="o">==</code> <code class="n">eof</code> <code class="o">-&gt;</code> <code class="n">ok</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Convert a string in form "yyyy-mm-dd" to a tuple {yyyy, mm, dd}</code>
<code class="c">%% suitable for use with the calendar module.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_date</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">()}).</code>

<code class="nf">to_date</code><code class="p">(</code><code class="nv">Date</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Year</code><code class="p">,</code> <code class="nv">Month</code><code class="p">,</code> <code class="nv">Day</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Date</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[{</code><code class="nv">Y</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">D</code><code class="p">,</code> <code class="p">_}]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">Year</code><code class="p">,</code> <code class="nv">Month</code><code class="p">,</code> <code class="nv">Day</code><code class="p">]),</code>
  <code class="p">{</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">}.</code>

<code class="c">%% @doc Convert a string in form "hh:mm:ss" to a tuple {hh, mm, ss}</code>
<code class="c">%% suitable for use with the calendar module.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_time</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">()}).</code>

<code class="nf">to_time</code><code class="p">(</code><code class="nv">Time</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Hour</code><code class="p">,</code> <code class="nv">Minute</code><code class="p">,</code> <code class="nv">Second</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Time</code><code class="p">,</code> <code class="s">":"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[{</code><code class="nv">H</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">S</code><code class="p">,</code> <code class="p">_}]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">Hour</code><code class="p">,</code> <code class="nv">Minute</code><code class="p">,</code> <code class="nv">Second</code><code class="p">]),</code>
  <code class="p">{</code><code class="nv">H</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">S</code><code class="p">}.</code>

<code class="c">%% @doc Create a summary of number of minutes used by all phone numbers.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">summary</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">tuple</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())]).</code>

<code class="nf">summary</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">FirstKey</code> <code class="o">=</code> <code class="nn">ets</code><code class="p">:</code><code class="n">first</code><code class="p">(</code><code class="n">call_table</code><code class="p">),</code>
  <code class="n">summary</code><code class="p">(</code><code class="nv">FirstKey</code><code class="p">,</code> <code class="p">[]).</code>

<code class="nf">summary</code><code class="p">(</code><code class="nv">Key</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">NextKey</code> <code class="o">=</code> <code class="nn">ets</code><code class="p">:</code><code class="n">next</code><code class="p">(</code><code class="n">call_table</code><code class="p">,</code> <code class="nv">Key</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">NextKey</code> <code class="k">of</code>
    <code class="n">'$end_of_table'</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="n">summary</code><code class="p">(</code><code class="nv">NextKey</code><code class="p">,</code> <code class="p">[</code><code class="nb">hd</code><code class="p">(</code><code class="n">summary</code><code class="p">(</code><code class="nv">Key</code><code class="p">))</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Create a summary of number of minutes used by one phone number.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">summary</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">tuple</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())]).</code>

<code class="nf">summary</code><code class="p">(</code><code class="nv">PhoneNumber</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Calls</code> <code class="o">=</code> <code class="nn">ets</code><code class="p">:</code><code class="n">lookup</code><code class="p">(</code><code class="n">call_table</code><code class="p">,</code> <code class="nv">PhoneNumber</code><code class="p">),</code>
  <code class="nv">Total</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code> <code class="n">subtotal</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Calls</code><code class="p">),</code>
  <code class="p">[{</code><code class="nv">PhoneNumber</code><code class="p">,</code> <code class="nv">Total</code><code class="p">}].</code>

<code class="nf">subtotal</code><code class="p">(</code><code class="nv">Item</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">StartSeconds</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">(</code>
    <code class="p">{</code><code class="nv">Item</code><code class="nl">#phone_call.start_date</code><code class="p">,</code> <code class="nv">Item</code><code class="nl">#phone_call.start_time</code><code class="p">}),</code>
  <code class="nv">EndSeconds</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">(</code>
    <code class="p">{</code><code class="nv">Item</code><code class="nl">#phone_call.end_date</code><code class="p">,</code> <code class="nv">Item</code><code class="nl">#phone_call.end_time</code><code class="p">}),</code>
  <code class="nv">Accumulator</code> <code class="o">+</code> <code class="p">((</code><code class="nv">EndSeconds</code> <code class="o">-</code> <code class="nv">StartSeconds</code> <code class="o">+</code> <code class="mi">59</code><code class="p">)</code> <code class="ow">div</code> <code class="mi">60</code><code class="p">).</code></pre>
</div>
<div class="sect2" id="_literal_generate_calls_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">generate_calls.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id36"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Generate a random set of data for phone calls</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">generate_calls</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">make_call_list</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">format_date</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">format_time</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="nf">make_call_list</code><code class="p">(</code><code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Now</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">({{</code><code class="mi">2013</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">10</code><code class="p">},</code> <code class="p">{</code><code class="mi">9</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">}}),</code>
  <code class="nv">Numbers</code> <code class="o">=</code> <code class="p">[</code>
    <code class="p">{</code><code class="s">"213-555-0172"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"301-555-0433"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"415-555-7871"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"650-555-3326"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"729-555-8855"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"838-555-1099"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"946-555-9760"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">}</code>
  <code class="p">],</code>
  <code class="nv">CallList</code> <code class="o">=</code> <code class="n">make_call_list</code><code class="p">(</code><code class="nv">N</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">,</code> <code class="p">[]),</code>
  <code class="p">{</code><code class="nv">Result</code><code class="p">,</code> <code class="nv">OutputFile</code><code class="p">}</code> <code class="o">=</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="s">"call_list.csv"</code><code class="p">,</code> <code class="p">[</code><code class="n">write</code><code class="p">]),</code>
  <code class="k">case</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">ok</code> <code class="o">-&gt;</code> <code class="n">write_item</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="nv">CallList</code><code class="p">);</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="nv">OutputFile</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">make_call_list</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code> <code class="p">_</code><code class="nv">Numbers</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">Result</code><code class="p">);</code>

<code class="nf">make_call_list</code><code class="p">(</code><code class="nv">N</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Entry</code> <code class="o">=</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">Numbers</code><code class="p">)),</code>
  <code class="p">{</code><code class="nv">Head</code><code class="p">,</code> <code class="nv">Tail</code><code class="p">}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Entry</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Number</code><code class="p">,</code> <code class="nv">LastCall</code><code class="p">}</code> <code class="o">=</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">Tail</code><code class="p">),</code>
  <code class="nv">StartCall</code> <code class="o">=</code> <code class="nv">LastCall</code> <code class="o">+</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="mi">120</code><code class="p">)</code> <code class="o">+</code> <code class="mi">20</code><code class="p">,</code>
  <code class="nv">Duration</code> <code class="o">=</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="mi">180</code><code class="p">)</code> <code class="o">+</code> <code class="mi">40</code><code class="p">,</code>
  <code class="nv">EndCall</code> <code class="o">=</code> <code class="nv">StartCall</code> <code class="o">+</code> <code class="nv">Duration</code><code class="p">,</code>
  <code class="nv">Item</code> <code class="o">=</code> <code class="p">[</code><code class="nv">Number</code><code class="p">,</code> <code class="n">format_date</code><code class="p">(</code><code class="nv">StartCall</code><code class="p">),</code> <code class="n">format_time</code><code class="p">(</code><code class="nv">StartCall</code><code class="p">),</code>
    <code class="n">format_date</code><code class="p">(</code><code class="nv">EndCall</code><code class="p">),</code> <code class="n">format_time</code><code class="p">(</code><code class="nv">EndCall</code><code class="p">)],</code>
  <code class="nv">UpdatedNumbers</code> <code class="o">=</code> <code class="nv">Head</code> <code class="o">++</code> <code class="p">[{</code><code class="nv">Number</code><code class="p">,</code> <code class="nv">EndCall</code><code class="p">}</code> <code class="p">|</code> <code class="nb">tl</code><code class="p">(</code><code class="nv">Tail</code><code class="p">)],</code>
  <code class="n">make_call_list</code><code class="p">(</code><code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">UpdatedNumbers</code><code class="p">,</code> <code class="p">[</code><code class="nv">Item</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">]).</code>

<code class="nf">write_item</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="p">[])</code> <code class="o">-&gt;</code>
  <code class="nn">file</code><code class="p">:</code><code class="n">close</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">);</code>

<code class="nf">write_item</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code><code class="p">|</code><code class="nv">T</code><code class="p">])</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~s</code><code class="s"> </code><code class="si">~s</code><code class="s"> </code><code class="si">~s</code><code class="s"> </code><code class="si">~s</code><code class="s"> </code><code class="si">~s~n</code><code class="s">"</code><code class="p">,</code> <code class="nv">H</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">fwrite</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="s">"</code><code class="si">~s</code><code class="s">,</code><code class="si">~s</code><code class="s">,</code><code class="si">~s</code><code class="s">,</code><code class="si">~s</code><code class="s">,</code><code class="si">~s~n</code><code class="s">"</code><code class="p">,</code> <code class="nv">H</code><code class="p">),</code>
  <code class="n">write_item</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="nv">T</code><code class="p">).</code>

<code class="nf">format_date</code><code class="p">(</code><code class="nv">GSeconds</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Date</code><code class="p">,</code> <code class="p">_</code><code class="nv">Time</code><code class="p">}</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">gregorian_seconds_to_datetime</code><code class="p">(</code><code class="nv">GSeconds</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">}</code> <code class="o">=</code> <code class="nv">Date</code><code class="p">,</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">flatten</code><code class="p">(</code><code class="nn">io_lib</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~4b</code><code class="s">-</code><code class="si">~2..0b</code><code class="s">-</code><code class="si">~2..0b</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">])).</code>

<code class="nf">format_time</code><code class="p">(</code><code class="nv">GSeconds</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{_</code><code class="nv">Date</code><code class="p">,</code> <code class="nv">Time</code><code class="p">}</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">gregorian_seconds_to_datetime</code><code class="p">(</code><code class="nv">GSeconds</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="nv">H</code><code class="p">,</code> <code class="nv">S</code><code class="p">}</code> <code class="o">=</code> <code class="nv">Time</code><code class="p">,</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">flatten</code><code class="p">(</code><code class="nn">io_lib</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~2..0b</code><code class="s">:</code><code class="si">~2..0b</code><code class="s">:</code><code class="si">~2..0b</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">M</code><code class="p">,</code> <code class="nv">H</code><code class="p">,</code> <code class="nv">S</code><code class="p">])).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION10-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 10-2</h2></div></div></div>
<p id="here_is_a_sugge_id31">Here is a suggested solution for
<a class="link" href="ch10.html#CH10-ET02" title="Étude 10-2: Using Mnesia">Étude 10-2</a>.</p>
<div class="sect2" id="_literal_phone_records_hrl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">phone_records.hrl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="recordphone_c_id2"><code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">phone_call</code><code class="p">,</code>
  <code class="p">{</code><code class="n">phone_number</code><code class="p">,</code> <code class="n">start_date</code><code class="p">,</code> <code class="n">start_time</code><code class="p">,</code> <code class="n">end_date</code><code class="p">,</code> <code class="n">end_time</code><code class="p">}).</code>
<code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">customer</code><code class="p">,</code>
  <code class="p">{</code><code class="n">phone_number</code><code class="p">,</code> <code class="n">last_name</code><code class="p">,</code> <code class="n">first_name</code><code class="p">,</code> <code class="n">middle_name</code><code class="p">,</code> <code class="n">rate</code><code class="p">}).</code></pre>
</div>
<div class="sect2" id="_literal_phone_mnesia_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">phone_mnesia.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id37"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Read in a database of phone calls and customers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">phone_mnesia</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">setup</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">summary</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>
<code class="p">-</code><code class="ni">include</code><code class="p">(</code><code class="s">"phone_records.hrl"</code><code class="p">).</code>
<code class="p">-</code><code class="ni">include_lib</code><code class="p">(</code><code class="s">"stdlib/include/qlc.hrl"</code><code class="p">).</code>

<code class="c">%% @doc Set up Mnesia tables for phone calls and customers</code>
<code class="c">%% given their file names</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">setup</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">setup</code><code class="p">(</code><code class="nv">CallFileName</code><code class="p">,</code> <code class="nv">CustomerFileName</code><code class="p">)</code> <code class="o">-&gt;</code>

  <code class="nn">mnesia</code><code class="p">:</code><code class="n">create_schema</code><code class="p">([</code><code class="nb">node</code><code class="p">()]),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">start</code><code class="p">(),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">delete_table</code><code class="p">(</code><code class="n">phone_call</code><code class="p">),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">delete_table</code><code class="p">(</code><code class="n">customer</code><code class="p">),</code>

  <code class="n">fill_table</code><code class="p">(</code><code class="n">phone_call</code><code class="p">,</code> <code class="nv">CallFileName</code><code class="p">,</code> <code class="k">fun</code> <code class="n">add_call</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="n">record_info</code><code class="p">(</code><code class="n">fields</code><code class="p">,</code> <code class="n">phone_call</code><code class="p">),</code> <code class="n">bag</code><code class="p">),</code>
  <code class="n">fill_table</code><code class="p">(</code><code class="n">customer</code><code class="p">,</code> <code class="nv">CustomerFileName</code><code class="p">,</code> <code class="k">fun</code> <code class="n">add_customer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="n">record_info</code><code class="p">(</code><code class="n">fields</code><code class="p">,</code> <code class="n">customer</code><code class="p">),</code> <code class="n">set</code><code class="p">).</code>

<code class="c">%% @doc Fill the given table with data from given file name.</code>
<code class="c">%% AdderFunction assigns data to fields and writes it to the table;</code>
<code class="c">%% RecordInfo is used when creating the table, as is the TableType.</code>

<code class="nf">fill_table</code><code class="p">(</code><code class="nv">TableName</code><code class="p">,</code> <code class="nv">FileName</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">,</code> <code class="nv">RecordInfo</code><code class="p">,</code> <code class="nv">TableType</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">create_table</code><code class="p">(</code><code class="nv">TableName</code><code class="p">,</code> <code class="p">[{</code><code class="n">attributes</code><code class="p">,</code> <code class="nv">RecordInfo</code><code class="p">},</code> <code class="p">{</code><code class="n">type</code><code class="p">,</code> <code class="nv">TableType</code><code class="p">}]),</code>

  <code class="p">{</code><code class="nv">OpenResult</code><code class="p">,</code> <code class="nv">InputFile</code><code class="p">}</code> <code class="o">=</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="nv">FileName</code><code class="p">,</code> <code class="p">[</code><code class="n">read</code><code class="p">]),</code>
  <code class="k">case</code> <code class="nv">OpenResult</code> <code class="k">of</code>
    <code class="n">ok</code> <code class="o">-&gt;</code>
      <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
        <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">)</code> <code class="k">end</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error opening file: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">FileName</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Read a line from InputFile, and insert its contents into</code>
<code class="c">%% the appropriate table by using AdderFunction.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">read_file</code><code class="p">(</code><code class="nn">file</code><code class="p">:</code><code class="n">io_device</code><code class="p">(),</code> <code class="n">function</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">RawData</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">),</code>
  <code class="k">if</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">RawData</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nv">Data</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">strip</code><code class="p">(</code><code class="nv">RawData</code><code class="p">,</code> <code class="n">right</code><code class="p">,</code> <code class="sc">$\n</code><code class="p">),</code>
      <code class="nv">ItemList</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Data</code><code class="p">,</code> <code class="s">","</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
      <code class="nv">AdderFunction</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">),</code>
      <code class="n">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">);</code>
    <code class="nv">RawData</code> <code class="o">==</code> <code class="n">eof</code> <code class="o">-&gt;</code> <code class="n">ok</code>
  <code class="k">end</code><code class="p">.</code>


<code class="c">%% Add a phone call record; the data is in an ItemList.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">add_call</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">undefined</code><code class="p">).</code>

<code class="nf">add_call</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Number</code><code class="p">,</code> <code class="nv">SDate</code><code class="p">,</code> <code class="nv">STime</code><code class="p">,</code> <code class="nv">EDate</code><code class="p">,</code> <code class="nv">ETime</code><code class="p">]</code> <code class="o">=</code> <code class="nv">ItemList</code><code class="p">,</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">write</code><code class="p">(</code><code class="nl">#phone_call</code><code class="p">{</code><code class="n">phone_number</code> <code class="o">=</code> <code class="nv">Number</code><code class="p">,</code>
        <code class="n">start_date</code> <code class="o">=</code> <code class="n">to_date</code><code class="p">(</code><code class="nv">SDate</code><code class="p">),</code> <code class="n">start_time</code> <code class="o">=</code> <code class="n">to_time</code><code class="p">(</code><code class="nv">STime</code><code class="p">),</code>
        <code class="n">end_date</code> <code class="o">=</code> <code class="n">to_date</code><code class="p">(</code><code class="nv">EDate</code><code class="p">),</code> <code class="n">end_time</code><code class="o">=</code> <code class="n">to_time</code><code class="p">(</code><code class="nv">ETime</code><code class="p">)}).</code>

<code class="c">%% Add a customer record; the data is in an ItemList.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">add_customer</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">undefined</code><code class="p">).</code>

<code class="nf">add_customer</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Phone</code><code class="p">,</code> <code class="nv">Last</code><code class="p">,</code> <code class="nv">First</code><code class="p">,</code> <code class="nv">Middle</code><code class="p">,</code> <code class="nv">Rate</code><code class="p">]</code> <code class="o">=</code> <code class="nv">ItemList</code><code class="p">,</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">write</code><code class="p">(</code><code class="nl">#customer</code><code class="p">{</code><code class="n">phone_number</code> <code class="o">=</code> <code class="nv">Phone</code><code class="p">,</code> <code class="n">last_name</code> <code class="o">=</code> <code class="nv">Last</code><code class="p">,</code>
    <code class="n">first_name</code> <code class="o">=</code> <code class="nv">First</code><code class="p">,</code> <code class="n">middle_name</code> <code class="o">=</code> <code class="nv">Middle</code><code class="p">,</code> <code class="n">rate</code> <code class="o">=</code> <code class="n">to_float</code><code class="p">(</code><code class="nv">Rate</code><code class="p">)}).</code>

<code class="c">%% @doc Convert a string in form "yyyy-mm-dd" to a tuple {yyyy, mm, dd}</code>
<code class="c">%% suitable for use with the calendar module.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_date</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">()}).</code>

<code class="nf">to_date</code><code class="p">(</code><code class="nv">Date</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Year</code><code class="p">,</code> <code class="nv">Month</code><code class="p">,</code> <code class="nv">Day</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Date</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[{</code><code class="nv">Y</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">D</code><code class="p">,</code> <code class="p">_}]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">Year</code><code class="p">,</code> <code class="nv">Month</code><code class="p">,</code> <code class="nv">Day</code><code class="p">]),</code>
  <code class="p">{</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">}.</code>

<code class="c">%% @doc Convert a string in form "hh:mm:ss" to a tuple {hh, mm, ss}</code>
<code class="c">%% suitable for use with the calendar module.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_time</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">()}).</code>

<code class="nf">to_time</code><code class="p">(</code><code class="nv">Time</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Hour</code><code class="p">,</code> <code class="nv">Minute</code><code class="p">,</code> <code class="nv">Second</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Time</code><code class="p">,</code> <code class="s">":"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[{</code><code class="nv">H</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">S</code><code class="p">,</code> <code class="p">_}]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">Hour</code><code class="p">,</code> <code class="nv">Minute</code><code class="p">,</code> <code class="nv">Second</code><code class="p">]),</code>
  <code class="p">{</code><code class="nv">H</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">S</code><code class="p">}.</code>


<code class="c">%% @doc Convenience routine to convert a string to float.</code>
<code class="c">%% In case of an error, return zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_float</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FPart</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">FPart</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">FPart</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">summary</code><code class="p">(</code><code class="nv">Last</code><code class="p">,</code> <code class="nv">First</code><code class="p">,</code> <code class="nv">Middle</code><code class="p">)</code> <code class="o">-&gt;</code>

  <code class="nv">QHandle</code> <code class="o">=</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">([</code><code class="nv">Customer</code> <code class="p">||</code>
    <code class="nv">Customer</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">customer</code><code class="p">),</code>
    <code class="nv">Customer</code><code class="nl">#customer.last_name</code> <code class="o">==</code> <code class="nv">Last</code><code class="p">,</code>
    <code class="nv">Customer</code><code class="nl">#customer.first_name</code> <code class="o">==</code> <code class="nv">First</code><code class="p">,</code>
    <code class="nv">Customer</code><code class="nl">#customer.middle_name</code> <code class="o">==</code> <code class="nv">Middle</code> <code class="p">]),</code>

  <code class="p">{_</code><code class="nv">Result</code><code class="p">,</code> <code class="p">[</code><code class="nv">ThePerson</code><code class="p">|_]}</code> <code class="o">=</code>
    <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code><code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code><code class="nv">QHandle</code><code class="p">)</code> <code class="k">end</code><code class="p">),</code>

  <code class="p">{_</code><code class="nv">Result</code><code class="p">,</code> <code class="nv">Calls</code><code class="p">}</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code>
       <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
        <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[</code><code class="nv">Call</code> <code class="p">||</code>
          <code class="nv">Call</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">phone_call</code><code class="p">),</code>
          <code class="nv">QCustomer</code> <code class="o">&lt;-</code> <code class="nv">QHandle</code><code class="p">,</code>
          <code class="nv">QCustomer</code><code class="nl">#customer.phone_number</code> <code class="o">==</code> <code class="nv">Call</code><code class="nl">#phone_call.phone_number</code>
        <code class="p">]</code>
        <code class="p">)</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>

  <code class="nv">TotalMinutes</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code> <code class="n">subtotal</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Calls</code><code class="p">),</code>

  <code class="p">[{</code><code class="nv">ThePerson</code><code class="nl">#customer.phone_number</code><code class="p">,</code>
    <code class="nv">TotalMinutes</code><code class="p">,</code> <code class="nv">TotalMinutes</code> <code class="o">*</code> <code class="nv">ThePerson</code><code class="nl">#customer.rate</code><code class="p">}].</code>

<code class="nf">subtotal</code><code class="p">(</code><code class="nv">Item</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">StartSeconds</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">(</code>
    <code class="p">{</code><code class="nv">Item</code><code class="nl">#phone_call.start_date</code><code class="p">,</code> <code class="nv">Item</code><code class="nl">#phone_call.start_time</code><code class="p">}),</code>
  <code class="nv">EndSeconds</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">(</code>
    <code class="p">{</code><code class="nv">Item</code><code class="nl">#phone_call.end_date</code><code class="p">,</code> <code class="nv">Item</code><code class="nl">#phone_call.end_time</code><code class="p">}),</code>
  <code class="nv">Accumulator</code> <code class="o">+</code> <code class="p">((</code><code class="nv">EndSeconds</code> <code class="o">-</code> <code class="nv">StartSeconds</code> <code class="o">+</code> <code class="mi">59</code><code class="p">)</code> <code class="ow">div</code> <code class="mi">60</code><code class="p">).</code></pre>
</div>
<div class="sect2" id="_literal_pet_records_hrl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">pet_records.hrl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="recordperson_id2"><code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">person</code><code class="p">,</code>
  <code class="p">{</code><code class="n">id_number</code><code class="p">,</code> <code class="n">name</code><code class="p">,</code> <code class="n">age</code><code class="p">,</code> <code class="n">gender</code><code class="p">,</code> <code class="n">city</code><code class="p">,</code> <code class="n">amount_owed</code><code class="p">}).</code>
<code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">animal</code><code class="p">,</code>
  <code class="p">{</code><code class="n">id_number</code><code class="p">,</code> <code class="n">name</code><code class="p">,</code> <code class="n">species</code><code class="p">,</code> <code class="n">gender</code><code class="p">,</code> <code class="n">owner_id</code><code class="p">}).</code></pre>
</div>
<div class="sect2" id="_literal_pet_mnesia_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">pet_mnesia.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id38"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Read in a database of people and their pets</code>
<code class="c">%% appointments.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">pet_mnesia</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">setup</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">get_info</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">get_info_easier</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code>
<code class="p">-</code><code class="ni">include</code><code class="p">(</code><code class="s">"pet_records.hrl"</code><code class="p">).</code>
<code class="p">-</code><code class="ni">include_lib</code><code class="p">(</code><code class="s">"stdlib/include/qlc.hrl"</code><code class="p">).</code>

<code class="c">%% @doc Set up Mnesia tables for phone calls and customers</code>
<code class="c">%% given their file names</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">setup</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">setup</code><code class="p">(</code><code class="nv">PersonFileName</code><code class="p">,</code> <code class="nv">AnimalFileName</code><code class="p">)</code> <code class="o">-&gt;</code>

  <code class="nn">mnesia</code><code class="p">:</code><code class="n">create_schema</code><code class="p">([</code><code class="nb">node</code><code class="p">()]),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">start</code><code class="p">(),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">delete_table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">delete_table</code><code class="p">(</code><code class="n">animal</code><code class="p">),</code>

  <code class="n">fill_table</code><code class="p">(</code><code class="n">person</code><code class="p">,</code> <code class="nv">PersonFileName</code><code class="p">,</code> <code class="k">fun</code> <code class="n">add_person</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="n">record_info</code><code class="p">(</code><code class="n">fields</code><code class="p">,</code> <code class="n">person</code><code class="p">),</code> <code class="n">set</code><code class="p">),</code>
  <code class="n">fill_table</code><code class="p">(</code><code class="n">animal</code><code class="p">,</code> <code class="nv">AnimalFileName</code><code class="p">,</code> <code class="k">fun</code> <code class="n">add_animal</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="n">record_info</code><code class="p">(</code><code class="n">fields</code><code class="p">,</code> <code class="n">animal</code><code class="p">),</code> <code class="n">set</code><code class="p">).</code>

<code class="c">%% @doc Fill the given table with data from given file name.</code>
<code class="c">%% AdderFunction assigns data to fields and writes it to the table;</code>
<code class="c">%% RecordInfo is used when creating the table, as is the TableType.</code>

<code class="nf">fill_table</code><code class="p">(</code><code class="nv">TableName</code><code class="p">,</code> <code class="nv">FileName</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">,</code> <code class="nv">RecordInfo</code><code class="p">,</code> <code class="nv">TableType</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">create_table</code><code class="p">(</code><code class="nv">TableName</code><code class="p">,</code> <code class="p">[{</code><code class="n">attributes</code><code class="p">,</code> <code class="nv">RecordInfo</code><code class="p">},</code> <code class="p">{</code><code class="n">type</code><code class="p">,</code> <code class="nv">TableType</code><code class="p">}]),</code>

  <code class="p">{</code><code class="nv">OpenResult</code><code class="p">,</code> <code class="nv">InputFile</code><code class="p">}</code> <code class="o">=</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="nv">FileName</code><code class="p">,</code> <code class="p">[</code><code class="n">read</code><code class="p">]),</code>
  <code class="k">case</code> <code class="nv">OpenResult</code> <code class="k">of</code>
    <code class="n">ok</code> <code class="o">-&gt;</code>
      <code class="nv">TransResult</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
        <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">)</code> <code class="k">end</code><code class="p">),</code>
        <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Transaction result </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">TransResult</code><code class="p">]);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error opening file: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">FileName</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Read a line from InputFile, and insert its contents into</code>
<code class="c">%% the appropriate table by using AdderFunction.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">read_file</code><code class="p">(</code><code class="nn">file</code><code class="p">:</code><code class="n">io_device</code><code class="p">(),</code> <code class="n">function</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">RawData</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">),</code>
  <code class="k">if</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">RawData</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nv">Data</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">strip</code><code class="p">(</code><code class="nv">RawData</code><code class="p">,</code> <code class="n">right</code><code class="p">,</code> <code class="sc">$\n</code><code class="p">),</code>
      <code class="nv">ItemList</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Data</code><code class="p">,</code> <code class="s">","</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
      <code class="nv">AdderFunction</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">),</code>
      <code class="n">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">);</code>
    <code class="nv">RawData</code> <code class="o">==</code> <code class="n">eof</code> <code class="o">-&gt;</code> <code class="n">ok</code>
  <code class="k">end</code><code class="p">.</code>


<code class="c">%% Add a person record; the data is in an ItemList.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">add_person</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">undefined</code><code class="p">).</code>

<code class="nf">add_person</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Id</code><code class="p">,</code> <code class="nv">Name</code><code class="p">,</code> <code class="nv">Age</code><code class="p">,</code> <code class="nv">Gender</code><code class="p">,</code> <code class="nv">City</code><code class="p">,</code> <code class="nv">Owed</code><code class="p">]</code> <code class="o">=</code> <code class="nv">ItemList</code><code class="p">,</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">write</code><code class="p">(</code><code class="nl">#person</code><code class="p">{</code><code class="n">id_number</code> <code class="o">=</code> <code class="n">to_int</code><code class="p">(</code><code class="nv">Id</code><code class="p">),</code> <code class="n">name</code> <code class="o">=</code> <code class="nv">Name</code><code class="p">,</code>
    <code class="n">age</code> <code class="o">=</code> <code class="n">to_int</code><code class="p">(</code><code class="nv">Age</code><code class="p">),</code> <code class="n">gender</code> <code class="o">=</code> <code class="nv">Gender</code><code class="p">,</code> <code class="n">city</code> <code class="o">=</code> <code class="nv">City</code><code class="p">,</code>
    <code class="n">amount_owed</code> <code class="o">=</code> <code class="n">to_float</code><code class="p">(</code><code class="nv">Owed</code><code class="p">)}).</code>

<code class="c">%% Add an animal record; the data is in an ItemList.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">add_animal</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">undefined</code><code class="p">).</code>

<code class="nf">add_animal</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Id</code><code class="p">,</code> <code class="nv">Name</code><code class="p">,</code> <code class="nv">Species</code><code class="p">,</code> <code class="nv">Gender</code><code class="p">,</code> <code class="nv">Owner</code><code class="p">]</code> <code class="o">=</code> <code class="nv">ItemList</code><code class="p">,</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">write</code><code class="p">(</code><code class="nl">#animal</code><code class="p">{</code><code class="n">id_number</code> <code class="o">=</code> <code class="n">to_int</code><code class="p">(</code><code class="nv">Id</code><code class="p">),</code>
    <code class="n">name</code> <code class="o">=</code> <code class="nv">Name</code><code class="p">,</code> <code class="n">species</code> <code class="o">=</code> <code class="nv">Species</code><code class="p">,</code> <code class="n">gender</code> <code class="o">=</code> <code class="nv">Gender</code><code class="p">,</code>
    <code class="n">owner_id</code> <code class="o">=</code> <code class="n">to_int</code><code class="p">(</code><code class="nv">Owner</code><code class="p">)}).</code>

<code class="c">%% @doc Convenience routine to convert a string to integer.</code>
<code class="c">%% In case of an error, return zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_int</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">to_int</code><code class="p">(</code><code class="nv">Str</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">IPart</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">IPart</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">IPart</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Convenience routine to convert a string to float.</code>
<code class="c">%% In case of an error, return zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_float</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FPart</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">FPart</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">FPart</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">get_info</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">People</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
      <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[</code> <code class="nv">P</code> <code class="p">||</code>
        <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
        <code class="nv">P</code><code class="nl">#person.age</code> <code class="o">&gt;=</code> <code class="mi">21</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.gender</code> <code class="o">==</code> <code class="s">"M"</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.city</code> <code class="o">==</code> <code class="s">"Podunk"</code><code class="p">]</code>
        <code class="p">)</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>

  <code class="nv">Pets</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
      <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[{</code><code class="nv">A</code><code class="nl">#animal.name</code><code class="p">,</code> <code class="nv">A</code><code class="nl">#animal.species</code><code class="p">,</code> <code class="nv">P</code><code class="nl">#person.name</code><code class="p">}</code> <code class="p">||</code>
        <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
        <code class="nv">P</code><code class="nl">#person.age</code> <code class="o">&gt;=</code> <code class="mi">21</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.gender</code> <code class="o">==</code> <code class="s">"M"</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.city</code> <code class="o">==</code> <code class="s">"Podunk"</code><code class="p">,</code>
        <code class="nv">A</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">animal</code><code class="p">),</code>
        <code class="nv">A</code><code class="nl">#animal.owner_id</code> <code class="o">==</code> <code class="nv">P</code><code class="nl">#person.id_number</code><code class="p">])</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>
  <code class="p">[</code><code class="nv">People</code><code class="p">,</code> <code class="nv">Pets</code><code class="p">].</code>

<code class="nf">get_info_easier</code><code class="p">()</code> <code class="o">-&gt;</code>

  <code class="c">%% "Pre-process" the list comprehension for finding people</code>

  <code class="nv">QHandle</code> <code class="o">=</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[</code> <code class="nv">P</code> <code class="p">||</code>
    <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
    <code class="nv">P</code><code class="nl">#person.age</code> <code class="o">&gt;=</code> <code class="mi">21</code><code class="p">,</code>
    <code class="nv">P</code><code class="nl">#person.gender</code> <code class="o">==</code> <code class="s">"M"</code><code class="p">,</code>
    <code class="nv">P</code><code class="nl">#person.city</code> <code class="o">==</code> <code class="s">"Podunk"</code><code class="p">]</code>
  <code class="p">),</code>

  <code class="c">%% Evaluate it to retrieve the people you want</code>

  <code class="nv">People</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code> <code class="nv">QHandle</code> <code class="p">)</code> <code class="k">end</code>
  <code class="p">),</code>

  <code class="c">%% And use the handle again when retrieving</code>
  <code class="c">%% information about their pets</code>

  <code class="nv">Pets</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
      <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[{</code><code class="nv">A</code><code class="nl">#animal.name</code><code class="p">,</code> <code class="nv">A</code><code class="nl">#animal.species</code><code class="p">,</code> <code class="nv">P</code><code class="nl">#person.name</code><code class="p">}</code> <code class="p">||</code>
        <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nv">QHandle</code><code class="p">,</code>
        <code class="nv">A</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">animal</code><code class="p">),</code>
        <code class="nv">A</code><code class="nl">#animal.owner_id</code> <code class="o">==</code> <code class="nv">P</code><code class="nl">#person.id_number</code><code class="p">])</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>
  <code class="p">[</code><code class="nv">People</code><code class="p">,</code> <code class="nv">Pets</code><code class="p">].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION11-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 11-1</h2></div></div></div>
<p id="here_is_a_sugge_id32">Here is a suggested solution for
<a class="link" href="ch11.html#CH11-ET01" title="Étude 11-1: Get the Weather">Étude 11-1</a>.</p>
<div class="sect2" id="_literal_weather_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">weather.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="moduleweather_id1"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">weather</code><code class="p">).</code>
<code class="p">-</code><code class="ni">behaviour</code><code class="p">(</code><code class="n">gen_server</code><code class="p">).</code>
<code class="p">-</code><code class="ni">include_lib</code><code class="p">(</code><code class="s">"xmerl/include/xmerl.hrl"</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">start_link</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code> <code class="c">% convenience call for startup</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">init</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
         <code class="n">handle_call</code><code class="o">/</code><code class="mi">3</code><code class="p">,</code>
         <code class="n">handle_cast</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">handle_info</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">terminate</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">code_change</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code> <code class="c">% gen_server callbacks</code>
<code class="p">-</code><code class="ni">define</code><code class="p">(</code><code class="no">SERVER</code><code class="p">,</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">).</code> <code class="c">% macro that just defines this module as server</code>

<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">()</code> <code class="o">-&gt;</code>
        <code class="nn">gen_server</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">local</code><code class="p">,</code> <code class="o">?</code><code class="nv">SERVER</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[]).</code>

<code class="c">%%% gen_server callbacks</code>
<code class="nf">init</code><code class="p">([])</code> <code class="o">-&gt;</code>
  <code class="nn">inets</code><code class="p">:</code><code class="n">start</code><code class="p">(),</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">[]}.</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">}</code> <code class="o">=</code> <code class="n">get_weather</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">}.</code>

<code class="nf">handle_cast</code><code class="p">(_</code><code class="nv">Message</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Most recent requests: </code><code class="si">~p</code><code class="se">\n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">State</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_info</code><code class="p">(_</code><code class="nv">Info</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">terminate</code><code class="p">(_</code><code class="nv">Reason</code><code class="p">,</code> <code class="p">_</code><code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">inets</code><code class="p">:</code><code class="n">stop</code><code class="p">(),</code>
  <code class="n">ok</code><code class="p">.</code>

<code class="nf">code_change</code><code class="p">(_</code><code class="nv">OldVsn</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="p">_</code><code class="nv">Extra</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="c">%%% Internal functions</code>

<code class="c">%% Given a 4-letter station code as the Request, return its basic</code>
<code class="c">%% weather information as a {key,value} list. If successful, add the</code>
<code class="c">%% station name to the State, which will keep track of recently-accessed</code>
<code class="c">%% weather stations.</code>

<code class="nf">get_weather</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">URL</code> <code class="o">=</code> <code class="s">"http://w1.weather.gov/xml/current_obs/"</code> <code class="o">++</code> <code class="nv">Request</code> <code class="o">++</code> <code class="s">".xml"</code><code class="p">,</code>
  <code class="p">{</code><code class="nv">Result</code><code class="p">,</code> <code class="nv">Info</code><code class="p">}</code> <code class="o">=</code> <code class="nn">httpc</code><code class="p">:</code><code class="n">request</code><code class="p">(</code><code class="nv">URL</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="p">{{</code><code class="nv">Result</code><code class="p">,</code> <code class="nv">Info</code><code class="p">},</code> <code class="nv">State</code><code class="p">};</code>
    <code class="n">ok</code> <code class="o">-&gt;</code>
      <code class="p">{{_</code><code class="nv">Protocol</code><code class="p">,</code> <code class="nv">Code</code><code class="p">,</code> <code class="p">_</code><code class="nv">CodeStr</code><code class="p">},</code> <code class="p">_</code><code class="nv">Attrs</code><code class="p">,</code> <code class="nv">WebData</code><code class="p">}</code> <code class="o">=</code> <code class="nv">Info</code><code class="p">,</code>
      <code class="k">case</code> <code class="nv">Code</code> <code class="k">of</code>
        <code class="mi">404</code> <code class="o">-&gt;</code>
          <code class="p">{{</code><code class="n">error</code><code class="p">,</code> <code class="mi">404</code><code class="p">},</code> <code class="nv">State</code><code class="p">};</code>
        <code class="mi">200</code> <code class="o">-&gt;</code>
          <code class="nv">Weather</code> <code class="o">=</code> <code class="n">analyze_info</code><code class="p">(</code><code class="nv">WebData</code><code class="p">),</code>
          <code class="p">{{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">Weather</code><code class="p">},</code> <code class="p">[</code><code class="nv">Request</code> <code class="p">|</code> <code class="nn">lists</code><code class="p">:</code><code class="n">sublist</code><code class="p">(</code><code class="nv">State</code><code class="p">,</code> <code class="mi">10</code><code class="p">)]}</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% Take raw XML data and return a set of {key, value} tuples</code>

<code class="nf">analyze_info</code><code class="p">(</code><code class="nv">WebData</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="c">%% list of fields that you want to extract</code>
  <code class="nv">ToFind</code> <code class="o">=</code> <code class="p">[</code><code class="n">location</code><code class="p">,</code> <code class="n">observation_time_rfc822</code><code class="p">,</code> <code class="n">weather</code><code class="p">,</code> <code class="n">temperature_string</code><code class="p">],</code>

  <code class="c">%% get just the parsed data from the XML parse result</code>
  <code class="nv">Parsed</code> <code class="o">=</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">xmerl_scan</code><code class="p">:</code><code class="n">string</code><code class="p">(</code><code class="nv">WebData</code><code class="p">)),</code>

  <code class="c">%% This is the list of all children under &lt;current_observation&gt;</code>
  <code class="nv">Children</code> <code class="o">=</code> <code class="nv">Parsed</code><code class="nl">#xmlElement.content</code><code class="p">,</code>

  <code class="c">%% Find only XML elements and extract their names and their text content.</code>
  <code class="c">%% You need the guard so that you don't process the newlines in the</code>
  <code class="c">%% data (they are XML text descendants of the root element).</code>
  <code class="nv">ElementList</code> <code class="o">=</code> <code class="p">[{</code><code class="nv">El</code><code class="nl">#xmlElement.name</code><code class="p">,</code> <code class="n">extract_text</code><code class="p">(</code><code class="nv">El</code><code class="nl">#xmlElement.content</code><code class="p">)}</code>
    <code class="p">||</code> <code class="nv">El</code> <code class="o">&lt;-</code> <code class="nv">Children</code><code class="p">,</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nv">El</code><code class="p">)</code> <code class="o">==</code> <code class="n">xmlElement</code><code class="p">],</code>

  <code class="c">%% ElementList is now a keymap; get the data you want from it.</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">Item</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keyfind</code><code class="p">(</code><code class="nv">Item</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">ElementList</code><code class="p">)</code> <code class="k">end</code><code class="p">,</code> <code class="nv">ToFind</code><code class="p">).</code>


<code class="c">%% Given the parsed content of an XML element, return its first node value</code>
<code class="c">%% (if it's a text node); otherwise return the empty string.</code>

<code class="nf">extract_text</code><code class="p">(</code><code class="nv">Content</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Item</code> <code class="o">=</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">Content</code><code class="p">),</code>
  <code class="k">case</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nv">Item</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">xmlText</code> <code class="o">-&gt;</code> <code class="nv">Item</code><code class="nl">#xmlText.value</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="s">""</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
<div class="sect2" id="_literal_weather_sup_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">weather_sup.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="moduleweather_id2"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">weather_sup</code><code class="p">).</code>
<code class="p">-</code><code class="ni">behaviour</code><code class="p">(</code><code class="n">supervisor</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">start_link</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code> <code class="c">% convenience call for startup</code>

<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">init</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code> <code class="c">% supervisor calls</code>
<code class="p">-</code><code class="ni">define</code><code class="p">(</code><code class="no">SERVER</code><code class="p">,</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">).</code>


<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">supervisor</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">local</code><code class="p">,</code> <code class="o">?</code><code class="nv">SERVER</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%%% supervisor callback</code>
<code class="nf">init</code><code class="p">([])</code> <code class="o">-&gt;</code>
    <code class="nv">RestartStrategy</code> <code class="o">=</code> <code class="n">one_for_one</code><code class="p">,</code>
    <code class="nv">MaxRestarts</code> <code class="o">=</code> <code class="mi">1</code><code class="p">,</code> <code class="c">% one restart every</code>
    <code class="nv">MaxSecondsBetweenRestarts</code> <code class="o">=</code> <code class="mi">5</code><code class="p">,</code> <code class="c">% five seconds</code>

    <code class="nv">SupFlags</code> <code class="o">=</code> <code class="p">{</code><code class="nv">RestartStrategy</code><code class="p">,</code> <code class="nv">MaxRestarts</code><code class="p">,</code> <code class="nv">MaxSecondsBetweenRestarts</code><code class="p">},</code>

    <code class="nv">Restart</code> <code class="o">=</code> <code class="n">permanent</code><code class="p">,</code> <code class="c">% or temporary, or transient</code>
    <code class="nv">Shutdown</code> <code class="o">=</code> <code class="mi">2000</code><code class="p">,</code> <code class="c">% milliseconds, could be infinity or brutal_kill</code>
    <code class="nv">Type</code> <code class="o">=</code> <code class="n">worker</code><code class="p">,</code> <code class="c">% could also be supervisor</code>

    <code class="nv">Weather</code> <code class="o">=</code> <code class="p">{</code><code class="n">weather</code><code class="p">,</code> <code class="p">{</code><code class="n">weather</code><code class="p">,</code> <code class="n">start_link</code><code class="p">,</code> <code class="p">[]},</code>
                      <code class="nv">Restart</code><code class="p">,</code> <code class="nv">Shutdown</code><code class="p">,</code> <code class="nv">Type</code><code class="p">,</code> <code class="p">[</code><code class="n">weather</code><code class="p">]},</code>

    <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">{</code><code class="nv">SupFlags</code><code class="p">,</code> <code class="p">[</code><code class="nv">Weather</code><code class="p">]}}.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION11-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 11-2</h2></div></div></div>
<p id="here_is_a_sugge_id33">Here is a suggested solution for
<a class="link" href="ch11.html#CH11-ET02" title="Étude 11-2: Wrapper Functions">Étude 11-2</a>. Since the bulk of the code
is identical to the code in the previous étude,
the only code shown here is the revised <code class="literal">-export</code> list
and the added functions.</p>
<div class="sect2" id="_literal_weather_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">weather.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="exportreport"><code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">report</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">recent</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code> <code class="c">% wrapper functions</code>

<code class="c">%% Wrapper to hide internal details when getting a weather report</code>
<code class="nf">report</code><code class="p">(</code><code class="nv">Station</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">SERVER</code><code class="p">,</code> <code class="nv">Station</code><code class="p">).</code>

<code class="c">%% Wrapper to hide internal details when getting a list of recently used</code>
<code class="c">%% stations.</code>
<code class="nf">recent</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">cast</code><code class="p">(</code><code class="o">?</code><code class="nv">SERVER</code><code class="p">,</code> <code class="s">""</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION11-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 11-3</h2></div></div></div>
<p id="here_is_a_sugge_id34">Here is a suggested solution for
<a class="link" href="ch11.html#CH11-ET03" title="Étude 11-3: Independent Server and Client">Étude 11-3</a>. Since the bulk of the code
is identical to the previous étude,
the only code shown here is the added and revised code.</p>
<pre class="programlisting" data-language="erlang" id="doc_connect"><code class="c">%% @doc Connect to a named server</code>
<code class="nf">connect</code><code class="p">(</code><code class="nv">ServerName</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Result</code> <code class="o">=</code> <code class="nn">net_adm</code><code class="p">:</code><code class="n">ping</code><code class="p">(</code><code class="nv">ServerName</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">pong</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Connected to server.</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
    <code class="n">pang</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Cannot connect to </code><code class="si">~p</code><code class="s">.</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">ServerName</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% Wrapper to hide internal details when getting a weather report</code>
<code class="nf">report</code><code class="p">(</code><code class="nv">Station</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">global</code><code class="p">,</code> <code class="n">weather</code><code class="p">},</code> <code class="nv">Station</code><code class="p">).</code>

<code class="c">%% Wrapper to hide internal details when getting a list of recently used</code>
<code class="c">%% stations.</code>
<code class="nf">recent</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">global</code><code class="p">,</code><code class="n">weather</code><code class="p">},</code> <code class="n">recent</code><code class="p">).</code>

<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">global</code><code class="p">,</code> <code class="o">?</code><code class="nv">SERVER</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[]).</code>

<code class="c">%%% gen_server callbacks</code>
<code class="nf">init</code><code class="p">([])</code> <code class="o">-&gt;</code>
  <code class="nn">inets</code><code class="p">:</code><code class="n">start</code><code class="p">(),</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">[]}.</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">recent</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>
<code class="nf">handle_call</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">}</code> <code class="o">=</code> <code class="n">get_weather</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">}.</code>

<code class="nf">handle_cast</code><code class="p">(_</code><code class="nv">Message</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Most recent requests: </code><code class="si">~p</code><code class="se">\n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">State</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code></pre>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION11-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 11-4</h2></div></div></div>
<p id="here_is_a_sugge_id35">Here is a suggested solution for
<a class="link" href="ch11.html#CH11-ET04" title="Étude 11-4: Chat Room">Étude 11-4</a>.</p>
<div class="sect2" id="_literal_chatroom_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">chatroom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="modulechatroo"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">chatroom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">behaviour</code><code class="p">(</code><code class="n">gen_server</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">start_link</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code> <code class="c">% convenience call for startup</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">init</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
         <code class="n">handle_call</code><code class="o">/</code><code class="mi">3</code><code class="p">,</code>
         <code class="n">handle_cast</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">handle_info</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">terminate</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">code_change</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code> <code class="c">% gen_server callbacks</code>

<code class="p">-</code><code class="ni">define</code><code class="p">(</code><code class="no">SERVER</code><code class="p">,</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">).</code> <code class="c">% macro that defines this module as the server</code>

<code class="c">% The server state consists of a list of tuples for each person in chat.</code>
<code class="c">% Each tuple has the format {{UserName, UserServer}, PID of person}</code>

<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">local</code><code class="p">,</code> <code class="o">?</code><code class="nv">SERVER</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[]).</code>

<code class="c">%%% gen_server callbacks</code>
<code class="nf">init</code><code class="p">([])</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">[]}.</code>

<code class="c">%% Check to see if a user name/server pair is unique;</code>
<code class="c">%% if so, add it to the server's state</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">login</code><code class="p">,</code> <code class="nv">UserName</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FromPid</code><code class="p">,</code> <code class="p">_</code><code class="nv">FromTag</code><code class="p">}</code> <code class="o">=</code> <code class="nv">From</code><code class="p">,</code>
  <code class="k">case</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keymember</code><code class="p">({</code><code class="nv">UserName</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code>
      <code class="nv">NewState</code> <code class="o">=</code> <code class="nv">State</code><code class="p">,</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="s">"User "</code> <code class="o">++</code> <code class="nv">UserName</code> <code class="o">++</code> <code class="s">" already in use."</code><code class="p">};</code>
    <code class="n">false</code> <code class="o">-&gt;</code>
      <code class="nv">NewState</code> <code class="o">=</code> <code class="p">[{{</code><code class="nv">UserName</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="nv">FromPid</code><code class="p">}</code> <code class="p">|</code> <code class="nv">State</code><code class="p">],</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="s">"Logged in."</code><code class="p">}</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">};</code>

<code class="c">%% Log out the person sending the message, but only</code>
<code class="c">%% if they're logged in already.</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">logout</code><code class="p">,</code> <code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FromPid</code><code class="p">,</code> <code class="p">_</code><code class="nv">FromTag</code><code class="p">}</code> <code class="o">=</code> <code class="nv">From</code><code class="p">,</code>
  <code class="k">case</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keymember</code><code class="p">(</code><code class="nv">FromPid</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code>
      <code class="nv">NewState</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keydelete</code><code class="p">(</code><code class="nv">FromPid</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>
      <code class="nv">Reply</code>  <code class="o">=</code> <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="n">logged_out</code><code class="p">};</code>
    <code class="n">false</code> <code class="o">-&gt;</code>
      <code class="nv">NewState</code> <code class="o">=</code> <code class="nv">State</code><code class="p">,</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="n">not_logged_in</code><code class="p">}</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">};</code>

<code class="c">%% When receiving a message from a person, use the From PID to</code>
<code class="c">%% get the user's name and server name from the chatroom server state.</code>
<code class="c">%% Send the message via a "cast" to everyone who is NOT the sender.</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">say</code><code class="p">,</code> <code class="nv">Text</code><code class="p">},</code> <code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FromPid</code><code class="p">,</code> <code class="p">_</code><code class="nv">FromTag</code><code class="p">}</code> <code class="o">=</code> <code class="nv">From</code><code class="p">,</code>

  <code class="k">case</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keymember</code><code class="p">(</code><code class="nv">FromPid</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code>
    <code class="p">{</code><code class="n">value</code><code class="p">,</code> <code class="p">{{</code><code class="nv">SenderName</code><code class="p">,</code> <code class="nv">SenderServer</code><code class="p">},</code> <code class="p">_}}</code> <code class="o">=</code>
      <code class="nn">lists</code><code class="p">:</code><code class="n">keysearch</code><code class="p">(</code><code class="nv">FromPid</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>

    <code class="c">% For debugging: get the list of recipients.</code>
    <code class="nv">RecipientList</code> <code class="o">=</code> <code class="p">[{</code><code class="nv">RecipientName</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">}</code> <code class="p">||</code>
      <code class="p">{{</code><code class="nv">RecipientName</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">},</code> <code class="p">_}</code> <code class="o">&lt;-</code> <code class="nv">State</code><code class="p">,</code>
      <code class="p">{</code><code class="nv">RecipientName</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">}</code> <code class="o">/=</code> <code class="p">{</code><code class="nv">SenderName</code><code class="p">,</code> <code class="nv">SenderServer</code><code class="p">}],</code>
    <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Recipient list: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">RecipientList</code><code class="p">]),</code>

    <code class="p">[</code><code class="nn">gen_server</code><code class="p">:</code><code class="n">cast</code><code class="p">({</code><code class="n">person</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">},</code>
      <code class="p">{</code><code class="n">message</code><code class="p">,</code> <code class="p">{</code><code class="nv">SenderName</code><code class="p">,</code> <code class="nv">SenderServer</code><code class="p">},</code> <code class="nv">Text</code><code class="p">})</code> <code class="p">||</code>
      <code class="p">{{</code><code class="nv">RecipientName</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">},</code> <code class="p">_}</code> <code class="o">&lt;-</code> <code class="nv">State</code><code class="p">,</code>
     <code class="nv">RecipientName</code> <code class="o">/=</code> <code class="nv">SenderName</code><code class="p">];</code>

    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">ok</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="n">ok</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="c">%% Get the state of another person and return it to the asker</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">who</code><code class="p">,</code> <code class="nv">Person</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="c">% Find pid of the person at the serverref</code>
  <code class="nv">Found</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keyfind</code><code class="p">({</code><code class="nv">Person</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>

  <code class="k">case</code> <code class="nv">Found</code> <code class="k">of</code>
    <code class="p">{{_</code><code class="nv">FromUser</code><code class="p">,</code> <code class="p">_</code><code class="nv">FromServer</code><code class="p">},</code> <code class="nv">Pid</code><code class="p">}</code> <code class="o">-&gt;</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="nv">Pid</code><code class="p">,</code> <code class="n">get_profile</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="s">"Cannot find that user"</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="c">%% Return a list of all users currently in the chat room</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">users</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">UserList</code> <code class="o">=</code> <code class="p">[{</code><code class="nv">UserName</code><code class="p">,</code> <code class="nv">UserServer</code><code class="p">}</code> <code class="p">||</code>
    <code class="p">{{</code><code class="nv">UserName</code><code class="p">,</code> <code class="nv">UserServer</code><code class="p">},</code> <code class="p">_}</code> <code class="o">&lt;-</code> <code class="nv">State</code><code class="p">],</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">UserList</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="s">"Unhandled Request"</code><code class="p">,</code> <code class="nv">Request</code><code class="p">},</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_cast</code><code class="p">(_</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_info</code><code class="p">(</code><code class="nv">Info</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Received unknown message </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Info</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">terminate</code><code class="p">(_</code><code class="nv">Reason</code><code class="p">,</code> <code class="p">_</code><code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">ok</code><code class="p">.</code>

<code class="nf">code_change</code><code class="p">(_</code><code class="nv">OldVsn</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="p">_</code><code class="nv">Extra</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="c">%%% Internal functions</code></pre>
</div>
<div class="sect2" id="_literal_person_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">person.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="moduleperson"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">person</code><code class="p">).</code>
<code class="p">-</code><code class="ni">behaviour</code><code class="p">(</code><code class="n">gen_server</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">start_link</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code> <code class="c">% convenience call for startup</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">init</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
         <code class="n">handle_call</code><code class="o">/</code><code class="mi">3</code><code class="p">,</code>
         <code class="n">handle_cast</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">handle_info</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">terminate</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">code_change</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code> <code class="c">% gen_server callbacks</code>

<code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">state</code><code class="p">,</code> <code class="p">{</code><code class="n">chat_node</code><code class="p">,</code> <code class="n">profile</code><code class="p">}).</code>

<code class="c">% internal functions</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">login</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">logout</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">say</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">users</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">who</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">set_profile</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="p">-</code><code class="ni">define</code><code class="p">(</code><code class="no">CLIENT</code><code class="p">,</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">).</code> <code class="c">% macro that defines this module as the client</code>

<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">(</code><code class="nv">ChatNode</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">local</code><code class="p">,</code> <code class="o">?</code><code class="nv">CLIENT</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="nv">ChatNode</code><code class="p">,</code> <code class="p">[]).</code>

<code class="nf">init</code><code class="p">(</code><code class="nv">ChatNode</code><code class="p">)</code><code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Chat node is: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">ChatNode</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nl">#state</code><code class="p">{</code><code class="n">chat_node</code><code class="o">=</code><code class="nv">ChatNode</code><code class="p">,</code> <code class="n">profile</code><code class="o">=</code><code class="p">[]}}.</code>

<code class="c">%% The server is asked to either:</code>
<code class="c">%% a) return the chat host name from the state,</code>
<code class="c">%% b) return the user profile</code>
<code class="c">%% c) update the user profile</code>
<code class="c">%% d) log a user in</code>
<code class="c">%% e) send a message to all people in chat room</code>
<code class="c">%% f) log a user out</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">get_chat_node</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">get_profile</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.profile</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">set_profile</code><code class="p">,</code> <code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">},</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keymember</code><code class="p">(</code><code class="nv">Key</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.profile</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="nv">NewProfile</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keyreplace</code><code class="p">(</code><code class="nv">Key</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.profile</code><code class="p">,</code>
      <code class="p">{</code><code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">});</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="nv">NewProfile</code> <code class="o">=</code> <code class="p">[{</code><code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">}</code> <code class="p">|</code> <code class="nv">State</code><code class="nl">#state.profile</code><code class="p">]</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">NewProfile</code><code class="p">,</code>
    <code class="nl">#state</code><code class="p">{</code><code class="n">chat_node</code> <code class="o">=</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">,</code> <code class="n">profile</code><code class="o">=</code><code class="nv">NewProfile</code><code class="p">}};</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">login</code><code class="p">,</code> <code class="nv">UserName</code><code class="p">},</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Reply</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">},</code>
    <code class="p">{</code><code class="n">login</code><code class="p">,</code> <code class="nv">UserName</code><code class="p">,</code> <code class="nb">node</code><code class="p">()}),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">say</code><code class="p">,</code> <code class="nv">Text</code><code class="p">},</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Reply</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">},</code>
    <code class="p">{</code><code class="n">say</code><code class="p">,</code> <code class="nv">Text</code><code class="p">}),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">logout</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Reply</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">},</code> <code class="n">logout</code><code class="p">),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">(_,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">[],</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_cast</code><code class="p">({</code><code class="n">message</code><code class="p">,</code> <code class="p">{</code><code class="nv">FromUser</code><code class="p">,</code> <code class="nv">FromServer</code><code class="p">},</code> <code class="nv">Text</code><code class="p">},</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~s</code><code class="s"> (</code><code class="si">~p</code><code class="s">) says: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">FromUser</code><code class="p">,</code> <code class="nv">FromServer</code><code class="p">,</code> <code class="nv">Text</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_cast</code><code class="p">(_</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Unknown request </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">_</code><code class="nv">Request</code><code class="p">),</code>
  <code class="p">{</code><code class="n">noReply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_info</code><code class="p">(</code><code class="nv">Info</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Received unexpected message: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Info</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">terminate</code><code class="p">(_</code><code class="nv">Reason</code><code class="p">,</code> <code class="p">_</code><code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">ok</code><code class="p">.</code>

<code class="nf">code_change</code><code class="p">(_</code><code class="nv">OldVsn</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="p">_</code><code class="nv">Extra</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>


<code class="c">% internal functions</code>

<code class="c">%% @doc Gets the name of the chat host. This is a really</code>
<code class="c">%% ugly hack; it works by sending itself a call to retrieve</code>
<code class="c">%% the chat node name from the server state.</code>

<code class="nf">get_chat_node</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="n">person</code><code class="p">,</code> <code class="n">get_chat_node</code><code class="p">).</code>

<code class="c">%% @doc Login to a server using a name</code>
<code class="c">%% If you connect, tell the server your user name and node.</code>
<code class="c">%% You don't need a reply from the server for this.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">login</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">term</code><code class="p">()).</code>

<code class="nf">login</code><code class="p">(</code><code class="nv">UserName</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nb">is_atom</code><code class="p">(</code><code class="nv">UserName</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code>
        <code class="p">{</code><code class="n">login</code><code class="p">,</code> <code class="nb">atom_to_list</code><code class="p">(</code><code class="nv">UserName</code><code class="p">)});</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">UserName</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code>
        <code class="p">{</code><code class="n">login</code><code class="p">,</code> <code class="nv">UserName</code><code class="p">});</code>
    <code class="n">true</code> <code class="o">-&gt;</code>
      <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="s">"User name must be an atom or a list"</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>


<code class="c">%% @doc Log out of the system. The person server will send a From that tells</code>
<code class="c">%% who is logging out; the chatroom server doesn't need to reply.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">logout</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">logout</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code> <code class="n">logout</code><code class="p">),</code>
  <code class="n">ok</code><code class="p">.</code>


<code class="c">%% @doc Send the given Text to the chat room server. No reply needed.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">say</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">say</code><code class="p">(</code><code class="nv">Text</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code> <code class="p">{</code><code class="n">say</code><code class="p">,</code> <code class="nv">Text</code><code class="p">}),</code>
  <code class="n">ok</code><code class="p">.</code>

<code class="c">%% @doc Ask chat room server for a list of users.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">users</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">string</code><code class="p">()]).</code>

<code class="nf">users</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="n">get_chat_node</code><code class="p">()},</code> <code class="n">users</code><code class="p">).</code>

<code class="c">%% @doc Ask chat room server for a profile of a given person.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">who</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">atom</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">tuple</code><code class="p">()]).</code>

<code class="nf">who</code><code class="p">(</code><code class="nv">Person</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="n">get_chat_node</code><code class="p">()},</code>
    <code class="p">{</code><code class="n">who</code><code class="p">,</code> <code class="nv">Person</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">}).</code>

<code class="c">%% @doc Update profile with a key/value pair.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">set_profile</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">term</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">term</code><code class="p">()).</code>

<code class="nf">set_profile</code><code class="p">(</code><code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="c">% ask *this* server for the current state</code>
  <code class="nv">NewProfile</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code> <code class="p">{</code><code class="n">set_profile</code><code class="p">,</code> <code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">}),</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">NewProfile</code><code class="p">}.</code></pre>
</div>
</div></section><section class="preface" data-original-filename="README.asciidoc" id="_études_for_erlang"><div class="titlepage"><div><div><h1 class="title">Études for Erlang</h1></div></div></div>
<p id="welcome_to_tud">Welcome to <span class="emphasis"><em>Études for Erlang</em></span>.  In this book, you will find descriptions of programs that you can write in Erlang. The programs will usually be short, and each one has been designed to provide practice material for a particular Erlang programming concept. These programs have not been designed to be of considerable difficulty, though they may ask you to stretch a bit beyond the immediate material and examples that you find in the book <a class="ulink" href="http://shop.oreilly.com/product/0636920025818.do" target="_top">Introducing Erlang</a>.</p>
<p id="this_book_is_op">This book is open source, so if you’d like to contribute, make a correction, or otherwise participate in the project, check out <a class="ulink" href="https://github.com/oreillymedia/etudes-for-erlang" target="_top">oreillymedia/etudes-for-erlang</a> on GitHub for details. If we accept your work, we’ll add you to the contributors chapter.</p>
<p id="the_online_vers">The online version of the book is at <a class="ulink" href="http://chimera.labs.oreilly.com/books/1234000000726" target="_top">Études for Erlang</a> on O’Reilly Labs.</p>
<div class="sect1" data-original-filename="README.asciidoc" id="_contributor_guidelines">
<div class="titlepage"><div><div><h2 class="title">Contributor Guidelines</h2></div></div></div>
<p id="if_youre_consi">If you’re considering making a contribution, here are some guidelines to keep in mind:</p>
<div class="variablelist" id="creative_common"><dl class="variablelist">
<dt><span class="term">
Creative Commons license.
</span></dt>
<dd>
   All contributions made to this site are required to be made under the <a class="ulink" href=":http://creativecommons.org/licenses/by-nc-nd/3.0/" target="_top">Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License</a>. This means that by making a content contribution, you are agreeing that it is licensed to us and to others under this license. If you do not want your content to be available under this license, you should not contribute it.
</dd>
<dt><span class="term">
Submit only your own work.
</span></dt>
<dd>
   You warrant that all work that you contribute to this site is your original work, except for material that is in the public domain or for which you have obtained permission. Feel free to draw from your own existing work (blogs, articles, talks, etc.), so long as you are happy with the Creative Commons license.
</dd>
<dt><span class="term">
Your submission may not be accepted.
</span></dt>
<dd>
   Be aware that we may not be able to accept your contribution.
</dd>
<dt><span class="term">
Keep your title pithy and to the point.
</span></dt>
<dd>
  The title should only be a 2 to 10 words long if possible and should summarize or capture the essence of the advice. Keep your discussion between 400 and 500 words.
</dd>
<dt><span class="term">
Volunteers only.
</span></dt>
<dd>
   Contributions are made on a volunteer basis — in other words, contributors are not paid for their contributions. The contributions will be made easily available to everyone on the Web for free. However, remember that those of you whose contributions are chosen for publication will get your name attached to your work and your bio published next to it. Any item you contribute you can also reuse in any form you wish, such as in a blog posting.
</dd>
<dt><span class="term">
Only submit a pull request when you consider your work complete.
</span></dt>
<dd>
   Please submit your work once it is complete.  Once you make a pull request, the editor will review the submission and (possibly) suggest some changes.  Reducing work in progress makes it easier for you to see your own progress and for others to see the progress of the whole project.
</dd>
<dt><span class="term">
Check spelling, word count, and formatting.
</span></dt>
<dd>
   Such checking seems obvious part, but it is worth a reminder — sometimes it seems that it is honored more in the breach than in the observance. US spelling is used for the contributions, which should be between 400 and 500 words in length. Formatting can be checked by looking at the saved page in GitHub.  If it looks right there, it’s probably right.
</dd>
</dl></div>
</div>
<div class="sect1" data-original-filename="README.asciidoc" id="_how_to_contribute">
<div class="titlepage"><div><div><h2 class="title">How to Contribute</h2></div></div></div>
<p id="if_youre_new_t">If you’re new to git and GitHub and just want to keep things as simple as possible, this tutorial will give you a quick and easy way to make your contribution.  Here are the steps you’ll need to follow:</p>
<div class="sect2" id="_create_a_github_account">
<div class="titlepage"><div><div><h3 class="title">Create a GitHub account</h3></div></div></div>
<p id="to_create_and_e">To create and edit a page or to comment on an existing page, you will need to create an account on GitHub. If you don’t have one already, then go to the <a class="ulink" href="https://github.com/signup/free" target="_top">GitHub Signup page</a>. It’s free.</p>
<div class="informalfigure" id="informalfigure_id1"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/tutorial_github_signup.png"></div></div>
<p id="github_has_exce">GitHub has excellent tools for collaborating and workflow management, and will be the primary way we communicate with you over the course of the project.</p>
</div>
<div class="sect2" id="_copy_fork_the_project_repository_to_your_account">
<div class="titlepage"><div><div><h3 class="title">Copy ("fork") the project repository to your account</h3></div></div></div>
<p id="once_youve_got_id1">Once you’ve got an account, fork (GitHub lingo for copying) the main project to your account.  To do this, go to the  <a class="ulink" href="https://github.com/oreillymedia/etudes-for-erlang" target="_top">Etudes for Erlang</a> repository on GitHub and click the "Fork" button at the upper right hand side of the screen.</p>
<div class="informalfigure" id="informalfigure_id2"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/tutorial_click_fork.png"></div></div>
<p id="the_following_s">The following screen will appear while GitHub copies the repository to your account:</p>
<div class="informalfigure" id="informalfigure_id3"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/tutorial_forking.png"></div></div>
</div>
<div class="sect2" id="_edit_your_file_using_asciidoc">
<div class="titlepage"><div><div><h3 class="title">Edit your file using AsciiDoc</h3></div></div></div>
<p id="once_youve_got_id2">Once you’ve got the file created, you can start editing it at your leisure.  Remember to:</p>
<div class="itemizedlist" id="mark_up_your_te_id1"><ul class="itemizedlist">
<li class="listitem">
Mark up your text using <a class="ulink" href="http://powerman.name/doc/asciidoc" target="_top">AsciiDoc</a>, which is similar to Markdown and other basic wiki-like markup formats.
</li>
<li class="listitem">
Change the line wrapping from "No Wrap" to "Soft Wrap."  Otherwise, all your text will appear on a single line.
</li>
</ul></div>
<p id="to_edit_the_fil">To edit the file, all you have to do is click its name in the directory listing in GitHub and then press the "Edit" button.</p>
<div class="informalfigure" id="informalfigure_id4"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/tutorial_edit.png"></div></div>
<div class="sidebar" id="if_you_want_to__id1">
<div class="titlepage"></div>
<p id="if_you_want_to__id2">If you want to add an entirely new topic area, you’ll need to create a new file in GitHub.  To do this, click the "+" button next to the directory name to create a new file</p>
<p id="locate_the_smal">Locate the small "+" sign next to the repository name.  (A tooltip will appear that says "Create a new file here" when you hover your mouse above it.)  Click the "\+" button:</p>
<div class="informalfigure" id="informalfigure_id5"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/tutorial_add_a_file.png"></div></div>
<p id="in_the_new_scre">In the new screen, you’ll need to:</p>
<div class="itemizedlist" id="enter_a_name_fo_id1"><ul class="itemizedlist">
<li class="listitem">
Enter a name for the file.  Name the file according to the general topic area, and be sure to include the extension ".asciidoc" at the end.  For example, "foo_and_bar.asciidoc".
</li>
<li class="listitem">
Enter the chapter title in the editing box; it should be prefaced with two "==" signs.  For example, "== Always Foo the Bar"
</li>
<li class="listitem">
Once you’ve entered the filename and title, the "Commit Changes" button at the bottom of the screen will activate.  Click the button to save your file.
</li>
</ul></div>
<p id="you_will_see_so">You will see something like this:</p>
<div class="informalfigure" id="informalfigure_id6"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/tutorial_naming_a_file.png"></div></div>
</div>
</div>
<div class="sect2" id="_double_check_your_submission_and_add_your_biography">
<div class="titlepage"><div><div><h3 class="title">Double check your submission and add your biography</h3></div></div></div>
<p id="before_you_subm">Before you submit your request, make sure that you have:</p>
<div class="itemizedlist" id="run_a_spell_che_id1"><ul class="itemizedlist">
<li class="listitem">
Run a spell check
</li>
<li class="listitem">
Make sure it’s 400-500 words in length
</li>
<li class="listitem">
Add your name and a short biography
</li>
<li class="listitem">
Check the formatting to make sure it looks OK
</li>
</ul></div>
<p id="your_biography_">Your biography should look like this:</p>
<pre class="programlisting" data-language="asciidoc" id="about_the_auth">.About the Author
[NOTE]
****
Name::
   Nicola Tesla
Biography::
   Nicola Tesla is an inventor, electrical engineer, mechanical engineer, physicist, and futurist best known for his contributions to the design of the modern alternating current (AC) electrical supply system.
****</pre>
</div>
<div class="sect2" id="_submit_a_pull_request">
<div class="titlepage"><div><div><h3 class="title">Submit a pull request</h3></div></div></div>
<p id="once_youve_com">Once you’ve completed and double checked your submission, you’re ready to submit it back to O’Reilly.  This is done by creating a "pull request" that will trigger the review process.</p>
<div class="informalfigure" id="informalfigure_id7"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/tutorial_submit_pull_request.png"></div></div>
<p id="when_you_submit">When you submit the pull request, you’ll also be able to submit some additional information that will help us track your work:</p>
<div class="itemizedlist" id="a_title_please_id1"><ul class="itemizedlist">
<li class="listitem">
A title.  Please enter your name and the title of the contribution.  For example, "Andrew Odewahn: Always Foo the Bar"
</li>
<li class="listitem">
A comment.  Tell us a little bit about your contribution, as well as anything else you think we should know.
</li>
</ul></div>
<div class="informalfigure" id="informalfigure_id8"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/tutorial_pull_request_submission_form.png"></div></div>
</div>
<div class="sect2" id="_engage_in_back_and_forth">
<div class="titlepage"><div><div><h3 class="title">Engage in back-and-forth</h3></div></div></div>
<p id="once_you_submit">Once you submit your pull request, the project’s maintainers will begin a back and forth with you in the discussion features.  You might be asked to make some revisions, shorten it, add additional elements, and so forth.</p>
</div>
</div></section><section class="preface" data-original-filename="ch00-introduction.asciidoc" id="PREFACE"><div class="titlepage"><div><div><h1 class="title">Preface: What’s an étude?</h1></div></div></div>
<p id="an_tude_accor">An étude, according to Wikipedia, is "an instrumental musical composition, usually short and of considerable difficulty, usually designed to provide practice material for perfecting a particular musical skill."</p>
<div class="sect1" data-original-filename="ch00-introduction.asciidoc" id="_what_are_études_for_erlang">
<div class="titlepage"><div><div><h2 class="title">What are Études for Erlang?</h2></div></div></div>
<p id="in_this_book_y">In this book, you will find descriptions of programs that you
can compose (write) in Erlang. The programs will usually be short,
and each one has been designed to provide practice material for a particular
Erlang programming concept. Unlike musical études, these programs have not been
designed to be of considerable difficulty, though they may ask you to
stretch a bit beyond the immediate material and examples that you find
in the book <a class="ulink" href="http://shop.oreilly.com/product/0636920025818.do" target="_top">Introducing Erlang</a>.</p>
</div>
<div class="sect1" data-original-filename="ch00-introduction.asciidoc" id="_how_this_book_was_written">
<div class="titlepage"><div><div><h2 class="title">How This Book was Written</h2></div></div></div>
<p id="while_reading_t">While reading the early release version of <span class="emphasis"><em>Introducing Erlang</em></span>,
I began by copying the examples in the book. (This always helps me
learn the material better.) I then began experimenting with small
programs of my own to make sure I really understood the concepts.
As I continued writing my own examples, I thought they might be useful
to other people as well. I contacted Simon St. Laurent, the author
of Introducing Erlang, and he liked the idea of having these companion
exercises and suggested naming them études.
At some point, the études took on a life of their own,
and you are reading the result now.</p>
<p id="i_was_learning_">I was learning Erlang as I was creating the solutions to the
études, following the
philosophy that "the first way that works is the right way."
Therefore, don’t be surprised if you see some fairly
naïve code that an expert Erlang programmer would never write.</p>
</div>
<div class="sect1" data-original-filename="ch00-introduction.asciidoc" id="_working_with_other_books">
<div class="titlepage"><div><div><h2 class="title">Working with Other Books</h2></div></div></div>
<p id="although_this_w">Although this was based on <span class="emphasis"><em>Introducing Erlang</em></span>, you can use it with other Erlang books. A note at the beginning of each chapter will point you to relevant sections in other books. The books listed through are:</p>
<div class="itemizedlist" id="erlang_programm_id1"><ul class="itemizedlist">
<li class="listitem">
<a class="ulink" href="http://shop.oreilly.com/product/9780596518189.do" target="_top">Erlang Programming</a>, by Francesco Cesarini, and Simon Thompson (O’Reilly Media, 2009).
</li>
<li class="listitem">
<a class="ulink" href="http://pragprog.com/book/jaerlang/programming-erlang" target="_top">Programming Erlang</a>, by Joe Armstrong (Pragmatic Programmers, 2007).
</li>
<li class="listitem">
<a class="ulink" href="http://www.manning.com/logan/" target="_top">Erlang and OTP in Action</a> by Martin Logan, Eric Merritt, and Richard Carlsson (Manning, 2010).
</li>
<li class="listitem">
<a class="ulink" href="http://nostarch.com/erlang" target="_top">Learn You Some Erlang for Great Good!</a> by Fred Hebert (No Starch Press, 2013) - also available at <a class="ulink" href="http://learnyousomeerlang.com/" target="_top">http://learnyousomeerlang.com/</a>.
</li>
</ul></div>
</div>
<div class="sect1" data-original-filename="ch00-introduction.asciidoc" id="_acknowledgments">
<div class="titlepage"><div><div><h2 class="title">Acknowledgments</h2></div></div></div>
<p id="many_thanks_to_">Many thanks to Simon St. Laurent, who wrote <span class="emphasis"><em>Introducing Erlang</em></span>. His book
not only got me to begin to understand functional programming, but also made
me realize that it was a lot of fun. Simon also felt that the exercises
I was writing for myself could be useful to others, and he encouraged me
to continue developing them.</p>
<div class="sidebar shoutout" id="suggested_topic">
<div class="titlepage"><div><div><div class="sidebar-title">Have any suggested topics?</div></div></div></div>
<p id="suggest_topics_">Suggest topics you’d like to see covered here, or just go add them yourself at <a class="ulink" href="https://github.com/oreillymedia/etudes-for-erlang" target="_top">oreillymedia/etudes-for-erlang</a> on GitHub.</p>
</div>
</div></section><section class="chapter" data-original-filename="ch01-getting-comfortable.asciidoc" id="GETTINGCOMFORTABLE"><div class="titlepage"><div><div><h1 class="title">Chapter 1. Getting Comfortable with Erlang</h1></div></div></div>
<div class="note" id="you_can_learn_m_id1"><p id="you_can_learn_m_id2">You can learn more about working with <code class="literal">erl</code> in Chapter 2 of <span class="emphasis"><em>Erlang Programming</em></span>, Chapters 2 and 6 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.1 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapter 1 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch01-getting-comfortable.asciidoc" id="CH01-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 1-1: Experimenting with Errors</h2></div></div></div>
<p id="the_first_chapt">The first chapter of
<a class="ulink" href="http://shop.oreilly.com/product/0636920025818.do" target="_top">Introducing Erlang</a>
encourages you to play around with the interactive <code class="literal">erl</code> system.
In this étude, keep using <code class="literal">erl</code>, but purposely make errors.</p>
<p id="try_leaving_out">Try leaving out parentheses in arithmetic expressions. Try putting
numbers next to each other without an operator between them.
Try adding <code class="literal">"adam"</code> to <code class="literal">12</code>. Make up variable names that you are sure
Erlang wouldn’t ever accept.</p>
<p id="that_way_youl">That way, you’ll get a feel for the sort of error messages
Erlang produces and not be as baffled when you get errors that
you aren’t expecting.</p>
</div></section><section class="chapter" data-original-filename="ch02-functions_and_modules.asciidoc" id="FUNCTIONSMODULES"><div class="titlepage"><div><div><h1 class="title">Chapter 2. Functions and Modules</h1></div></div></div>
<div class="note" id="you_can_learn_m_id3"><p id="you_can_learn_m_id4">You can learn more about working with functions and modules in Chapters 2, 3, and 9 of <span class="emphasis"><em>Erlang Programming</em></span>, Chapter 3 of <span class="emphasis"><em>Programming Erlang</em></span>, Sections 2.3, 2.5, and 2.7 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapters 2 and 3 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.  There’s more on documentation in Chapter 18 of <span class="emphasis"><em>Erlang Programming</em></span> and types in Chapter 30 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch02-functions_and_modules.asciidoc" id="CH02-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 2-1: Writing a Function</h2></div></div></div>
<p id="write_a_module__id1">Write a module with a function that takes the length and width of a
rectangle and returns (yields) its area.  Name the module <code class="literal">geom</code>, and
name the function <code class="literal">area</code>. The function has arity 2, because it needs
two pieces of information to make the calculation. In Erlang-speak:
write function <code class="literal">area/2</code>.</p>
<p id="here_is_some_sa_id1">Here is some sample output.</p>
<pre class="programlisting" data-language="erlang" id="cgeom_ok_id1"><code class="mi">1</code><code class="o">&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">{</code><code class="n">ok</code><code class="p">,</code><code class="n">geom</code><code class="p">}</code>
<code class="mi">2</code><code class="o">&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="mi">3</code><code class="p">,</code><code class="mi">4</code><code class="p">).</code>
<code class="mi">12</code>
<code class="mi">3</code><code class="o">&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="mi">12</code><code class="p">,</code><code class="mi">7</code><code class="p">).</code>
<code class="mi">84</code></pre>
<p id="see_a_suggested_id1"><a class="link" href="apa.html#SOLUTION02-ET01" title="Solution 2-1">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch02-functions_and_modules.asciidoc" id="CH02-ET02">
<div class="titlepage"><div><div><h2 class="title">Étude 2-2: Documenting a Module</h2></div></div></div>
<p id="document_the_ge">Document the <code class="literal">geom</code> module you wrote in <a class="link" href="ch02.html#CH02-ET01" title="Étude 2-1: Writing a Function">Étude 2-1</a>.
<a class="link" href="apa.html#SOLUTION02-ET02" title="Solution 2-2">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch02-functions_and_modules.asciidoc" id="CH02-ET03">
<div class="titlepage"><div><div><h2 class="title">Étude 2-3: Documenting a Function</h2></div></div></div>
<p id="document_the_ar">Document the <code class="literal">area/2</code> function, and create an <span class="emphasis"><em>overview.edoc</em></span> file to complete
the documentation of the application you’ve written.
<a class="link" href="apa.html#SOLUTION02-ET03" title="Solution 2-3">See a suggested solution in Appendix A.</a></p>
</div></section><section class="chapter" data-original-filename="ch03-tuples-and-records.asciidoc" id="ATOMS-TUPLES-PATTERNS"><div class="titlepage"><div><div><h1 class="title">Chapter 3. Atoms, Tuples, and Pattern Matching</h1></div></div></div>
<div class="note" id="you_can_learn_m_id5"><p id="you_can_learn_m_id6">You can learn more about working with atoms, tuples, and pattern matching in Chapter 2 of <span class="emphasis"><em>Erlang Programming</em></span>, Chapter 2 of <span class="emphasis"><em>Programming Erlang</em></span>, Sections 2.2 and 2.4 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapters 1 and 3 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch03-tuples-and-records.asciidoc" id="CH03-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 3-1: Pattern Matching</h2></div></div></div>
<p id="use_atoms_and_p">Use atoms and pattern matching to make your <code class="literal">area</code> function calculate the
area of a rectangle, triangle, or ellipse.  If your parameters are
<code class="literal">Shape</code>, <code class="literal">A</code> and <code class="literal">B</code>, the area for the atom <code class="literal">rectangle</code> is <code class="literal">A * B</code>,
where <code class="literal">A</code> and <code class="literal">B</code> represent the length and width. For a <code class="literal">triangle</code> atom,
the area is <code class="literal">A * B / 2.0</code>, with <code class="literal">A</code> and <code class="literal">B</code> representing
the base and height of the triangle. For an <code class="literal">ellipse</code> atom, the area is
<code class="literal">math:pi() * A * B</code>, where <code class="literal">A</code> and <code class="literal">B</code> represent the major and minor radiuses.</p>
<p id="here_is_some_sa_id2">Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cgeom_ok_id2"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="go">{ok,geom}</code>
<code class="gp">2&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">).</code>
<code class="go">12</code>
<code class="gp">3&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">5</code><code class="p">).</code>
<code class="go">7.5</code>
<code class="gp">4&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">4</code><code class="p">).</code>
<code class="go">25.132741228718345</code></pre>
<p id="see_a_suggested_id2"><a class="link" href="apa.html#SOLUTION03-ET01" title="Solution 3-1">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch03-tuples-and-records.asciidoc" id="CH03-ET02">
<div class="titlepage"><div><div><h2 class="title">Étude 3-2: Guards</h2></div></div></div>
<p id="even_though_you">Even though you won’t get an error message when calculating the area of a shape
that has negative dimensions, it’s still worth guarding your <code class="literal">area/3</code> function.
You will want two guards for each pattern to make sure that both dimensions
are greater than or equal to zero. Since <span class="strong"><strong>both</strong></span> have to be non-negative, use
commas to separate your guards.</p>
<p id="here_is_some_sa_id3">Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cgeom_ok_id3"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="go">{ok,geom}</code>
<code class="gp">2&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">).</code>
<code class="go">12</code>
<code class="gp">3&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">).</code>
<code class="go">18.84955592153876</code>
<code class="gp">4&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="p">).</code>
<code class="go">10.0</code>
<code class="gp">5&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="mi">3</code><code class="p">).</code>
<code class="gt">** exception error: no function clause matching geom:area(rectangle,-1,3) (geom.erl, line 18)</code></pre>
<p id="see_a_suggested_id3"><a class="link" href="apa.html#SOLUTION03-ET02" title="Solution 3-2">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch03-tuples-and-records.asciidoc" id="CH03-ET03">
<div class="titlepage"><div><div><h2 class="title">Étude 3-3: Underscores</h2></div></div></div>
<p id="if_you_enter_a_">If you enter a shape that <code class="literal">area/3</code> doesn’t know about, or if you enter negative
dimensions, Erlang will give you an error message. Use underscores to create a
“catch-all” version, so that anything at all that doesn’t match a valid
rectangle, triangle, or ellipse will return zero. This goes against
the Erlang philosophy of “let it fail,” but let’s look the other way
and learn about underscores anyway.</p>
<p id="here_is_some_sa_id4">Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="geomareare"><code class="gp">1&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">).</code>
<code class="go">12</code>
<code class="gp">2&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">pentagon</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">).</code>
<code class="go">0</code>
<code class="gp">3&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">hexagon</code><code class="p">,</code> <code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="mi">5</code><code class="p">).</code>
<code class="go">0</code>
<code class="gp">4&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="o">-</code><code class="mi">3</code><code class="p">).</code>
<code class="go">0</code></pre>
<p id="see_a_suggested_id4"><a class="link" href="apa.html#SOLUTION03-ET03" title="Solution 3-3">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch03-tuples-and-records.asciidoc" id="CH03-ET04">
<div class="titlepage"><div><div><h2 class="title">Étude 3-4: Tuples as Parameters</h2></div></div></div>
<p id="add_an_area_f">Add an <code class="literal">area/1</code> function that takes a tuple of the form
<code class="literal">{<span class="strong"><strong>shape</strong></span>,<span class="strong"><strong>number</strong></span>,<span class="strong"><strong>number</strong></span>}</code> as its parameter. Export it
instead of <code class="literal">area/3</code>. The <code class="literal">area/1</code> function will call the
private <code class="literal">area/3</code> function.</p>
<p id="here_is_some_sa_id5">Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cgeom_ok_id4"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="go">{ok,geom}</code>
<code class="gp">2&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">({</code><code class="n">rectangle</code><code class="p">,</code> <code class="mi">7</code><code class="p">,</code> <code class="mi">3</code><code class="p">}).</code>
<code class="go">21</code>
<code class="gp">3&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">({</code><code class="n">triangle</code><code class="p">,</code> <code class="mi">7</code><code class="p">,</code> <code class="mi">3</code><code class="p">}).</code>
<code class="go">10.5</code>
<code class="gp">4&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">({</code><code class="n">ellipse</code><code class="p">,</code> <code class="mi">7</code><code class="p">,</code> <code class="mi">3</code><code class="p">}).</code>
<code class="go">65.97344572538566</code></pre>
<p id="see_a_suggested_id5"><a class="link" href="apa.html#SOLUTION03-ET04" title="Solution 3-4">See a suggested solution in Appendix A.</a></p>
</div></section><section class="chapter" data-original-filename="ch04-logic-and-recursion.asciidoc" id="LOGIC-RECURSION"><div class="titlepage"><div><div><h1 class="title">Chapter 4. Logic and Recursion</h1></div></div></div>
<div class="note" id="you_can_learn_m_id7"><p id="you_can_learn_m_id8">You can learn more about working with logical flow and recursion in Chapter 3 of <span class="emphasis"><em>Erlang Programming</em></span>, Chapter 3 of <span class="emphasis"><em>Programming Erlang</em></span>, Sections 2.6 and 2.15 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapters 3 and 5 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch04-logic-and-recursion.asciidoc" id="CH04-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 4-1: Using <code class="literal">case</code>
</h2></div></div></div>
<p id="change_the_area">Change the <code class="literal">area/3</code> function that you wrote in
<a class="link" href="ch03.html#CH03-ET02" title="Étude 3-2: Guards">Étude 3-2</a> so that it uses a <code class="literal">case</code> instead
of pattern matching. Use a guard on the function definition to ensure
that the numeric arguments are both greater than zero.</p>
<p id="see_a_suggested_id6"><a class="link" href="apa.html#SOLUTION04-ET01" title="Solution 4-1">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch04-logic-and-recursion.asciidoc" id="CH04-ET02">
<div class="titlepage"><div><div><h2 class="title">Étude 4-2: Recursion</h2></div></div></div>
<p id="this_is_a_typic">This is a typical exercise for recursion: finding the greatest common
divisor (GCD) of two integers. Instead of giving Euclid’s method, we’ll
do this with a method devised by Edsger W. Dijkstra. The neat part about
Dijkstra’s method is that you don’t need to do any division to find
the result.  Here is the method.</p>
<p id="to_find_the_gcd">To find the GCD of integers M and N:</p>
<div class="itemizedlist" id="if_m_and_n_are__id1"><ul class="itemizedlist">
<li class="listitem">
If M and N are equal, the result is M.
</li>
<li class="listitem">
If M is greater than N, the result is the GCD of M - N and N
</li>
<li class="listitem">
Otherwise M must be less than N, and the result is the GCD of M and N - M.
</li>
</ul></div>
<p id="write_a_functio_id1">Write a function <code class="literal">gcd/2</code> in a module named <code class="literal">dijkstra</code> that implements
the algorithm. This program is a good place to practice Elixir’s <code class="literal">cond</code> construct.
Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cdijkstra"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">dijkstra</code><code class="p">).</code>
<code class="go">{ok,dijkstra}</code>
<code class="gp">2&gt;</code> <code class="nn">dijkstra</code><code class="p">:</code><code class="n">gcd</code><code class="p">(</code><code class="mi">12</code><code class="p">,</code> <code class="mi">8</code><code class="p">).</code>
<code class="go">4</code>
<code class="gp">3&gt;</code> <code class="nn">dijkstra</code><code class="p">:</code><code class="n">gcd</code><code class="p">(</code><code class="mi">14</code><code class="p">,</code> <code class="mi">21</code><code class="p">).</code>
<code class="go">7</code>
<code class="gp">4&gt;</code> <code class="nn">dijkstra</code><code class="p">:</code><code class="n">gcd</code><code class="p">(</code><code class="mi">125</code><code class="p">,</code> <code class="mi">46</code><code class="p">).</code>
<code class="go">1</code>
<code class="gp">5&gt;</code> <code class="nn">dijkstra</code><code class="p">:</code><code class="n">gcd</code><code class="p">(</code><code class="mi">120</code><code class="p">,</code> <code class="mi">36</code><code class="p">).</code>
<code class="go">12</code></pre>
<p id="see_a_suggested_id7"><a class="link" href="apa.html#SOLUTION04-ET02" title="Solution 4-2">See a suggested solution in Appendix A.</a></p>
<p id="you_can_also_us">You can also use guards with multiple clauses to solve this étude; <a class="link" href="apa.html#SOLUTION04-ET02B" title="Solution 4-2">the solution for that approach is in Appendix A.</a> In general, use of multiple clauses with guards is considered more in the spirit of Erlang.</p>
<p id="the_next_two_ex">The next two exercises involve writing code to raise a number to an integer
power (like 2.5<sup>3</sup> or 4<sup>-2</sup>) and finding the <span class="emphasis"><em>n</em></span>th root of a number, such
as the cube root of 1728 or the fifth root of 3.2.</p>
<p id="these_capabilit">These capabilities already exist with the <code class="literal">math:pow/2</code> function, so you may
wonder why I’m asking you to re-invent the wheel. The reason is not to replace
<code class="literal">math:pow/2</code>, but to experiment with recursion by writing functions that can be
expressed quite nicely that way.</p>
</div>
<div class="sect1" data-original-filename="ch04-logic-and-recursion.asciidoc" id="CH04-ET03">
<div class="titlepage"><div><div><h2 class="title">Étude 4-3: Non-Tail Recursive Functions</h2></div></div></div>
<p id="create_a_module">Create a module named <code class="literal">powers</code> (no relation to Francis Gary Powers), and
write a function named <code class="literal">raise/2</code> which takes parameters <code class="literal">X</code>  and <code class="literal">N</code> and
returns the value of X<sup>N</sup>.</p>
<p id="heres_the_info">Here’s the information you need to know to write the function:</p>
<div class="itemizedlist" id="any_number_to_t_id1"><ul class="itemizedlist">
<li class="listitem">
Any number to the power 0 equals 1.
</li>
<li class="listitem">
Any number to the power 1 is that number itself — that stops the
  recursion.
</li>
<li class="listitem">
When <code class="literal">N</code> is positive, <code class="literal">X<sup>N</sup></code> is equal to <code class="literal">X</code> times <code class="literal">X<sup>(N - 1)</sup></code> —   there’s your recursion.
</li>
<li class="listitem">
When <code class="literal">N</code> is negative, <code class="literal">X<sup>N</sup></code> is equal to <code class="literal">1.0 / X<sup>-N</sup></code>
</li>
</ul></div>
<p id="note_that_this__id1">Note that this function is <span class="emphasis"><em>not</em></span> tail recursive.  Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cpowers__id1"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">powers</code><code class="p">).</code>
<code class="go">{ok,powers}</code>
<code class="gp">2&gt;</code> <code class="nn">powers</code><code class="p">:</code><code class="n">raise</code><code class="p">(</code><code class="mi">5</code><code class="p">,</code> <code class="mi">1</code><code class="p">).</code>
<code class="go">5</code>
<code class="gp">3&gt;</code> <code class="nn">powers</code><code class="p">:</code><code class="n">raise</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">).</code>
<code class="go">8</code>
<code class="gp">4&gt;</code> <code class="nn">powers</code><code class="p">:</code><code class="n">raise</code><code class="p">(</code><code class="mi">1</code><code class="p">.</code><code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">).</code>
<code class="go">1.728</code>
<code class="gp">5&gt;</code> <code class="nn">powers</code><code class="p">:</code><code class="n">raise</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code> <code class="mi">0</code><code class="p">).</code>
<code class="go">1</code>
<code class="gp">6&gt;</code> <code class="nn">powers</code><code class="p">:</code><code class="n">raise</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code> <code class="o">-</code><code class="mi">3</code><code class="p">).</code>
<code class="go">0.125</code></pre>
<p id="see_a_suggested_id8"><a class="link" href="apa.html#SOLUTION04-ET03" title="Solution 4-3">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch04-logic-and-recursion.asciidoc" id="CH04-ET04">
<div class="titlepage"><div><div><h2 class="title">Étude 4-4: Tail Recursion with an Accumulator</h2></div></div></div>
<p id="practice_the_a">Practice the "accumulator trick."
Rewrite the <code class="literal">raise/2</code> function for <code class="literal">N</code> greater than zero so that it
calls a helper function <code class="literal">raise/3</code>  This new function has <code class="literal">X</code>, <code class="literal">N</code>, and
an <code class="literal">Accumulator</code> as its parameters.</p>
<p id="your_raise_fu">Your <code class="literal">raise/2</code> function will return 1 when <code class="literal">N</code> is equal to 0,
and will return <code class="literal">1.0 / raise(X, -N)</code> when N is less than zero.</p>
<p id="when_n_is_great">When <code class="literal">N</code> is greater than zero, <code class="literal">raise/2</code> will
call <code class="literal">raise/3</code> with arguments <code class="literal">X</code>, <code class="literal">N</code>, and 1 as the Accumulator.</p>
<p id="the_raise_fun_id1">The <code class="literal">raise/3</code> function will return the
<code class="literal">Accumulator</code> when <code class="literal">N</code> equals 0 (this will stop the recursion).</p>
<p id="otherwise_recu">Otherwise, recursively call <code class="literal">raise/3</code> with <code class="literal">X</code>, <code class="literal">N - 1</code>,
and <code class="literal">X</code> times the <code class="literal">Accumulator</code> as its arguments.</p>
<p id="the_raise_fun_id2">The <code class="literal">raise/3</code> function <span class="emphasis"><em>is</em></span> tail recursive.</p>
</div>
<div class="sect1" data-original-filename="ch04-logic-and-recursion.asciidoc" id="CH04-ET05">
<div class="titlepage"><div><div><h2 class="title">Étude 4-5: Recursion with a Helper Function</h2></div></div></div>
<p id="in_this_exercis">In this exercise, you will add a function <code class="literal">nth_root/2</code> to the
<code class="literal">powers</code> module. This new function finds the
<span class="emphasis"><em>n</em></span>th root of a number, where <span class="emphasis"><em>n</em></span> is an integer.
For example, <code class="literal">nth_root(36, 2)</code> will calculate
the square root of 36, and <code class="literal">nth_root(1.728, 3)</code> will return the cube
root of 1.728.</p>
<p id="the_algorithm_u">The algorithm used here is the Newton-Raphson method for calculating
roots. (See <a class="ulink" href="http://en.wikipedia.org/wiki/Newton%27s_method" target="_top">http://en.wikipedia.org/wiki/Newton%27s_method</a> for details).</p>
<p id="you_will_need_a">You will need a helper function <code class="literal">nth_root/3</code>, whose parameters
are <code class="literal">X</code>, <code class="literal">N</code>, and an approximation to the result, which we
will call <code class="literal">A</code>. <code class="literal">nth_root/3</code> works as follows:</p>
<div class="itemizedlist" id="calculate_f_as__id1"><ul class="itemizedlist">
<li class="listitem">
Calculate <code class="literal">F</code> as <code class="literal">(A<sup>N</sup> - X)</code>
</li>
<li class="listitem">
Calculate <code class="literal">Fprime</code> as <code class="literal">N * A<sup>(N - 1)</sup></code>
</li>
<li class="listitem">
Calculate your next approximation (call it <code class="literal">Next</code>) as <code class="literal">A - F / Fprime</code>
</li>
<li class="listitem">
Calculate the change in value (call it <code class="literal">Change</code>) as the absolute value of <code class="literal">Next - A</code>
</li>
<li class="listitem">
If the <code class="literal">Change</code> is
less than some limit (say, 1.0e-8), stop the recursion and return
<code class="literal">Next</code>; that’s as close to the root as you are going to get.
</li>
<li class="listitem">
Otherwise, call the <code class="literal">nth_root/3</code> function again with
<code class="literal">X</code>, <code class="literal">N</code>, and <code class="literal">Next</code> as its arguments.
</li>
</ul></div>
<p id="for_your_first_">For your first approximation, use <code class="literal">X / 2.0</code>. Thus, your <code class="literal">nth_root/2</code> function
will simply be this:</p>
<p id="nth_rootx_n_"><code class="literal">nth_root(X, N) → nth_root(X, N, X / 2.0)</code></p>
<p id="use_ioformat_t">Use <code class="literal">io:format</code> to show each new approximation as you
calculate it. Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cpowers__id2"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">powers</code><code class="p">).</code>
<code class="go">{ok,powers}</code>
<code class="gp">2&gt;</code> <code class="nn">powers</code><code class="p">:</code><code class="n">nth_root</code><code class="p">(</code><code class="mi">27</code><code class="p">,</code> <code class="mi">3</code><code class="p">).</code>
<code class="go">Current guess is 13.5</code>
<code class="go">Current guess is 9.049382716049383</code>
<code class="go">Current guess is 6.142823558176272</code>
<code class="go">Current guess is 4.333725614685509</code>
<code class="go">Current guess is 3.3683535855517652</code>
<code class="go">Current guess is 3.038813723595138</code>
<code class="go">Current guess is 3.0004936436555805</code>
<code class="go">Current guess is 3.000000081210202</code>
<code class="go">Current guess is 3.000000000000002</code>
<code class="go">3.0</code></pre>
<p id="see_a_suggested_id9"><a class="link" href="apa.html#SOLUTION04-ET05" title="Solution 4-5">See a suggested solution in Appendix A.</a></p>
</div></section><section class="chapter" data-original-filename="ch05-strings.asciidoc" id="STRINGS"><div class="titlepage"><div><div><h1 class="title">Chapter 5. Strings</h1></div></div></div>
<div class="note" id="you_can_learn_m_id9"><p id="you_can_learn_m_id10">You can learn more about working with strings in Chapter 2 of <span class="emphasis"><em>Erlang Programming</em></span>, Sections 2.11 and 5.4 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.2.6 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapter 1 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch05-strings.asciidoc" id="CH05-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 5-1: Validating Input</h2></div></div></div>
<p id="the_erlang_phil">The Erlang philosophy is "let it crash"; this makes a great deal of sense
for a telecommunications system (which is what Erlang was first designed for).
Hardware is going to fail. When it does, you just replace it or restart it.
The person using the phone system is unaware of this; her phone just
continues to work.</p>
<p id="this_philosophy">This philosophy, however, is not the one you want to employ when you
have (atypical for Erlang) programs that ask for user input.
You want to those to crash infrequently and catch as many input errors as possible.</p>
<p id="in_this_tude__id1">In this étude, you will write a module named <code class="literal">ask_area</code>, which prompts you
for a shape and its dimensions, and then returns the area by calling
<code class="literal">geom:area/3</code>, which you wrote in <a class="link" href="ch04.html#CH04-ET01" title="Étude 4-1: Using case">Étude 4-1</a>.</p>
<p id="your_module_wil">Your module will ask for the first letter of the shape (in either upper
or lower case), then the appropriate dimensions. It should catch invalid
letters, non-numeric input, and negative numbers as input.
Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cask_area"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">ask_area</code><code class="p">).</code>
<code class="go">{ok,ask_area}</code>
<code class="gp">2&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="go">{ok,geom}</code>
<code class="gp">3&gt;</code> <code class="nn">ask_area</code><code class="p">:</code><code class="n">area</code><code class="p">().</code>
<code class="go">R)ectangle, T)riangle, or E)llipse &gt; r</code>
<code class="go">Enter width &gt; 4</code>
<code class="go">Enter height &gt; 3.7</code>
<code class="go">14.8</code>
<code class="gp">4&gt;</code> <code class="nn">ask_area</code><code class="p">:</code><code class="n">area</code><code class="p">().</code>
<code class="go">R)ectangle, T)riangle, or E)llipse &gt; T</code>
<code class="go">Enter base &gt; 3</code>
<code class="go">Enter height &gt; 7</code>
<code class="go">10.5</code>
<code class="gp">5&gt;</code> <code class="nn">ask_area</code><code class="p">:</code><code class="n">area</code><code class="p">().</code>
<code class="go">R)ectangle, T)riangle, or E)llipse &gt; x</code>
<code class="go">Unknown shape x</code>
<code class="go">ok</code>
<code class="gp">6&gt;</code> <code class="nn">ask_area</code><code class="p">:</code><code class="n">area</code><code class="p">().</code>
<code class="go">R)ectangle, T)riangle, or E)llipse &gt; r</code>
<code class="go">Enter width &gt; -3</code>
<code class="go">Enter height &gt; 4</code>
<code class="go">Both numbers must be greater than or equal to zero.</code>
<code class="go">ok</code>
<code class="gp">7&gt;</code> <code class="nn">ask_area</code><code class="p">:</code><code class="n">area</code><code class="p">().</code>
<code class="go">R)ectangle, T)riangle, or E)llipse &gt; e</code>
<code class="go">Enter major axis &gt; three</code>
<code class="go">Enter minor axis &gt; 2</code>
<code class="go">Error in first number.</code></pre>
<p id="here_are_the_fu">Here are the functions that I needed to write in order to make this
program work.</p>
<div class="variablelist" id="char_to_shape"><dl class="variablelist">
<dt><span class="term">
<code class="literal">char_to_shape/1</code>
</span></dt>
<dd>
  Given a character parameter (<code class="literal">R</code>, <code class="literal">T</code>, or <code class="literal">E</code> in either upper or lower case),
  return an atom representing the specified shape (<code class="literal">rectangle</code>,
  <code class="literal">triangle</code>, <code class="literal">ellipse</code>, or <code class="literal">unknown</code> if some other character is entered).
</dd>
<dt><span class="term">
<code class="literal">get_number/1</code>
</span></dt>
<dd>
  Given a string as a prompt, displays the string
  <code class="literal">"Enter <em class="replaceable"><code>prompt</code></em> &gt; "</code> and returns the number that was input.
  Your function should accept either integers or floats. Fun fact:
  <code class="literal">string:to_float/1</code> <span class="emphasis"><em>requires</em></span> a decimal point; if you just enter
  input like <code class="literal">"3"</code>, you will receive <code class="literal">{error,no_float}</code> for your efforts.
  That means that you should try to convert to float first,
  and if that fails, try a conversion to integer.
  It was at this point that I felt like the
  guy who is beating his head against a wall, and, when asked, "Why are you
  doing that?" responds, "Because it feels so good when I stop."
</dd>
<dt><span class="term">
<code class="literal">get_dimensions/2</code>
</span></dt>
<dd>
  Takes two prompts as its parameters (one for each dimension), and calls
  <code class="literal">get_number/1</code> twice. Returns a tuple <code class="literal">{<span class="emphasis"><em>N1</em></span>, <span class="emphasis"><em>N2</em></span>}</code> with the dimensions.
</dd>
<dt><span class="term">
<code class="literal">calculate/3</code>
</span></dt>
<dd>
  Takes a shape (as an atom) and two dimensions as its parameters.
  If the shape is <code class="literal">unknown</code>, or the first or second dimension isn’t numeric,
  or either number is negative, the function displays an
  appropriate error message. Otherwise, the function calls
  <code class="literal">geom:area/3</code> to calculate the area of the shape.
</dd>
</dl></div>
<p id="see_a_suggested_id10"><a class="link" href="apa.html#SOLUTION05-ET01" title="Solution 5-1">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch05-strings.asciidoc" id="CH05-ET02">
<div class="titlepage"><div><div><h2 class="title">Étude 5-2: Using the <code class="literal">re</code> Module</h2></div></div></div>
<p id="write_a_module__id2">Write a module named <code class="literal">dates</code> that contains a function
<code class="literal">date_parts/1</code>, which takes a string in ISO date format
(<code class="literal">"yyyy-mm-dd"</code>) and
returns a list of integers in the form
<code class="literal">[yyyy, mm, dd]</code>. This function does not need to do any error checking.</p>
<p id="youll_use_the_">You’ll use the <code class="literal">re:split/3</code> function from Erlang’s
regular expression (<code class="literal">re</code>) module to accomplish the task.
How, you may ask, does that function work? Ask Erlang!
The command <code class="literal">erl -man re</code> will give you the online documentation for
the <code class="literal">re</code> module.</p>
<p id="scroll_down_the">Scroll down the resulting page until you find
<code class="literal">split(Subject, RE, Options) → SplitList</code> and read the examples.</p>
<p id="when_you_write_">When you write the <code class="literal">-spec</code> for this function (you <span class="emphasis"><em>have</em></span> been
writing documentation for your functions, haven’t you?), the type
you will use for the parameter is <code class="literal">string()</code>.</p>
<div class="note" id="you_can_see_a_c_id1"><p id="you_can_see_a_c_id2">You can see a complete
list of the built-in types at <a class="ulink" href="http://www.erlang.org/doc/reference_manual/typespec.html" target="_top">http://www.erlang.org/doc/reference_manual/typespec.html</a></p></div>
<p id="yes_i_know_thi">Yes, I know this étude seems pointless, but trust me:
I’m going somewhere with this. Stay tuned.</p>
<p id="see_a_suggested_id11"><a class="link" href="apa.html#SOLUTION05-ET02" title="Solution 5-2">See a suggested solution in Appendix A.</a></p>
</div></section><section class="chapter" data-original-filename="ch06-lists.asciidoc" id="LISTS"><div class="titlepage"><div><div><h1 class="title">Chapter 6. Lists</h1></div></div></div>
<div class="note" id="you_can_learn_m_id11"><p id="you_can_learn_m_id12">You can learn more about working with lists in Chapter 2 of <span class="emphasis"><em>Erlang Programming</em></span>, Sections 2.10 and 3.5 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.2.5 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapter 1 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch06-lists.asciidoc" id="CH06-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 6-1: Recursive Iteration through a List</h2></div></div></div>
<p id="in_a_module_nam_id1">In a module named <code class="literal">stats</code>, write a function named <code class="literal">minimum/1</code>. It takes
a list of numbers as its argument and returns the smallest value. This
function already exists in the <code class="literal">lists</code> module (<code class="literal">lists:min/1</code>), but it’s
a good exercise in learning about recursion.</p>
<p id="heres_the_pseu_id1">Here’s the pseudocode for <code class="literal">minimum/1</code>.</p>
<div class="itemizedlist" id="split_the_list__id1"><ul class="itemizedlist">
<li class="listitem">
Split the list into the first number and the remainder of the list using
the cons operator <code class="literal">|</code>.
</li>
<li class="listitem">
Call function <code class="literal">minimum/2</code>, which takes a list as its first argument and
the "smallest number so far" (the <span class="emphasis"><em>current candidate</em></span>) as its second argument.
Use the remainder of the list (which you extracted in the previous step) as
the first argument to <code class="literal">minimum/2</code>, and the first item in the list as the second
argument.
</li>
</ul></div>
<p id="heres_the_pseu_id2">Here’s the pseudocode for <code class="literal">minimum/2</code>.</p>
<div class="itemizedlist" id="when_the_list_p_id1"><ul class="itemizedlist">
<li class="listitem">
When the list passed to <code class="literal">minimum/2</code> is empty, the final result is the current
candidate. This stops the recursion.
</li>
<li class="listitem">
<p id="if_the_list_pas" class="simpara">
If the list passed to <code class="literal">minimum/2</code> is not empty, then see if the head of
the list is less than the current candidate.
</p>
<div class="itemizedlist" id="if_so_call_min_id1"><ul class="itemizedlist">
<li class="listitem">
If so, call <code class="literal">minimum/2</code> with the tail of the list as the first argument
  and the list head (the new "smallest number") as the second argument.
</li>
<li class="listitem">
If not, call <code class="literal">minimum/2</code> with the tail of the list as the first argument
  and the current candidate (still the "smallest number")
  as the second argument.
</li>
</ul></div>
</li>
</ul></div>
<p id="unlike_most_exa">Unlike most examples in
<a class="ulink" href="http://shop.oreilly.com/product/0636920025818.do" target="_top">Introducing Erlang</a>,
passing an empty list to this
function will make it crash. That’s a reasonable thing to do, as an empty
list can’t really be said to have a minimum value.</p>
<pre class="programlisting" data-language="erl" id="cstats_o_id1"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="go">{ok,stats}</code>
<code class="gp">2&gt;</code> <code class="nv">N</code> <code class="o">=</code> <code class="p">[</code><code class="mi">4</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">7</code><code class="p">,</code> <code class="o">-</code><code class="mi">17</code><code class="p">,</code> <code class="mi">8</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">5</code><code class="p">].</code>
<code class="go">[4,1,7,-17,8,2,5]</code>
<code class="gp">3&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">minimum</code><code class="p">(</code><code class="nv">N</code><code class="p">).</code>
<code class="go">-17</code>
<code class="gp">4&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">minimum</code><code class="p">([]).</code>
<code class="gt">** exception error: no match of right hand side value []</code>
<code class="go">     in function  stats:minimum/1 (stats.erl, line 15)</code>
<code class="gp">5&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">minimum</code><code class="p">([</code><code class="mi">52</code><code class="p">.</code><code class="mi">46</code><code class="p">]).</code>
<code class="go">52.46</code></pre>
<p id="see_a_suggested_id12"><a class="link" href="apa.html#SOLUTION06-ET01" title="Solution 6-1">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch06-lists.asciidoc" id="CH06-ET02">
<div class="titlepage"><div><div><h2 class="title">Étude 6-2: Iteration through Lists (More Practice)</h2></div></div></div>
<p id="add_two_more_fu">Add two more functions to the <code class="literal">stats</code> module:</p>
<p id="maximum_whic"><code class="literal">maximum/1</code>, which is just
the same as <code class="literal">minimum/1</code>, but don’t forget—as I did—to reverse the direction
of your test for "smaller" to become a test for "larger." (This function
also already exists as <code class="literal">lists:max/1</code>.)</p>
<p id="range_which_"><code class="literal">range/1</code>, which takes a list of numbers as its argument and returns a
list of two numbers: the minimum and maximum entries in the list.</p>
<pre class="programlisting" data-language="erl" id="cstats_o_id2"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="go">{ok,stats}</code>
<code class="gp">2&gt;</code> <code class="nv">N</code> <code class="o">=</code> <code class="p">[</code><code class="mi">4</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">7</code><code class="p">,</code> <code class="o">-</code><code class="mi">17</code><code class="p">,</code> <code class="mi">8</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">5</code><code class="p">].</code>
<code class="go">[4,1,7,-17,8,2,5]</code>
<code class="gp">3&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">maximum</code><code class="p">(</code><code class="nv">N</code><code class="p">).</code>
<code class="go">8</code>
<code class="gp">4&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">range</code><code class="p">(</code><code class="nv">N</code><code class="p">).</code>
<code class="go">[-17,8]</code></pre>
<p id="see_a_suggested_id13"><a class="link" href="apa.html#SOLUTION06-ET02" title="Solution 6-2">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch06-lists.asciidoc" id="CH06-ET03">
<div class="titlepage"><div><div><h2 class="title">Étude 6-3: Accumulating the Sum of a List</h2></div></div></div>
<p id="add_a_function_">Add a function <code class="literal">julian/1</code> to the <code class="literal">dates</code> module that you wrote in
<a class="link" href="ch05.html#CH05-ET02" title="Étude 5-2: Using the re Module">Étude 5-2</a>. Given a string in ISO format (<code class="literal">"yyyy-mm-dd"</code>), it
returns the Julian date: the day of the year.</p>
<p id="here_is_some_sa_id6">Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cdates_o"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">dates</code><code class="p">).</code>
<code class="go">{ok,dates}</code>
<code class="gp">2&gt;</code> <code class="nn">dates</code><code class="p">:</code><code class="n">julian</code><code class="p">(</code><code class="s">"2012-12-31"</code><code class="p">).</code>
<code class="go">366</code>
<code class="gp">3&gt;</code> <code class="nn">dates</code><code class="p">:</code><code class="n">julian</code><code class="p">(</code><code class="s">"2013-12-31"</code><code class="p">).</code>
<code class="go">365</code>
<code class="gp">4&gt;</code> <code class="nn">dates</code><code class="p">:</code><code class="n">julian</code><code class="p">(</code><code class="s">"2012-02-05"</code><code class="p">).</code>
<code class="go">36</code>
<code class="gp">5&gt;</code> <code class="nn">dates</code><code class="p">:</code><code class="n">julian</code><code class="p">(</code><code class="s">"2013-02-05"</code><code class="p">).</code>
<code class="go">36</code>
<code class="gp">6&gt;</code> <code class="nn">dates</code><code class="p">:</code><code class="n">julian</code><code class="p">(</code><code class="s">"1900-03-01"</code><code class="p">).</code>
<code class="go">60</code>
<code class="gp">7&gt;</code> <code class="nn">dates</code><code class="p">:</code><code class="n">julian</code><code class="p">(</code><code class="s">"2000-03-01"</code><code class="p">).</code>
<code class="go">61</code>
<code class="gp">126&gt;</code> <code class="nn">dates</code><code class="p">:</code><code class="n">julian</code><code class="p">(</code><code class="s">"2013-01-01"</code><code class="p">).</code>
<code class="go">1</code></pre>
<p id="the_julian_fu_id1">The <code class="literal">julian/1</code> function defines a 12-item list called <code class="literal">DaysPerMonth</code> that
contains the number of days in each month, splits the date into
the year, month, and day (using the <code class="literal">date_parts/1</code> function you wrote in
<a class="link" href="ch05.html#CH05-ET02" title="Étude 5-2: Using the re Module">Étude 5-2</a>, and then calls helper function <code class="literal">julian/5</code> (yes,
five arguments).</p>
<p id="the_julian_fu_id2">The <code class="literal">julian/5</code> function does all of the work. Its arguments are the year,
month, day, the list of days per month, and an accumulated total, which
starts at zero. <code class="literal">julian/5</code> takes the head of the days per month list and
adds it to the accumulator, and then calls <code class="literal">julian/5</code> again with the
tail of the days per month list and the accumulator value as its last two
arguments.</p>
<p id="lets_take_as_">Let’s take, as an example, the sequence of calls for April 18, 2013:</p>
<pre class="literallayout" id="julian_">julian(2013, 4, 18, [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], 0).
julian(2013, 4, 18, [28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], 31).
julian(2013, 4, 18, [31, 30, 31, 30, 31, 31, 30, 31, 30, 31], 59).
julian(2013, 4, 18, [30, 31, 30, 31, 31, 30, 31, 30, 31], 90).</pre>
<p id="at_this_point_">At this point, the accumulator has all the days up through the beginning of
April, so the last call to <code class="literal">julian/5</code> just adds the 18 remaining days
and yields 108 as its result.</p>
<p id="you_know_you_ar">You know you are doing the last call when you have "used up"
the first <span class="emphasis"><em>month-1</em></span> items in
the list of days per month. That happens <code class="literal">when</code> the month number is greater
than <code class="literal">(13 - length(<em class="replaceable"><code>days_per_month_list</code></em>))</code>. Hint: use a guard.</p>
<p id="of_course_ther">Of course, there’s still the problem of leap years. You can handle it in
either <code class="literal">julian/5</code> or <code class="literal">julian/1</code>.</p>
<p id="if_you_want_to__id3">If you want to do the work in <code class="literal">julian/5</code>, then for non-leap years,
the last call to <code class="literal">julian/5</code> adds the number of days in the target month.
For leap years, the function must add the number of days in the
target month plus one—but only if the month is after February.</p>
<p id="if_you_want_to__id4">If you want to do the work in <code class="literal">julian/5</code>, use a <code class="literal">case</code> to assign either
<code class="literal">28</code> or <code class="literal">29</code> to a variable named <code class="literal">DaysInFeb</code> (depending on whether the
year is a leap year), and then use that variable instead of 28 when you
construct your original days per month list.</p>
<p id="ill_give_you_t">I’ll give you the code for the <code class="literal">is_leap_year/1</code> function for free; it returns
<code class="literal">true</code> if the given year is a leap year, <code class="literal">false</code> otherwise.</p>
<pre class="programlisting" data-language="erlang" id="is_leap_yearye"><code class="nf">is_leap_year</code><code class="p">(</code><code class="nv">Year</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">4</code> <code class="o">==</code> <code class="mi">0</code> <code class="ow">andalso</code> <code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">100</code> <code class="o">/=</code> <code class="mi">0</code><code class="p">)</code>
  <code class="ow">orelse</code> <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">400</code> <code class="o">==</code> <code class="mi">0</code><code class="p">).</code></pre>
<p id="see_suggested_s"><a class="link" href="apa.html#SOLUTION06-ET03" title="Solution 6-3">See suggested solutions in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch06-lists.asciidoc" id="CH06-INTERLUDE">
<div class="titlepage"><div><div><h2 class="title">Interlude: "Mistakes were made."</h2></div></div></div>
<p id="as_i_was_writin">As I was writing the next two études, I tried, despite the examples in the
book, to avoid using <code class="literal">lists:reverse/1</code>. I thought, "Why <span class="emphasis"><em>can’t</em></span> I add items
to the end of a list using the cons (vertical bar; <code class="literal">|</code>) notation?" Here’s why.</p>
<p id="i_decided_to_do">I decided to do a simple task: take a list of numbers and return a list
consisting of the squares of the numbers. I tried adding new items to the end
of the list with this code:</p>
<pre class="programlisting" data-language="erlang" id="modulebad_cod"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">bad_code</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">squares</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="nf">squares</code><code class="p">(</code><code class="nv">Numbers</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">squares</code><code class="p">(</code><code class="nv">Numbers</code><code class="p">,</code> <code class="p">[]).</code>

<code class="nf">squares</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">squares</code><code class="p">([</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">T</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">squares</code><code class="p">(</code><code class="nv">T</code><code class="p">,</code> <code class="p">[</code><code class="nv">Result</code> <code class="p">|</code> <code class="nv">H</code> <code class="o">*</code> <code class="nv">H</code> <code class="p">]).</code></pre>
<p id="the_resulting_l">The resulting list was in the correct order, but it was an improper list.</p>
<pre class="programlisting" data-language="erl" id="cbad_code_id1"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">bad_code</code><code class="p">).</code>
<code class="go">{ok,bad_code}</code>
<code class="gp">2&gt;</code> <code class="nn">bad_code</code><code class="p">:</code><code class="n">squares</code><code class="p">([</code><code class="mi">9</code><code class="p">,</code> <code class="mi">4</code><code class="p">.</code><code class="mi">22</code><code class="p">,</code> <code class="mi">5</code><code class="p">]).</code>
<code class="go">[[[[]|81]|17.8084]|25]</code></pre>
<p id="that_didnt_wor">That didn’t work. Wait a minute—the book said that the right hand side of the
cons (<code class="literal">|</code>) operator should be a list. "OK, you want a list?" I thought.
"I’ve got your list right here." (See the last
line of the code, where I wrap the new item in square brackets.)</p>
<pre class="programlisting" data-language="erlang" id="squaresnumber"><code class="nf">squares2</code><code class="p">(</code><code class="nv">Numbers</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">squares2</code><code class="p">(</code><code class="nv">Numbers</code><code class="p">,</code> <code class="p">[]).</code>

<code class="nf">squares2</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">squares2</code><code class="p">([</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">T</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">squares2</code><code class="p">(</code><code class="nv">T</code><code class="p">,</code> <code class="p">[</code><code class="nv">Result</code> <code class="p">|</code> <code class="p">[</code><code class="nv">H</code> <code class="o">*</code> <code class="nv">H</code><code class="p">]</code> <code class="p">]).</code></pre>
<p id="there_that_sho">There. That should do the trick.</p>
<pre class="programlisting" data-language="erl" id="cbad_code_id2"><code class="gp">6&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">bad_code</code><code class="p">).</code>
<code class="go">{ok,bad_code}</code>
<code class="gp">7&gt;</code> <code class="nn">bad_code</code><code class="p">:</code><code class="n">squares2</code><code class="p">([</code><code class="mi">9</code><code class="p">,</code> <code class="mi">4</code><code class="p">.</code><code class="mi">22</code><code class="p">,</code> <code class="mi">5</code><code class="p">]).</code>
<code class="go">[[[[],81],17.8084],25]</code></pre>
<p id="the_result_was_">The result was better, but only slightly better. I didn’t have an improper list
any more, but now I had a list of list of list of lists.
I could fix the problem by changing one line to flatten the final result.</p>
<pre class="programlisting" data-language="erlang" id="squares_re"><code class="nf">squares2</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">flatten</code><code class="p">(</code><code class="nv">Result</code><code class="p">);</code></pre>
<p id="that_worked_bu">That worked, but it wasn’t a satisfying solution.</p>
<div class="itemizedlist" id="the_longer_the__id1"><ul class="itemizedlist">
<li class="listitem">
The longer the original list, the more deeply nested the final list
would be,
</li>
<li class="listitem">
I still had to call a function from the <code class="literal">lists</code> module, and
</li>
<li class="listitem">
A look at <a class="ulink" href="http://www.erlang.org/doc/efficiency_guide/listHandling.html" target="_top">http://www.erlang.org/doc/efficiency_guide/listHandling.html</a> showed
that <code class="literal">lists:flatten</code> is a very expensive operation.
</li>
</ul></div>
<p id="in_light_of_all">In light of all of this, I decided to use <code class="literal">lists:reverse/1</code> and write
the code to generate a proper, non-nested list.</p>
<pre class="programlisting" data-language="erlang" id="modulegood_co"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">good_code</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">correct_squares</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="nf">correct_squares</code><code class="p">(</code><code class="nv">Numbers</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">correct_squares</code><code class="p">(</code><code class="nv">Numbers</code><code class="p">,</code> <code class="p">[]).</code>

<code class="nf">correct_squares</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">Result</code><code class="p">);</code>

<code class="nf">correct_squares</code><code class="p">([</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">T</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">correct_squares</code><code class="p">(</code><code class="nv">T</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="o">*</code> <code class="nv">H</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">]).</code></pre>
<pre class="programlisting" data-language="erl" id="cgood_code"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">good_code</code><code class="p">).</code>
<code class="go">{ok,good_code}</code>
<code class="gp">2&gt;</code> <code class="nn">good_code</code><code class="p">:</code><code class="n">correct_squares</code><code class="p">([</code><code class="mi">9</code><code class="p">,</code> <code class="mi">4</code><code class="p">.</code><code class="mi">22</code><code class="p">,</code> <code class="mi">5</code><code class="p">]).</code>
<code class="go">[81,17.8084,25]</code></pre>
<p id="success_at_last">Success at last!  The moral of the story?</p>
<div class="itemizedlist" id="rtfm_read_the__id1"><ul class="itemizedlist">
<li class="listitem">
RTFM (Read the Fabulous Manual).
</li>
<li class="listitem">
Believe what you read.
</li>
<li class="listitem">
If you don’t believe what you read, try it and find out.
</li>
<li class="listitem">
Don’t worry if you make this sort of mistake. You won’t be the first person
to do so, and you certainly won’t be the last.
</li>
<li class="listitem">
When using cons, "lists come last."
</li>
</ul></div>
<p id="ok_back_to_wor">OK. Back to work.</p>
</div>
<div class="sect1" data-original-filename="ch06-lists.asciidoc" id="CH06-ET04">
<div class="titlepage"><div><div><h2 class="title">Étude 6-4: Lists of Lists</h2></div></div></div>
<p id="dentists_check_">Dentists check the health of your gums by checking the depth of the "pockets"
at six different locations around each of your 32 teeth.
The depth is measured in millimeters. If any of the depths is greater
than or equal to four millimeters, that tooth needs attention. (Thanks to
Dr. Patricia Lee, DDS, for explaining this to me.)</p>
<p id="your_task_is_to">Your task is to write a module named <code class="literal">teeth</code> and a function named
<code class="literal">alert/1</code>. The function takes a list of 32 lists of six numbers as its
input. If a tooth isn’t present, it is represented by the list
<code class="literal">[0]</code> instead of a list of six numbers. The function produces
a list of the tooth numbers that require attention.  The numbers
must be in ascending order.</p>
<p id="heres_a_set_of">Here’s a set of pocket depths for a person who has had her
upper wisdom teeth, numbers 1 and 16, removed. Just copy and paste it.</p>
<pre class="literallayout" id="pocketdepths__">PocketDepths = [[0], [2,2,1,2,2,1], [3,1,2,3,2,3],
[3,1,3,2,1,2], [3,2,3,2,2,1], [2,3,1,2,1,1],
[3,1,3,2,3,2], [3,3,2,1,3,1], [4,3,3,2,3,3],
[3,1,1,3,2,2], [4,3,4,3,2,3], [2,3,1,3,2,2],
[1,2,1,1,3,2], [1,2,2,3,2,3], [1,3,2,1,3,3], [0],
[3,2,3,1,1,2], [2,2,1,1,3,2], [2,1,1,1,1,2],
[3,3,2,1,1,3], [3,1,3,2,3,2], [3,3,1,2,3,3],
[1,2,2,3,3,3], [2,2,3,2,3,3], [2,2,2,4,3,4],
[3,4,3,3,3,4], [1,1,2,3,1,2], [2,2,3,2,1,3],
[3,4,2,4,4,3], [3,3,2,1,2,3], [2,2,2,2,3,3],
[3,2,3,2,3,2]].</pre>
<p id="and_heres_the_">And here’s the output:</p>
<pre class="programlisting" data-language="erl" id="cteeth_o"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">teeth</code><code class="p">).</code>
<code class="go">{ok,teeth}</code>
<code class="gp">2&gt;</code> <code class="nn">teeth</code><code class="p">:</code><code class="n">alert</code><code class="p">(</code><code class="nv">PocketDepths</code><code class="p">).</code>
<code class="go">[9,11,25,26,29]</code></pre>
<p id="see_a_suggested_id14"><a class="link" href="apa.html#SOLUTION06-ET04" title="Solution 6-4">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch06-lists.asciidoc" id="CH06-ET05">
<div class="titlepage"><div><div><h2 class="title">Étude 6-5: Random Numbers; Generating Lists of Lists</h2></div></div></div>
<p id="how_do_you_thin">How do you think I got the numbers for the teeth in the preceding étude?
Do you really think I made up and typed all 180 of them? No, of course not.
Instead, I wrote an Erlang program to create the list of lists for me,
and that’s what you’ll do in this étude.</p>
<p id="in_order_to_cre">In order to create the data for the teeth,
I had to generate random numbers with Erlang’s
<code class="literal">random</code> module. Try generating a random number uniformly
distributed between 0 and 1.0 by typing this in <code class="literal">erl</code>:</p>
<pre class="programlisting" data-language="erl" id="randomunifo"><code class="gp">1&gt;</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">().</code>
<code class="go">0.4435846174457203</code></pre>
<p id="now_exit_erl_">Now, exit <code class="literal">erl</code>, restart, and type the same command again. You’ll get the
same number. In order to ensure that you get different sets of random numbers,
you have to <span class="emphasis"><em>seed</em></span> the random number generator with a three-tuple. The easiest
way to get a different seed every time you run the program is to use the
<code class="literal">now/0</code> built-in function, which returns a different three-tuple every time
you call it.</p>
<pre class="programlisting" data-language="erl" id="now_"><code class="gp">1&gt;</code> <code class="n">now</code><code class="p">().</code>
<code class="go">{1356,887000,432535}</code>
<code class="gp">2&gt;</code> <code class="n">now</code><code class="p">().</code>
<code class="go">{1356,887002,15527}</code>
<code class="gp">3&gt;</code> <code class="n">now</code><code class="p">().</code>
<code class="go">{1356,887003,831752}</code></pre>
<p id="exit_erl_resta">Exit <code class="literal">erl</code>, restart, it and try these commands. Do this a couple of times to
convince yourself that you really get different random numbers. Don’t worry
about the <code class="literal">undefined</code>; that’s just Erlang’s way of telling you that the
random number generator wasn’t seeded before.</p>
<pre class="programlisting" data-language="erl" id="randomseed"><code class="gp">1&gt;</code> <code class="nn">random</code><code class="p">:</code><code class="n">seed</code><code class="p">(</code><code class="n">now</code><code class="p">()).</code>
<code class="go">undefined</code>
<code class="gp">2&gt;</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">().</code>
<code class="go">0.27846009966109264</code></pre>
<p id="if_you_want_to__id5">If you want to generate a random integer between 1 and <code class="literal">N</code>, use
<code class="literal">uniform/1</code>; thus <code class="literal">random:uniform(10)</code> will generate a
random integer from 1 to 10.</p>
<p id="functions_that_">Functions that use random numbers have side effects; unlike the <code class="literal">sin</code> or
<code class="literal">sqrt</code> function, which always gives you the same numbers for the same input,
functions that use random numbers should always give you different numbers
for the same input. Since these functions aren’t "pure," it’s best to isolate
them in a module of their own.</p>
<p id="in_this_tude__id2">In this étude, create a module named <code class="literal">non_fp</code>, and write a function
<code class="literal">generate_teeth/2</code>. This function has a string consisting of the characters
<code class="literal">T</code> and <code class="literal">F</code> for its first argument.
A <code class="literal">T</code> in the string indicates that the tooth is present, and a
<code class="literal">F</code> indicates a missing tooth. In Erlang, a string is a list of characters,
so you can treat this string just as you would any other list. Remember to
refer to individual characters as <code class="literal">$T</code> and <code class="literal">$F</code>.</p>
<p id="the_second_argu">The second argument is a floating point
number between 0 and 1.0 that indicates the probability that a tooth will be
a good tooth.</p>
<p id="these_are_the_h">These are the helper functions I needed:</p>
<div class="variablelist" id="generate_teeth"><dl class="variablelist">
<dt><span class="term">
<code class="literal">generate_teeth/3</code>
</span></dt>
<dd>
<p id="the_first_two_a" class="simpara">
  The first two arguments are the same as for <code class="literal">generate_teeth/2</code>; the
  third argument is the accumulated list. When the first argument is
  an empty list, the function yields the reverse of the accumulated list.
</p>
<p id="hint_use_patte" class="simpara">Hint: use pattern matching to figure out whether a tooth is present or not.
For a non-present tooth, add <code class="literal">[0]</code> to the accumulated list; for a tooth
that is present, create a list of six numbers by calling <code class="literal">generate_tooth/1</code>
with the probability of a good tooth as its argument.</p>
</dd>
<dt><span class="term">
<code class="literal">generate_tooth/1</code>
</span></dt>
<dd>
<p id="this_generates_" class="simpara">
  This generates the list of numbers for a single tooth. It generates a
  random number between 0 and 1. If that number is less than the probability
  of a good tooth, it sets the "base depth" to 2, otherwise it sets the base depth to 3.
</p>
<p id="the_function_th_id1" class="simpara">The function then calls <code class="literal">generate_tooth/3</code> with the base depth, the
number 6, and an empty list as its arguments.</p>
</dd>
<dt><span class="term">
<code class="literal">generate_tooth/3</code>
</span></dt>
<dd>
  The first argument is the base depth, the second is the number of items
  left to generate, and the third argument is the accumulated list. When
  the number of items hits zero, the function is finished. Otherwise, it
  adds a random integer between -1 and 1 to the base depth,
  adds it to the accumulated list, and does a recursive call with
  one less item.
</dd>
</dl></div>
<p id="see_a_suggested_id15"><a class="link" href="apa.html#SOLUTION06-ET05" title="Solution 6-5">See a suggested solution in Appendix A.</a></p>
</div></section><section class="chapter" data-original-filename="ch07-higher-order-functions-and-lists.asciidoc" id="HIGHER-ORDER_FNS"><div class="titlepage"><div><div><h1 class="title">Chapter 7. Higher Order Functions and List Comprehensions</h1></div></div></div>
<div class="note" id="you_can_learn_m_id13"><p id="you_can_learn_m_id14">You can learn more about working with higher order functions in Chapter 9 of <span class="emphasis"><em>Erlang Programming</em></span>, Section 3.4 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.7 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapter 6 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.  List comprehensions are in Chapter 9 of <span class="emphasis"><em>Erlang Programming</em></span>, Section 3.6 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.9 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapter 1 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch07-higher-order-functions-and-lists.asciidoc" id="CH07-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 7-1: Simple Higher Order Functions</h2></div></div></div>
<p id="in_calculus_th">In calculus, the derivative of a function is "a measure of how a function
changes as its input changes"
(<a class="ulink" href="http://en.wikipedia.org/wiki/Derivative" target="_top">Wikipedia</a>). For example,
if an object is traveling at a constant velocity, that velocity is the same
from moment to moment, so the derviative is zero. If an object is falling, its
velocity changes a little bit as the object starts falling, and then falls
faster and faster as time goes by.</p>
<p id="you_can_calcula">You can calculate the rate of change of a function by calculating:
<code class="literal">(F(X + Delta) - F(X)) / Delta</code>, where <code class="literal">Delta</code> is the interval
between measurements. As Delta approaches zero, you get closer and
closer to the true value of the derivative.</p>
<p id="write_a_module__id3">Write a module named <code class="literal">calculus</code> with a function <code class="literal">derivative/2</code>. The
first argument is the function whose derivative you wish to find, and the
second argument is the point at which you are measuring the derivative.</p>
<p id="what_should_you">What should you use for a value of <code class="literal">Delta</code>? I used <code class="literal">1.0e-10</code>, as that is a small
number that approaches zero.</p>
<p id="here_is_some_sa_id7">Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="ccalculus"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">calculus</code><code class="p">).</code>
<code class="go">{ok,calculus}</code>
<code class="gp">2&gt;</code> <code class="nv">F1</code> <code class="o">=</code> <code class="k">fun</code><code class="p">(</code><code class="nv">X</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">X</code> <code class="o">*</code> <code class="nv">X</code> <code class="k">end</code><code class="p">.</code>
<code class="go">#Fun&lt;erl_eval.6.82930912&gt;</code>
<code class="gp">3&gt;</code> <code class="nv">F1</code><code class="p">(</code><code class="mi">3</code><code class="p">).</code>
<code class="go">9</code>
<code class="gp">4&gt;</code> <code class="nn">calculus</code><code class="p">:</code><code class="n">derivative</code><code class="p">(</code><code class="nv">F1</code><code class="p">,</code> <code class="mi">3</code><code class="p">).</code>
<code class="go">6.000000496442226</code>
<code class="gp">5&gt;</code> <code class="nn">calculus</code><code class="p">:</code><code class="n">derivative</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">X</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">3</code> <code class="o">*</code> <code class="nv">X</code> <code class="o">*</code> <code class="nv">X</code> <code class="o">+</code> <code class="mi">2</code> <code class="o">*</code> <code class="nv">X</code> <code class="o">+</code> <code class="mi">1</code> <code class="k">end</code><code class="p">,</code> <code class="mi">5</code><code class="p">).</code>
<code class="go">32.00000264769187</code>
<code class="gp">6&gt;</code> <code class="nn">calculus</code><code class="p">:</code><code class="n">derivative</code><code class="p">(</code><code class="k">fun</code> <code class="nn">math</code><code class="p">:</code><code class="n">sin</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">).</code>
<code class="go">1.0</code></pre>
<div class="itemizedlist" id="line__is_a_tes_id1"><ul class="itemizedlist">
<li class="listitem">
Line 3 is a test to see if the <code class="literal">F1</code> function works.
</li>
<li class="listitem">
Line 5 shows that you don’t have to assign a function to a variable;
you can define the function in line.
</li>
<li class="listitem">
Line 6 shows how to refer to a function in another module. You start
with the word <code class="literal">fun</code> followed by the <code class="literal"><span class="emphasis"><em>module</em></span>:<span class="emphasis"><em>function</em></span>/<span class="emphasis"><em>arity</em></span></code>.
</li>
</ul></div>
<p id="see_a_suggested_id16"><a class="link" href="apa.html#SOLUTION07-ET01" title="Solution 7-1">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch07-higher-order-functions-and-lists.asciidoc" id="CH07-ET02">
<div class="titlepage"><div><div><h2 class="title">Étude 7-2: List Comprehensions and Pattern Matching</h2></div></div></div>
<p id="is_it_possible_">Is it possible to use pattern matching inside a list comprehension? Try
it and find out.</p>
<p id="presume_you_hav">Presume you have this list of people’s names, genders, and ages:</p>
<pre class="literallayout" id="people__fed">People = [{"Federico", $M, 22}, {"Kim", $F, 45}, {"Hansa", $F, 30},
{"Tran", $M, 47}, {"Cathy", $F, 32}, {"Elias", $M, 50}].</pre>
<div class="sect2" id="_part_one">
<div class="titlepage"><div><div><h3 class="title">Part One</h3></div></div></div>
<p id="in_erl_or_in_a">In <code class="literal">erl</code> (or in a module, if you prefer), write a list comprehension
that creates a list consisting of the names of all males who are over 40.
Use pattern matching
to separate the tuple into three variables, and two guards to do the
tests for age and gender.</p>
</div>
<div class="sect2" id="_part_two">
<div class="titlepage"><div><div><h3 class="title">Part Two</h3></div></div></div>
<p id="when_you_use_mu">When you use multiple guards in a list comprehension, you get the moral
equivalent of <code class="literal">and</code> for each condition you are testing. If you want an
<code class="literal">or</code> condition, you must test it explicitly. Write a list comprehension
that selects the names of all the people who are male <span class="emphasis"><em>or</em></span> over 40. You
will need one guard with an <code class="literal">or</code>; you may also use <code class="literal">orelse</code>.</p>
<div class="note" id="because_or_has__id1"><p id="because_or_has__id2">Because <code class="literal">or</code> has higher priority than comparison operators like <code class="literal">&lt;</code> and
<code class="literal">==</code>, an expression like <code class="literal">X &gt; 5 or X &lt; 12</code> will generate an error, as
Erlang interprets it to mean <code class="literal">X &gt; (5 or X) &lt; 12</code>. Use parentheses to force
the correct evaluation: <code class="literal">(X &gt; 5) or (X &lt; 12)</code>. If you use <code class="literal">orelse</code>, which
has a lower priority than the comparison operators, you don’t need the
parentheses, though it doesn’t hurt to have them. Another advantage of
<code class="literal">orelse</code> is that it doesn’t do any unnecessary comparisons.</p></div>
</div>
</div>
<div class="sect1" data-original-filename="ch07-higher-order-functions-and-lists.asciidoc" id="CH07-ET03">
<div class="titlepage"><div><div><h2 class="title">Étude 7-3: Using <code class="literal">lists:foldl/3</code>
</h2></div></div></div>
<p id="add_mean_and_">Add <code class="literal">mean/1</code> and <code class="literal">stdv/1</code> functions to the <code class="literal">stats</code> module which
you created in <a class="link" href="">Étude 6-2</a> to calculate the mean and
standard deviation for a list of numbers.</p>
<pre class="programlisting" data-language="erl" id="cstats_o_id3"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="go">{ok,stats}</code>
<code class="gp">2&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">mean</code><code class="p">([</code><code class="mi">7</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">9</code><code class="p">]).</code>
<code class="go">6.0</code>
<code class="gp">3&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">stdv</code><code class="p">([</code><code class="mi">7</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">9</code><code class="p">]).</code>
<code class="go">3.605551275463989</code></pre>
<p id="the_formula_for">The formula for the mean is simple; just add up all the numbers and
divide by the number of items in the list (which you may find by using the
<code class="literal">length/1</code> function).Use <code class="literal">lists:foldl/3</code> to calculate the sum of the items
in the list.</p>
<p id="the_following_i">The following is the algorithm for calculating
the standard deviation. Presume that <code class="literal">N</code> is the number of items
in the list.</p>
<div class="orderedlist" id="add_up_all_the__id1"><ol class="orderedlist" type="1">
<li class="listitem">
Add up all the numbers in the list (call this the <span class="emphasis"><em>sum</em></span>).
</li>
<li class="listitem">
Add the squares of the numbers in the list (call this the <span class="emphasis"><em>sum of squares</em></span>).
</li>
<li class="listitem">
Multiply <code class="literal">N</code> times the <span class="emphasis"><em>sum of squares</em></span>.
</li>
<li class="listitem">
Multiply the <span class="emphasis"><em>sum</em></span> times itself.
</li>
<li class="listitem">
Subtract the result of step 4 from the result of step 3.
</li>
<li class="listitem">
Divide the result of step 5 by <code class="literal">N * (N - 1)</code>.
</li>
<li class="listitem">
Take the square root of that result.
</li>
</ol></div>
<p id="thus_if_your_n">Thus, if your numbers are 7, 2, and 9, <code class="literal">N</code> would be three, and
you would do these calculations:</p>
<div class="itemizedlist" id="the_sum_is____id1"><ul class="itemizedlist">
<li class="listitem">
The sum is 7 + 2 + 9, or 18.
</li>
<li class="listitem">
The sum of squares is 49 + 4 + 81, or 134.
</li>
<li class="listitem">
<code class="literal">N</code> times the sum of squares is 134 * 3, or 402.
</li>
<li class="listitem">
The sum times itself is 18 * 18, or 324.
</li>
<li class="listitem">
402 - 324 is 78.
</li>
<li class="listitem">
78 divided by (3 * (3 - 1)) is 78 / 6, or 13.
</li>
<li class="listitem">
The standard deviation is the square root of 13, or 3.606.
</li>
</ul></div>
<p id="in_your_code_y">In your code, you can do steps three through seven in one arithmetic
expression. You’d have variables in your expression rather than constants,
of course.</p>
<pre class="literallayout" id="mathsqrt__">math:sqrt((3 * 134 - 18 * 18)/(3 * (3 - 1))</pre>
<p id="use_listsfoldl">Use <code class="literal">lists:foldl/3</code> to calculate the sum and the sum of squares.
Bonus points if you can calculate both of them
with one call to <code class="literal">lists:foldl/3</code>. Hint:
the argument for the accumulator doesn’t have to be a single number. It can
be a list or a tuple.</p>
<p id="see_a_suggested_id17"><a class="link" href="apa.html#SOLUTION07-ET03" title="Solution 7-3">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch07-higher-order-functions-and-lists.asciidoc" id="CH07-ET04">
<div class="titlepage"><div><div><h2 class="title">Étude 7-4: Using <code class="literal">lists:split/2</code>
</h2></div></div></div>
<p id="use_erl_man_li">Use <code class="literal">erl -man lists</code> to see how the <code class="literal">lists:split/2</code> function works, or try
the following example and see if you can figure it out. Experiment to see
what happens if the first argument is zero.</p>
<pre class="programlisting" data-language="erl" id="listssplit"><code class="gp">1&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="mi">4</code><code class="p">,</code> <code class="p">[</code><code class="mi">110</code><code class="p">,</code> <code class="mi">220</code><code class="p">,</code> <code class="mi">330</code><code class="p">,</code> <code class="mi">440</code><code class="p">,</code> <code class="mi">550</code><code class="p">,</code> <code class="mi">660</code><code class="p">]).</code>
<code class="go">{[110,220,330,440],[550,660]}</code></pre>
<p id="use_listssplit">Use <code class="literal">lists:split/2</code> and <code class="literal">lists:foldl/3</code> to rewrite the
<code class="literal">dates:julian/1</code> function from
<a class="link" href="">Étude 6-3</a>. Hint: you’ll use those functions when
calculating the total number of days up to (but not including)
the month in question.</p>
<p id="see_a_suggested_id18"><a class="link" href="apa.html#SOLUTION07-ET04" title="Solution 7-4">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch07-higher-order-functions-and-lists.asciidoc" id="CH07-ET05">
<div class="titlepage"><div><div><h2 class="title">Étude 7-5: Multiple Generators in List Comprehensions</h2></div></div></div>
<p id="back_to_list_co">Back to list comprehensions. You can have more than one generator in a list
comprehension. Try this in <code class="literal">erl</code>:</p>
<pre class="programlisting" data-language="erl" id="x__y__x_"><code class="gp">1&gt;</code> <code class="p">[</code><code class="nv">X</code> <code class="o">*</code> <code class="nv">Y</code> <code class="p">||</code> <code class="nv">X</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="mi">3</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">7</code><code class="p">],</code> <code class="nv">Y</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="mi">2</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">6</code><code class="p">]].</code>
<code class="go">[6,12,18,10,20,30,14,28,42]</code></pre>
<p id="using_what_you">Using what you’ve learned from this example, write a module named <code class="literal">cards</code>
that contains a function <code class="literal">make_deck/0</code>. The function will generate a deck
of cards as a list 52 tuples in this form:</p>
<pre class="literallayout" id="aclubs">[{"A","Clubs"},
 {"A","Diamonds"},
 {"A","Hearts"},
 {"A","Spades"},
 {2,"Clubs"},
 {2,"Diamonds"},
 {2,"Hearts"},
 {2,"Spades"},
 ...
 {"K", "Clubs"},
 {"K", "Diamonds"},
 {"K", "Hearts"},
 {"K", "Spades"}]</pre>
<div class="note" id="when_you_run_th_id1">
<p id="when_you_run_th_id2">When you run this function, your output will not show the entire list; it will
show something that ends like this. Don’t freak out.</p>
<pre class="literallayout" id="clubs_">{7,"Clubs"},
{7,"Diamonds"},
{7,[...]},
{7,...},
{...}|...]</pre>
<p id="if_you_want_to__id6">If you want to see the full list, use this function.</p>
<pre class="programlisting" data-language="erl" id="show_deckdeck"><code class="go">show_deck(Deck) -&gt;</code>
<code class="go">  lists:foreach(fun(Item) -&gt; io:format("~p~n", [Item]) end, Deck).</code></pre>
</div>
<p id="see_a_suggested_id19"><a class="link" href="apa.html#SOLUTION07-ET05" title="Solution 7-5">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch07-higher-order-functions-and-lists.asciidoc" id="CH07-ET06">
<div class="titlepage"><div><div><h2 class="title">Étude 7-6: Explaining an Algorithm</h2></div></div></div>
<p id="you_need_a_way_">You need a way to shuffle the deck of cards. This is the code for
doing a shuffle, taken from the Literate Programs Wiki.</p>
<pre class="programlisting" data-language="erlang" id="shufflelist_"><code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="p">[]).</code>
<code class="nf">shuffle</code><code class="p">([],</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Acc</code><code class="p">;</code>
<code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Leading</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">T</code><code class="p">]}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">List</code><code class="p">))</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">List</code><code class="p">),</code>
  <code class="n">shuffle</code><code class="p">(</code><code class="nv">Leading</code> <code class="o">++</code> <code class="nv">T</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">Acc</code><code class="p">]).</code></pre>
<p id="wait_a_moment_">Wait a moment. If I’ve just given you the code, what’s the purpose
of this étude? I want you to understand the code. The object of this
étude is to write the documentation for the algorithm.
If you aren’t sure what the code does, try adding some
<code class="literal">io:format</code> statements to see what is happening. If you’re totally
stuck, <a class="ulink" href="http://en.literateprograms.org/Fisher-Yates_shuffle_%28Erlang%29" target="_top">see the explanation from Literate Programs site</a>.</p>
<p id="see_a_suggested_id20"><a class="link" href="apa.html#SOLUTION07-ET06" title="Solution 7-6">See a suggested solution in Appendix A.</a></p>
</div></section><section class="chapter" data-original-filename="ch08-processes.asciidoc" id="PROCESSES_id1"><div class="titlepage"><div><div><h1 class="title">Chapter 8. Processes</h1></div></div></div>
<div class="note" id="you_can_learn_m_id15"><p id="you_can_learn_m_id16">You can learn more about working with simple processes in Chapter 4 of <span class="emphasis"><em>Erlang Programming</em></span>, Chapter 8 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.13 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapters 10 and 11 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch08-processes.asciidoc" id="CH08-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 8-1: Using Processes to Simulate a Card Game</h2></div></div></div>
<p id="there_is_only_o">There is only one étude for this chapter. You’re going to
write an Erlang program that lets the computer play the card
game of "War" against itself.</p>
<div class="sect2" id="_the_art_of_war">
<div class="titlepage"><div><div><h3 class="title">The Art of War</h3></div></div></div>
<p id="these_are_the_r">These are the rules of the game as condensed from
<a class="ulink" href="http://en.wikipedia.org/wiki/War_%28card_game%29" target="_top">Wikipedia</a>, adapted
to two players, and simplified further.</p>
<p id="two_players_eac">Two players each take 26 cards from a shuffled deck. Each person
puts her top card face up on the table. Whoever has the higher
value card wins that battle, takes both cards, and puts
them at the bottom of her stack. What happens the if the cards
have the same value?
Then the players go to "war." Each person puts the next two cards from
their stack face down in the pile and a third card face up. High card
wins, and the winner takes all the cards for the bottom of her stack.
If the cards match again, the war continues with another set of three cards from
each person. If a person has fewer than three cards
when a war happens, he puts in all his cards.</p>
<p id="repeat_this_ent">Repeat this entire procedure until one person has all the cards. That player
wins the game. In this game, aces are considered to have the highest value,
and King &gt; Queen &gt; Jack.</p>
</div>
<div class="sect2" id="_war_what_is_it_good_for">
<div class="titlepage"><div><div><h3 class="title">War: What is it good for?</h3></div></div></div>
<p id="absolutely_noth">Absolutely nothing. Well, almost nothing. War is possibly the most
incredibly inane card game ever invented. It is a great way for children
to spend time, and it’s perfect as an étude because</p>
<div class="itemizedlist" id="it_is_naturally_id1"><ul class="itemizedlist">
<li class="listitem">
it is naturally implementable as processes (players) passing messages
(cards)
</li>
<li class="listitem">
there is no strategy involved in the play, thus allowing you to concentrate
on the processes and messages
</li>
</ul></div>
</div>
<div class="sect2" id="_pay_now_or_pay_later">
<div class="titlepage"><div><div><h3 class="title">Pay Now or Pay Later</h3></div></div></div>
<p id="when_you_purcha">When you purchase an item, if you pay cash on the spot, you often end up paying
less than if you used credit. If you are cooking a meal, getting all of the
ingredients collected before you start (pay now) is often less stressful than
having to stop and go to the grocery store for items you found out you didn’t
have (pay later). In most cases, "pay now" ends up being less expensive than
"pay later," and that certainly applies to most programming tasks.</p>
<p id="so_before_you_">So, before you rush off to start writing code, let me give you a word of advice:
Don’t. Spend some time with paper and pencil, away from the computer, and
<span class="emphasis"><em>design</em></span> this program first. This is a non-trivial program, and the "extra"
time you spend planning it (pay now) will save you a lot of time in
debugging and rewriting (pay later). As someone once told me, "Hours of
programming will save you minutes of planning."</p>
<p id="trust_me_progr">Trust me, programs written at the keyboard look like it, and that
is not meant as a compliment.</p>
<p id="note_this_does">Note: This does not mean that you should never use <code class="literal">erl</code> or write anything
at the keyboard. If you are wondering about how a specific part of Erlang
works and need to write a small test program to find out, go ahead and do that
right away.</p>
<p id="hint_do_your_d">Hint: Do your design on paper. Don’t try to keep the whole thing in your
head. Draw diagrams. Sometimes a picture or a storyboard of how the
messages should flow will clarify your thinking. (If your parents ever
asked you, "Do I have to draw you a diagram?", you may now confidently
answer "Yes. Please do that. It really helps.")</p>
</div>
<div class="sect2" id="_the_design">
<div class="titlepage"><div><div><h3 class="title">The Design</h3></div></div></div>
<p id="when_i_first_st">When I first started planning this, I was going to have just two processes
communicating with one another, as it is in a real game. But let’s think
about that. There is a slight asymmetry between the players. One
person usually brings the cards and suggests playing the game. He shuffles
the deck and deals out the cards at the beginning. Once that’s done,
things even out. The game play itself proceeds almost automatically. Neither
player is in control of the play, yet both of them are. It seems as if
there is an implicit, almost telepathic communication between the players.
Actually, there are no profound metaphysical issues here. Both players
are simultaneously following the same set of rules. And that’s the point that
bothered me—who makes the "decisions" in the program? I decided to sidestep
the issue by introducing a third agent, the "dealer," who is responsible for
giving the cards to each player at the start of the game. The dealer then
can tell each player to turn over cards, make a decision as to who won, and
then tell a particular player to take cards. This simplifies the message
flow considerably and also fits in nicely with the OTP concepts of supervisors
and servers, covered in Chapter 10 of
<a class="ulink" href="http://shop.oreilly.com/product/0636920025818.do" target="_top">Introducing Erlang</a>.</p>
<p id="in_my_code_the">In my code, the dealer had to keep track of:</p>
<div class="itemizedlist" id="the_process_ids_id1"><ul class="itemizedlist">
<li class="listitem">
The process IDs of the players (this was a list)
</li>
<li class="listitem">
The current state of play (see the following)
</li>
<li class="listitem">
Cards received from player 1 for this battle
</li>
<li class="listitem">
Cards received from player 2 for this battle
</li>
<li class="listitem">
The number of players who had given the dealer cards so far (0, 1, or 2)
</li>
<li class="listitem">
The pile of cards in the middle of the table
</li>
</ul></div>
<p id="the_dealer_spaw">The dealer spawns the players, and then is in one of the following states.
I’m going to anthropomorphize and use "me" to represent the dealer.</p>
<div class="variablelist" id="prebattle_tell"><dl class="variablelist">
<dt><span class="term">
Pre-battle
</span></dt>
<dd>
  Tell the players to send me cards. If the pile is empty, then
  it’s a normal battle; give me one card each. If the pile isn’t empty, then
  it’s a war; give me three cards.
</dd>
<dt><span class="term">
Await battle
</span></dt>
<dd>
  Wait to receive the cards from the players. Add one to the count every
  time I get a player’s cards. When the count reaches two, I’m ready for…
</dd>
<dt><span class="term">
Check Cards
</span></dt>
<dd>
<p id="if_either_playe" class="simpara">
  If either player has sent me an empty list for their cards, then that player
  is out of cards, so the other player must be the winner.
</p>
<p id="if_i_really_hav" class="simpara">If I really have cards from both players, compare them. If one player
is a winner, give that player the pile plus the cards currently in play.
If the cards match, add the cards currently in play to the pile, and
go back to "Pre-battle" state.</p>
</dd>
</dl></div>
<p id="note_that_this__id2">Note that this is my implementation; you may find an entirely
different and better way to write the program.</p>
</div>
<div class="sect2" id="_messages_are_asynchronous">
<div class="titlepage"><div><div><h3 class="title">Messages Are Asynchronous</h3></div></div></div>
<p id="remember_that_t">Remember that the order in which a process receives messages may
not be the same order in which they were sent. For example, if players
Andrea and Bertram have a battle, and Andrea wins,
you may be tempted to send these messages:</p>
<div class="orderedlist" id="tell_andrea_to__id1"><ol class="orderedlist" type="1">
<li class="listitem">
Tell Andrea to pick up the two cards that were in the battle.
</li>
<li class="listitem">
Tell Andrea to send you a card for the next battle.
</li>
<li class="listitem">
Tell Bertram to send you a card for the next battle.
</li>
</ol></div>
<p id="this_works_nice">This works nicely unless Andrea had just thrown her last card down
for that battle and message two arrives <span class="emphasis"><em>before</em></span> message one.
Andrea will report that she is out of cards, thus losing the game,
even though she’s really still in the game with the two cards that
she hasn’t picked up yet.</p>
</div>
<div class="sect2" id="_hints_for_testing">
<div class="titlepage"><div><div><h3 class="title">Hints for Testing</h3></div></div></div>
<p id="modify_the_card">Modify the <code class="literal">cards</code> module that you wrote in <a class="link" href="ch07.html#CH07-ET06" title="Étude 7-6: Explaining an Algorithm">Étude 7-6</a>
to generate a small deck with, say, only
four cards in two suits. If you try to play with a full deck, the game could
go on for a very, very long time.</p>
<p id="use_plenty_of_c">Use plenty of calls to <code class="literal">io:format/2</code> to see what your code is really doing.</p>
<p id="see_a_suggested_id21"><a class="link" href="apa.html#SOLUTION08-ET01" title="Solution 8-1">See a suggested solution in Appendix A.</a></p>
</div>
</div></section><section class="chapter" data-original-filename="ch09-errors.asciidoc" id="PROCESSES_id2"><div class="titlepage"><div><div><h1 class="title">Chapter 9. Handling Errors</h1></div></div></div>
<div class="note" id="you_can_learn_m_id17"><p id="you_can_learn_m_id18">You can learn more about error handling in Chapters 3 and 17 of <span class="emphasis"><em>Erlang Programming</em></span>, Chapter 4 and Section 18.2 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.8 and Chapters 5 and 7 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapters 7 and 12 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch09-errors.asciidoc" id="CH09-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 9-1: <code class="literal">try</code> and <code class="literal">catch</code>
</h2></div></div></div>
<p id="update_the_stat">Update the <code class="literal">stats</code> module that you wrote in <a class="link" href="ch07.html#CH07-ET03" title="Étude 7-3: Using lists:foldl/3">Étude 7-3</a>
so that it will catch errors in the <code class="literal">minimum/1</code>, <code class="literal">maximum/1</code>,
<code class="literal">mean/1</code> and <code class="literal">stdv/1</code> functions.</p>
<p id="here_is_some_sa_id8">Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cstats_o_id4"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="go">{ok,stats}</code>
<code class="gp">2&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">minimum</code><code class="p">([]).</code>
<code class="go">{error,badarg}</code>
<code class="gp">3&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">mean</code><code class="p">([]).</code>
<code class="go">{error,badarith}</code>
<code class="gp">4&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">mean</code><code class="p">([</code><code class="s">"123"</code><code class="p">,</code> <code class="mi">456</code><code class="p">]).</code>
<code class="go">{error,badarith}</code>
<code class="gp">5&gt;</code> <code class="nn">stats</code><code class="p">:</code><code class="n">stdv</code><code class="p">([]).</code>
<code class="go">{error,badarith}</code></pre>
<p id="see_a_suggested_id22"><a class="link" href="apa.html#SOLUTION09-ET01" title="Solution 9-1">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch09-errors.asciidoc" id="CH09-ET02">
<div class="titlepage"><div><div><h2 class="title">Étude 9-2: Logging Errors</h2></div></div></div>
<p id="write_a_module__id4">Write a module named <code class="literal">bank</code> that contains a function <code class="literal">account/1</code>. The
function takes a numeric <code class="literal">Balance</code>, which gives the current balance in
the account in imaginary dollars.</p>
<p id="the_function_wi">The function will repeatedly ask for a transaction (deposit, withdraw,
balance inquiry, or quit). If a deposit or withdrawal, it asks for the amount
to deposit or withdraw, and then does that transaction. If a deposit is
more than $10,000, the deposit may be subject to hold.</p>
<p id="provide_output_">Provide output to the customer, and also use <code class="literal">error_logger</code> to write to a
log file (which, in this case, will go to your terminal).
Choose any form of input prompts and feedback and logging messages that you
desire. Handle the following situtations:</p>
<div class="itemizedlist" id="deposits_and_wi_id1"><ul class="itemizedlist">
<li class="listitem">
Deposits and withdrawals cannot be negative numbers (error)
</li>
<li class="listitem">
Deposits of $10,000 or more might be subject to hold (warning)
</li>
<li class="listitem">
All other transactions are successful (informational)
</li>
</ul></div>
<p id="use_get_number">Use <code class="literal">get_number/1</code> from <a class="link" href="ch05.html#CH05-ET01" title="Étude 5-1: Validating Input">Étude 5-1</a> to allow either integer
or float input.</p>
<p id="here_is_sample_">Here is sample output. Due to Erlang’s asynchronous nature,
the user prompts and logging are often interleaved in the most inconvenient
places.</p>
<pre class="programlisting" data-language="erl" id="cbank_ok"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">bank</code><code class="p">).</code>
<code class="go">{ok,bank}</code>
<code class="gp">2&gt;</code> <code class="nn">bank</code><code class="p">:</code><code class="n">account</code><code class="p">(</code><code class="mi">2000</code><code class="p">).</code>
<code class="go">D)eposit, W)ithdraw, B)alance, Q)uit: D</code>
<code class="go">Amount to deposit: 300</code>
<code class="go">Your new balance is 2300</code>
<code class="go">D)eposit, W)ithdraw, B)alance, Q)uit:</code>
<code class="go">=INFO REPORT==== 26-Jan-2013::06:42:52 ===</code>
<code class="go">Successful deposit 300</code>
<code class="go">W</code>
<code class="go">Amount to withdraw: -200</code>
<code class="go">Withdrawals may not be less than zero.</code>
<code class="go">=ERROR REPORT==== 26-Jan-2013::06:42:56 ===</code>
<code class="go">Negative withdrawal amount -200</code>
<code class="go">D)eposit, W)ithdraw, B)alance, Q)uit: D</code>
<code class="go">Amount to deposit: 15000</code>
<code class="go">Your deposit of $15000 may be subject to hold.</code>
<code class="go">=ERROR REPORT==== 26-Jan-2013::06:43:05 ===</code>
<code class="go">Excessive deposit 15000</code>
<code class="go">Your new balance is 17300</code>
<code class="go">D)eposit, W)ithdraw, B)alance, Q)uit: W</code>
<code class="go">Amount to withdraw: 32767</code>
<code class="go">You cannot withdraw more than your current balance of 17300.</code>

<code class="go">=ERROR REPORT==== 26-Jan-2013::06:43:17 ===</code>
<code class="go">Overdraw 32767 from balance 17300</code>
<code class="go">D)eposit, W)ithdraw, B)alance, Q)uit: W</code>
<code class="go">Amount to withdraw: 150.25</code>
<code class="go">Your new balance is 17149.75</code>

<code class="go">=INFO REPORT==== 26-Jan-2013::06:43:29 ===</code>
<code class="go">Successful withdrawal 150.25</code>
<code class="go">D)eposit, W)ithdraw, B)alance, Q)uit: B</code>
<code class="go">D)eposit, W)ithdraw, B)alance, Q)uit:</code>
<code class="go">=INFO REPORT==== 26-Jan-2013::06:43:35 ===</code>
<code class="go">Balance inquiry 17149.75</code>
<code class="go">X</code>
<code class="go">Unknown command X</code>
<code class="go">D)eposit, W)ithdraw, B)alance, Q)uit: Q</code>
<code class="go">true</code></pre>
<p id="see_a_suggested_id23"><a class="link" href="apa.html#SOLUTION09-ET02" title="Solution 9-2">See a suggested solution in Appendix A.</a></p>
</div></section><section class="chapter" data-original-filename="ch10-storing-structured-data.asciidoc" id="STORING-STRUCTURED-DATA"><div class="titlepage"><div><div><h1 class="title">Chapter 10. Storing Structured Data</h1></div></div></div>
<div class="note" id="you_can_learn_m_id19"><p id="you_can_learn_m_id20">You can learn more about working with records in Chapter 7 of <span class="emphasis"><em>Erlang Programming</em></span>, Section 3.9 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.11 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapter 9 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.  ETS and DETS are in Chapter 10 of <span class="emphasis"><em>Erlang Programming</em></span>, Chapter 15 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.14 and Chapter 6 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapter 25 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.  Mnesia is covered in Chapter 13 of <span class="emphasis"><em>Erlang Programming</em></span>, Chapter 17 of <span class="emphasis"><em>Programming Erlang</em></span>, Section 2.7 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapter 29 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch10-storing-structured-data.asciidoc" id="CH10-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 10-1: Using ETS</h2></div></div></div>
<p id="in_honor_of_erl">In honor of Erlang’s heritage as a language designed for
telephony applications, this étude will set up a small
database that keeps track of phone calls.</p>
<div class="sect2" id="_part_one_2">
<div class="titlepage"><div><div><h3 class="title">Part One</h3></div></div></div>
<p id="create_a_file_n">Create a file named <code class="literal">phone_records.hrl</code> that defines a record
with these fields:</p>
<div class="itemizedlist" id="phone_number_st"><ul class="itemizedlist">
<li class="listitem">
Phone number
</li>
<li class="listitem">
Starting date (month, day, and year)
</li>
<li class="listitem">
Starting time (hours, minutes, and seconds)
</li>
<li class="listitem">
End date (month, day, and year)
</li>
<li class="listitem">
End time (hours, minutes, and seconds)
</li>
</ul></div>
<p id="you_may_name_th">You may name the record whatever you wish, and you may use any
field names you wish.</p>
</div>
<div class="sect2" id="_part_two_2">
<div class="titlepage"><div><div><h3 class="title">Part Two</h3></div></div></div>
<p id="in_a_module_nam_id2">In a module named <code class="literal">phone_ets</code>,
create an ETS table for phone calls by reading a file. The function
that does this will be named <code class="literal">setup/1</code>, and its argument will be the
name of the file containing the data.</p>
<p id="copy_the_follow">Copy the following text into a file named
<code class="literal">call_data.csv</code> and save the file in the same directory where you
did part one.</p>
<pre class="screen" id="screen">650-555-3326,2013-03-10,09:01:47,2013-03-10,09:05:11
415-555-7871,2013-03-10,09:02:20,2013-03-10,09:05:09
729-555-8855,2013-03-10,09:00:55,2013-03-10,09:02:18
729-555-8855,2013-03-10,09:02:57,2013-03-10,09:03:56
213-555-0172,2013-03-10,09:00:59,2013-03-10,09:03:49
946-555-9760,2013-03-10,09:01:20,2013-03-10,09:03:10
301-555-0433,2013-03-10,09:01:44,2013-03-10,09:04:06
301-555-0433,2013-03-10,09:05:17,2013-03-10,09:07:53
301-555-0433,2013-03-10,09:10:05,2013-03-10,09:13:14
729-555-8855,2013-03-10,09:04:40,2013-03-10,09:07:29
213-555-0172,2013-03-10,09:04:26,2013-03-10,09:06:00
213-555-0172,2013-03-10,09:06:59,2013-03-10,09:10:35
946-555-9760,2013-03-10,09:03:36,2013-03-10,09:04:23
838-555-1099,2013-03-10,09:00:43,2013-03-10,09:02:44
650-555-3326,2013-03-10,09:05:48,2013-03-10,09:09:08
838-555-1099,2013-03-10,09:03:43,2013-03-10,09:06:26
838-555-1099,2013-03-10,09:07:54,2013-03-10,09:10:10
301-555-0433,2013-03-10,09:14:07,2013-03-10,09:15:08
415-555-7871,2013-03-10,09:06:15,2013-03-10,09:09:32
650-555-3326,2013-03-10,09:10:12,2013-03-10,09:13:09</pre>
<p id="so_how_do_you_">So, how do you read a file? Take just the first three lines,
and put them into a file called <code class="literal">smallfile.csv</code>, then do the following
commands from <code class="literal">erl</code></p>
<pre class="programlisting" data-language="erl" id="resultcode"><code class="gp">1&gt;</code> <code class="p">{</code><code class="nv">ResultCode</code><code class="p">,</code> <code class="nv">InputFile</code><code class="p">}</code> <code class="o">=</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="s">"smallfile.csv"</code><code class="p">,</code> <code class="p">[</code><code class="n">read</code><code class="p">]).</code>
<code class="go">{ok,&lt;0.33.0&gt;}</code>
<code class="gp">2&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">).</code>
<code class="go">"650-555-3326,2013-03-10,09:01:47,2013-03-10,09:05:11\n"</code>
<code class="gp">3&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">).</code>
<code class="go">"415-555-7871,2013-03-10,09:02:20,2013-03-10,09:05:09\n"</code>
<code class="gp">4&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">).</code>
<code class="go">"729-555-8855,2013-03-10,09:00:55,2013-03-10,09:02:18\n"</code>
<code class="gp">5&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">).</code>
<code class="go">eof</code>
<code class="gp">6&gt;</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="s">"nosuchfile"</code><code class="p">,</code> <code class="p">[</code><code class="n">read</code><code class="p">]).</code>
<code class="go">{error,enoent}</code></pre>
<p id="in_the_precedin">In the preceding example, lines 1 through 5 show how to open a file
and read it. You can tell you are at the end of file when you get an
atom (<code class="literal">eof</code>) instead of a list (remember, Erlang strings are lists).
Line 6 shows what happens if you try to open a file
that doesn’t exist.</p>
<p id="the_phone_numbe">The phone number is the key for this data. Since there are multiple
calls per phone number, you will need a <code class="literal">bag</code> type table.
To get the individual items from each line, use
<code class="literal">re:split/2</code>, much as you did in <a class="link" href="ch05.html#CH05-ET02" title="Étude 5-2: Using the re Module">Étude 5-2</a>.</p>
</div>
<div class="sect2" id="_part_three">
<div class="titlepage"><div><div><h3 class="title">Part Three</h3></div></div></div>
<p id="write_functions">Write functions to summarize the number of minutes for a single
phone number (<code class="literal">summary/1</code>) or for all phone numbers.
(<code class="literal">summary/0</code>). These functions return a list of tuples in the form:</p>
<p id="phonenumber"><code class="literal">[{<span class="emphasis"><em>phoneNumber1</em></span>, <span class="emphasis"><em>minutes</em></span>]},{<span class="emphasis"><em>phoneNumber2</em></span>, <span class="emphasis"><em>minutes</em></span>}, …]</code></p>
<p id="you_could_write_id1">You could write your own code to do time and date calculations to
figure out the duration of a phone call, but there’s a limit on how
much you really want to re-invent the wheel, especially with something
as complex as calendar calculations. Consider, for example, a call that
begins on 31 December 2013 at 11:58:36 p.m. and ends on 1 January 2014 at
12:14:22 p.m. I don’t even want to think about calls that start on
28 February and go to the next day.</p>
<p id="so_instead_us">So, instead, use the <code class="literal">calendar:datetime_to_gregorian_seconds/1</code> function
to convert a date and time to the number of seconds since the year zero.
(I swear I am not making this up.) The argument to this function is a
tuple in the form:</p>
<pre class="screen" id="year_month_">{{<span class="emphasis"><em>year</em></span>, <span class="emphasis"><em>month</em></span>, <span class="emphasis"><em>day</em></span>}, {<span class="emphasis"><em>hours</em></span>, <span class="emphasis"><em>minutes</em></span>, <span class="emphasis"><em>seconds</em></span>}} %% for example
{{2013, 07, 14}, {14, 49, 21}}</pre>
<p id="round_up_any_nu">Round up any number of seconds to the next minute for ech call. Thus, if
a call lasts 4 minutes and 6 seconds, round it up to 5 minutes.
Hint: add 59 to the total number of seconds before you <code class="literal">div 60</code>.</p>
<div class="note" id="now_might_be_th_id1"><p id="now_might_be_th_id2">Now might be the time to rewrite part two so that your dates and times
are stored in the appropriate format. That way, you do the conversion
from string to tuple only once, instead of every time you ask
for a summary.</p></div>
<p id="here_is_the_sam">Here is the sample output.</p>
<pre class="programlisting" data-language="erl" id="cphone_ets"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">phone_ets</code><code class="p">).</code>
<code class="go">{ok,phone_ets}</code>
<code class="gp">2&gt;</code> <code class="nn">phone_ets</code><code class="p">:</code><code class="n">setup</code><code class="p">(</code><code class="s">"call_data.csv"</code><code class="p">).</code>
<code class="go">ok</code>
<code class="gp">3&gt;</code> <code class="nn">phone_ets</code><code class="p">:</code><code class="n">summary</code><code class="p">(</code><code class="s">"415-555-7871"</code><code class="p">).</code>
<code class="go">[{"415-555-7871",7}]</code>
<code class="gp">4&gt;</code> <code class="nn">phone_ets</code><code class="p">:</code><code class="n">summary</code><code class="p">().</code>
<code class="go">[{"946-555-9760",3},</code>
<code class="go"> {"415-555-7871",7},</code>
<code class="go"> {"729-555-8855",6},</code>
<code class="go"> {"301-555-0433",12},</code>
<code class="go"> {"213-555-0172",9},</code>
<code class="go"> {"650-555-3326",11}]</code></pre>
<p id="see_a_suggested_id24"><a class="link" href="apa.html#SOLUTION10-ET01" title="Solution 10-1">See a suggested solution in Appendix A.</a></p>
</div>
</div>
<div class="sect1" data-original-filename="ch10-storing-structured-data.asciidoc" id="CH10-ET02">
<div class="titlepage"><div><div><h2 class="title">Étude 10-2: Using Mnesia</h2></div></div></div>
<p id="i_have_good_new">I have good news and bad news. First, the bad news. Mnesia is <span class="emphasis"><em>not</em></span>
a relational detabase management system. If you try to use a query
list comprehension to join three tables, Erlang will complain that joins
with more than two tables are not efficient.</p>
<p id="now_the_good_n">Now, the good news. While trying to find a way around this, I discovered
something about query list comprehensions that is really pretty neat, and I’m
happy to share it with you.</p>
<p id="in_this_tude__id3">In this étude, you will use add a table of customer names and
use Mnesia query list comprehensions to join data
from those tables when producing a summary.</p>
<div class="sect2" id="_part_one_3">
<div class="titlepage"><div><div><h3 class="title">Part One</h3></div></div></div>
<p id="you_will_need_t">You will need to add a record for customers to <code class="literal">phone_records.hrl</code>. Its fields
will be:</p>
<div class="itemizedlist" id="phone_number_t_id1"><ul class="itemizedlist">
<li class="listitem">
Phone Number (this is the key)
</li>
<li class="listitem">
Customer’s last name
</li>
<li class="listitem">
Customer’s first name
</li>
<li class="listitem">
Customer’s middle name
</li>
<li class="listitem">
Rate paid per minute (float)
</li>
</ul></div>
<p id="again_you_may_">Again, you may name the record whatever you wish, and you may use any
field names you wish.</p>
</div>
<div class="sect2" id="_part_two_3">
<div class="titlepage"><div><div><h3 class="title">Part Two</h3></div></div></div>
<p id="in_a_module_nam_id3">In a module named <code class="literal">phone_mnesia</code>,
create the Mnesia tables for the two files. The function
that does this will be named <code class="literal">setup/2</code>, and its arguments will be the
names of the file containing the data.</p>
<p id="use_the_phone_c">Use the phone call data from <a class="link" href="">Étude 10-1</a>, and
use this data for the customers. Put it in a file named
<code class="literal">customer_data.csv</code> or whatever other name you wish.</p>
<pre class="screen" id="na">213-555-0172,Nakamura,Noriko,,0.12
301-555-0433,Ekberg,Erik,Engvald,0.07
415-555-7871,Alvarez,Alberto,Agulto,0.15
650-555-3326,Girard,Georges,Gaston,0.10
729-555-8855,Tran,Truong,Thai,0.09
838-555-1099,Smith,Samuel,Steven,0.10
946-555-9760,Bobrov,Bogdan,Borisovitch,0.14</pre>
<p id="you_could_write_id2">You could write two functions that all open a file, read data,
split it into fields, write the data to the Mnesia table, and then keep
going until end-of-file. These would share a lot of common code. Instead,
try writing just one function that does the reading, and pass a higher-order
function to it to do the appropriate "split-and-write" operation.</p>
<p id="when_i_solved_t">When I solved this problem, my <code class="literal">fill_table/5</code> function took these
arguments:</p>
<div class="itemizedlist" id="the_name_of_the_id1"><ul class="itemizedlist">
<li class="listitem">
The name of the table (an atom)
</li>
<li class="listitem">
The name of the file to read (a string)
</li>
<li class="listitem">
The function that adds the data (a higher-order <code class="literal">fun</code>)
</li>
<li class="listitem">
The <code class="literal">record_info</code> for the field
</li>
<li class="listitem">
The type of table. The phone call data is a <code class="literal">bag</code>, the
customer data is a <code class="literal">set</code>.
</li>
</ul></div>
</div>
<div class="sect2" id="_part_three_2">
<div class="titlepage"><div><div><h3 class="title">Part Three</h3></div></div></div>
<p id="write_a_functio_id2">Write a function named <code class="literal">summary/3</code> that takes a last name, first name,
and middle name. It produces a tuple that contains the person’s phone number,
total number of minutes, and total cost for those minutes.</p>
<p id="here_is_some_sa_id9">Here is some sample output.</p>
<pre class="programlisting" data-language="erl" id="cphone_mnes"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">phone_mnesia</code><code class="p">).</code>
<code class="go">{ok,phone_mnesia}</code>
<code class="gp">2&gt;</code> <code class="nn">phone_mnesia</code><code class="p">:</code><code class="n">setup</code><code class="p">(</code><code class="s">"call_data.csv"</code><code class="p">,</code> <code class="s">"customer_data.csv"</code><code class="p">).</code>
<code class="go">{atomic,ok}</code>
<code class="gp">3&gt;</code> <code class="nn">phone_mnesia</code><code class="p">:</code><code class="n">summary</code><code class="p">(</code><code class="s">"Smith"</code><code class="p">,</code> <code class="s">"Samuel"</code><code class="p">,</code> <code class="s">"Steven"</code><code class="p">).</code>
<code class="go">[{"838-555-1099",9,0.9}]</code>
<code class="gp">4&gt;</code> <code class="nn">phone_mnesia</code><code class="p">:</code><code class="n">summary</code><code class="p">(</code><code class="s">"Nakamura"</code><code class="p">,</code> <code class="s">"Noriko"</code><code class="p">,</code> <code class="s">""</code><code class="p">).</code>
<code class="go">[{"213-555-0172",9,1.08}]</code></pre>
<p id="as_promised_he">As promised, here’s the good news about query list comprehensions.
In this module, you need to access the
customer table to match the phone number to the name when collecting the
calls for the customer. You also need to access the customer table in
order to access the customer’s rate per minute. You don’t want to have
to write the specification for the guards on the customer table twice.</p>
<p id="as_introducing_">As
<a class="ulink" href="http://shop.oreilly.com/product/0636920025818.do" target="_top">Introducing Erlang</a>
notes, "you can use the <code class="literal">qlc:q</code> function to hold a
list comprehension and the <code class="literal">qlc:e</code> function to process it." Specifically,
the <code class="literal">qlc:q</code> function returns a <span class="emphasis"><em>query handle</em></span> which you can evaluate
and which you can also use in place of a list name in a query list
comprehension.</p>
<p id="heres_an_examp">Here’s an example. Let’s say you have tables of people and their pets.
In the <code class="literal">pet</code> table, the <code class="literal">owner_id</code> references the <code class="literal">id_number</code> of someone
in the <code class="literal">person</code> table.</p>
<pre class="programlisting" data-language="erlang" id="recordperson_id1"><code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">person</code><code class="p">,</code>
  <code class="p">{</code><code class="n">id_number</code><code class="p">,</code> <code class="n">name</code><code class="p">,</code> <code class="n">age</code><code class="p">,</code> <code class="n">gender</code><code class="p">,</code> <code class="n">city</code><code class="p">,</code> <code class="n">amount_owed</code><code class="p">}).</code>
<code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">animal</code><code class="p">,</code>
  <code class="p">{</code><code class="n">id_number</code><code class="p">,</code> <code class="n">name</code><code class="p">,</code> <code class="n">species</code><code class="p">,</code> <code class="n">gender</code><code class="p">,</code> <code class="n">owner_id</code><code class="p">}).</code></pre>
<p id="you_could_do_a_">You could do a query like this to find a
specific set of people, and then to find information about their pets:</p>
<pre class="programlisting" data-language="erlang" id="get_info__p"><code class="nf">get_info</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">People</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
      <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[</code> <code class="nv">P</code> <code class="p">||</code>
        <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
        <code class="nv">P</code><code class="nl">#person.age</code> <code class="o">&gt;=</code> <code class="mi">21</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.gender</code> <code class="o">==</code> <code class="s">"M"</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.city</code> <code class="o">==</code> <code class="s">"Podunk"</code><code class="p">]</code>
        <code class="p">)</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>

  <code class="nv">Pets</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
      <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[{</code><code class="nv">A</code><code class="nl">#animal.name</code><code class="p">,</code> <code class="nv">A</code><code class="nl">#animal.species</code><code class="p">,</code> <code class="nv">P</code><code class="nl">#person.name</code><code class="p">}</code> <code class="p">||</code>
        <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
        <code class="nv">P</code><code class="nl">#person.age</code> <code class="o">&gt;=</code> <code class="mi">21</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.gender</code> <code class="o">==</code> <code class="s">"M"</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.city</code> <code class="o">==</code> <code class="s">"Podunk"</code><code class="p">,</code>
        <code class="nv">A</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">animal</code><code class="p">),</code>
        <code class="nv">A</code><code class="nl">#animal.owner_id</code> <code class="o">==</code> <code class="nv">P</code><code class="nl">#person.id_number</code><code class="p">])</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>
  <code class="p">[</code><code class="nv">People</code><code class="p">,</code> <code class="nv">Pets</code><code class="p">].</code></pre>
<p id="to_avoid_duplic">To avoid duplicating the list and guards for the person table, you can make a
query list handle for that query and use it again in the animal search. Note
that you don’t have to be in a transacation to create a query handle,
but you must be in a transaction to process it.</p>
<pre class="programlisting" data-language="erl" id="get_info_easier"><code class="go">get_info_easier() -&gt;</code>

<code class="go">  %% "Pre-process" the list comprehension for finding people</code>

<code class="go">  QHandle = qlc:q( [ P ||</code>
<code class="go">    P &lt;- mnesia:table(person),</code>
<code class="go">    P#person.age &gt;= 21,</code>
<code class="go">    P#person.gender == "M",</code>
<code class="go">    P#person.city == "Podunk"]</code>
<code class="go">  ),</code>

<code class="go">  %% Evaluate it to retrieve the people you want</code>

<code class="go">  People = mnesia:transaction(</code>
<code class="go">    fun() -&gt; qlc:e( QHandle ) end</code>
<code class="go">  ),</code>

<code class="go">  %% And use the handle again when retrieving</code>
<code class="go">  %% information about their pets</code>

<code class="go">  Pets = mnesia:transaction(</code>
<code class="go">    fun() -&gt; qlc:e(</code>
<code class="go">      qlc:q( [{A#animal.name, A#animal.species, P#person.name} ||</code>
<code class="go">        P &lt;- QHandle,</code>
<code class="go">        A &lt;- mnesia:table(animal),</code>
<code class="go">        A#animal.owner_id == P#person.id_number])</code>
<code class="go">      )</code>
<code class="go">    end</code>
<code class="go">  ),</code>
<code class="go">  [People, Pets].</code></pre>
<p id="see_a_suggested_id25"><a class="link" href="apa.html#SOLUTION10-ET02" title="Solution 10-2">See a suggested solution in Appendix A.</a></p>
</div>
</div></section><section class="chapter" data-original-filename="ch11-otp.asciidoc" id="OTP"><div class="titlepage"><div><div><h1 class="title">Chapter 11. Getting Started with OTP</h1></div></div></div>
<p id="in_order_to_hel">In order to help me understand how the <code class="literal">gen_server</code> behavior works,
I drew the diagram shown in <a class="xref" href="ch11.html#FIG1101" title="Figure 11-1. Processing a call in gen_server">Figure 11-1</a>.</p>
<div class="figure-float"><div class="figure" id="FIG1101">
<div class="figure-contents"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/eter_1101.png" alt="Processing a call in gen_server"></div></div>
<div class="figure-title">Figure 11-1. Processing a call in <code class="literal">gen_server</code>
</div>
</div></div>
<p id="the_client_does">The client does a <code class="literal">gen_server:call(Server, Request)</code>. The server will
then call the <code class="literal">handle_call/3</code> function that you have provided in the
<code class="literal">Module</code> that you told <code class="literal">gen_server</code> to use. <code class="literal">gen_server</code> will send your
module the client’s <code class="literal">Request</code>, an identifier telling who the request is
<code class="literal">From</code>, and the server’s current <code class="literal">State</code>.</p>
<p id="your_handle_cal">Your <code class="literal">handle_call/3</code> function will fulfill the client’s <code class="literal">Request</code> and
send a <code class="literal">{reply, Reply, NewState}</code> tuple back to the server. It, in turn,
will send the <code class="literal">Reply</code> back to the client, and use the <code class="literal">NewState</code> to update
its state.</p>
<p id="in_introducing_">In <span class="emphasis"><em>Introducing Erlang</em></span> and in the next two études,
the client is you, using the shell. The module that handles the
client’s call is contained within the same module as the <code class="literal">gen_server</code>
framework, but, as the preceding diagram shows, it does not have to be.</p>
<div class="note" id="you_can_learn_m_id21"><p id="you_can_learn_m_id22">You can learn more about working with OTP basics in Chapters 11 and 12 of <span class="emphasis"><em>Erlang Programming</em></span>, Chapters 16 and 18 of <span class="emphasis"><em>Programming Erlang</em></span>, Chapter 4 of <span class="emphasis"><em>Erlang and OTP in Action</em></span>, and Chapters 14 through 20 of <span class="emphasis"><em>Learn You Some Erlang For Great Good!</em></span>.</p></div>
<div class="sect1" data-original-filename="ch11-otp.asciidoc" id="CH11-ET01">
<div class="titlepage"><div><div><h2 class="title">Étude 11-1: Get the Weather</h2></div></div></div>
<p id="in_this_tude__id4">In this étude, you will create a weather server using the <code class="literal">gen_server</code>
OTP behavior.This server will handle requests using a four-letter weather
station identifier and will return a brief summary of the weather. You may
also ask the server for a list of most recently accessed weather stations.</p>
<p id="here_is_some_sa_id10">Here is some sample output:</p>
<pre class="screen" id="cweather__id1">1&gt; c(weather).
{ok,weather}
2&gt; weather:start_link().
{ok,&lt;0.42.0&gt;}
3&gt; gen_server:call(weather, "KSJC").
{ok,[{location,"San Jose International Airport, CA"},
     {observation_time_rfc822,"Mon, 18 Feb 2013 13:53:00 -0800"},
     {weather,"Overcast"},
     {temperature_string,"51.0 F (10.6 C)"}]}
4&gt; gen_server:call(weather, "KITH").
{ok,[{location,"Ithaca / Tompkins County, NY"},
     {observation_time_rfc822,"Mon, 18 Feb 2013 16:56:00 -0500"},
     {weather,"A Few Clouds"},
     {temperature_string,"29.0 F (-1.6 C)"}]}
5&gt; gen_server:call(weather,"NONE").
{error,404}
6&gt; gen_server:cast(weather, "").
Most recent requests: ["KITH","KSJC"]</pre>
<div class="sect2" id="_obtaining_weather_data">
<div class="titlepage"><div><div><h3 class="title">Obtaining Weather Data</h3></div></div></div>
<p id="to_retrieve_a_w">To retrieve a web page, you must first call <code class="literal">inets:start/0</code>; you will
want to do this in your <code class="literal">init/1</code> code. Then, simply call
<code class="literal">httpc:request(<em class="replaceable"><code>url</code></em>)</code>, where <span class="emphasis"><em><code class="literal">url</code></em></span> is a string containing the URL
you want. In this case, you will use the
server provided by <a class="ulink" href="http://www.noaa.gov/" target="_top">National Oceanic and Atmospheric Administration</a>. This server accepts four-letter
weather station codes and returns an
XML file summarizing the current weather at that station. You request
this data with a URL in the form</p>
<p id="httpwweath"><code class="literal">http://w1.weather.gov/xml/current_obs/<em class="replaceable"><code>NNNN</code></em>.xml</code></p>
<p id="where_nnnn_is_t">where <span class="emphasis"><em><code class="literal">NNNN</code></em></span> is the station code.</p>
<p id="if_the_call_to_">If the call to <code class="literal">httpc:request/1</code> fails you will get a tuple of the form
<code class="literal">{error,<em class="replaceable"><code>information</code></em>}</code>.</p>
<p id="if_it_succeeds">If it succeeds, you will get a tuple in the form:</p>
<pre class="screen" id="okhttp">{ok,{{"HTTP/1.1",<span class="emphasis"><em>code</em></span>,"<span class="emphasis"><em>code message</em></span>"},
     [{"<span class="emphasis"><em>HTTP header attribute</em></span>","<span class="emphasis"><em>value</em></span>"},
      {"<span class="emphasis"><em>Another attribute</em></span>","<span class="emphasis"><em>another value</em></span>"}],
     "<span class="emphasis"><em>page contents</em></span>"}}</pre>
<p id="where_code_is_t">where <span class="emphasis"><em><code class="literal">code</code></em></span> is the return code (200 means the page was found,
404 means it’s missing, anything else is some sort of error).</p>
<p id="so_lets_say_y">So, let’s say you have successfully retrieved a station’s data. You will
then get page content that contains something like this:</p>
<pre class="screen" id="xml_version">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;?xml-stylesheet href="latest_ob.xsl" type="text/xsl"?&gt;
&lt;current_observation version="1.0"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="http://www.weather.gov/view/current_observation.xsd"&gt;
        &lt;credit&gt;NOAA's National Weather Service&lt;/credit&gt;
        &lt;credit_URL&gt;http://weather.gov/&lt;/credit_URL&gt;
        &lt;image&gt;
                &lt;url&gt;http://weather.gov/images/xml_logo.gif&lt;/url&gt;
                &lt;title&gt;NOAA's National Weather Service&lt;/title&gt;
                &lt;link&gt;http://weather.gov&lt;/link&gt;
        &lt;/image&gt;
        &lt;suggested_pickup&gt;15 minutes after the hour&lt;/suggested_pickup&gt;
        &lt;suggested_pickup_period&gt;60&lt;/suggested_pickup_period&gt;
        &lt;location&gt;San Jose International Airport, CA&lt;/location&gt;
        &lt;station_id&gt;KSJC&lt;/station_id&gt;
        &lt;latitude&gt;37.37&lt;/latitude&gt;
        &lt;longitude&gt;-121.93&lt;/longitude&gt;
        &lt;observation_time&gt;Last Updated on Feb 18 2013, 11:53 am PST&lt;/observation_time&gt;
  &lt;observation_time_rfc822&gt;Mon, 18 Feb 2013 11:53:00 -0800&lt;/observation_time_rfc822&gt;
        &lt;weather&gt;Overcast&lt;/weather&gt;
        &lt;temperature_string&gt;50.0 F (10.0 C)&lt;/temperature_string&gt;
        &lt;temp_f&gt;50.0&lt;/temp_f&gt;
        &lt;temp_c&gt;10.0&lt;/temp_c&gt;
        &lt;relative_humidity&gt;77&lt;/relative_humidity&gt;
        &lt;wind_string&gt;Calm&lt;/wind_string&gt;
        &lt;wind_dir&gt;North&lt;/wind_dir&gt;
        &lt;wind_degrees&gt;0&lt;/wind_degrees&gt;
        &lt;wind_mph&gt;0.0&lt;/wind_mph&gt;
        &lt;wind_kt&gt;0&lt;/wind_kt&gt;
        &lt;pressure_string&gt;1017.7 mb&lt;/pressure_string&gt;
        &lt;pressure_mb&gt;1017.7&lt;/pressure_mb&gt;
        &lt;pressure_in&gt;30.05&lt;/pressure_in&gt;
        &lt;dewpoint_string&gt;43.0 F (6.1 C)&lt;/dewpoint_string&gt;
        &lt;dewpoint_f&gt;43.0&lt;/dewpoint_f&gt;
        &lt;dewpoint_c&gt;6.1&lt;/dewpoint_c&gt;
        &lt;visibility_mi&gt;10.00&lt;/visibility_mi&gt;
        &lt;icon_url_base&gt;http://forecast.weather.gov/images/wtf/small/&lt;/icon_url_base&gt;
        &lt;two_day_history_url&gt;http://www.weather.gov/data/obhistory/KSJC.html&lt;/two_day_history_url&gt;
        &lt;icon_url_name&gt;ovc.png&lt;/icon_url_name&gt;
        &lt;ob_url&gt;http://www.weather.gov/data/METAR/KSJC.1.txt&lt;/ob_url&gt;
        &lt;disclaimer_url&gt;http://weather.gov/disclaimer.html&lt;/disclaimer_url&gt;
        &lt;copyright_url&gt;http://weather.gov/disclaimer.html&lt;/copyright_url&gt;
        &lt;privacy_policy_url&gt;http://weather.gov/notice.html&lt;/privacy_policy_url&gt;
&lt;/current_observation&gt;</pre>
</div>
<div class="sect2" id="_parsing_the_data">
<div class="titlepage"><div><div><h3 class="title">Parsing the Data</h3></div></div></div>
<p id="you_now_have_to">You now have to parse that XML data. Luckily, Erlang comes with the
<code class="literal">xmerl_scan:string/1</code> function, which will parse your XML into a rather
imposing-looking tuple. Here is what it looks like for a very simple
bit of XML:</p>
<pre class="programlisting" data-language="erl" id="xml__pets"><code class="gp">1&gt;</code> <code class="nv">XML</code> <code class="o">=</code> <code class="s">"&lt;pets&gt;&lt;cat&gt;Misha&lt;/cat&gt;&lt;dog&gt;Lady&lt;/dog&gt;&lt;/pets&gt;"</code><code class="p">.</code>
<code class="go">"&lt;pets&gt;&lt;cat&gt;Misha&lt;/cat&gt;&lt;dog&gt;Lady&lt;/dog&gt;&lt;/pets&gt;"</code>
<code class="gp">3&gt;</code> <code class="nv">Result</code> <code class="o">=</code> <code class="nn">xmerl_scan</code><code class="p">:</code><code class="n">string</code><code class="p">(</code><code class="nv">XML</code><code class="p">).</code>
<code class="go">{{xmlElement,pets,pets,[],</code>
<code class="go">     {xmlNamespace,[],[]},</code>
<code class="go">     [],1,[],</code>
<code class="go">     [{xmlElement,cat,cat,[],</code>
<code class="go">                  {xmlNamespace,[],[]},</code>
<code class="go">                  [{pets,1}],</code>
<code class="go">                  1,[],</code>
<code class="go">                  [{xmlText,[{cat,1},{pets,1}],1,[],"Misha",text}],</code>
<code class="go">                  [],</code>
<code class="go">                  "/home/david/etudes/code/ch11-01",</code>
<code class="go">                  undeclared},</code>
<code class="go">      {xmlElement,dog,dog,[],</code>
<code class="go">                  {xmlNamespace,[],[]},</code>
<code class="go">                  [{pets,1}],</code>
<code class="go">                  2,[],</code>
<code class="go">                  [{xmlText,[{dog,2},{pets,1}],1,[],"Lady",text}],</code>
<code class="go">                  [],undefined,undeclared}],</code>
<code class="go">     [],</code>
<code class="go">     "/home/david/etudes/code/ch11-01",</code>
<code class="go">     undeclared},</code>
<code class="go">     []}</code></pre>
<p id="ye_cats_how_yo">Ye cats! How you do work with that?! First, put this at the top of your
code so that you can use <code class="literal">xmerl</code>'s record definitions:</p>
<pre class="programlisting" data-language="erlang" id="include_libx"><code class="p">-</code><code class="ni">include_lib</code><code class="p">(</code><code class="s">"xmerl/include/xmerl.hrl"</code><code class="p">).</code></pre>
<p id="you_can_see_all">You can see all the details of the records at
<a class="ulink" href="http://erlang.googlecode.com/svn-history/r160/trunk/lib/xmerl/include/xmerl.hrl" target="_top">http://erlang.googlecode.com/svn-history/r160/trunk/lib/xmerl/include/xmerl.hrl</a></p>
<p id="then_copy_and_">Then, copy and paste this into your code. You could figure it out
on your own, but that would take away from setting up the server, which is
the whole point of this étude.</p>
<pre class="programlisting" data-language="erlang" id="take_raw_xml"><code class="c">%% Take raw XML data and return a set of {key, value} tuples</code>

<code class="nf">analyze_info</code><code class="p">(</code><code class="nv">WebData</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="c">%% list of fields that you want to extract</code>
  <code class="nv">ToFind</code> <code class="o">=</code> <code class="p">[</code><code class="n">location</code><code class="p">,</code> <code class="n">observation_time_rfc822</code><code class="p">,</code> <code class="n">weather</code><code class="p">,</code> <code class="n">temperature_string</code><code class="p">],</code>

  <code class="c">%% get just the parsed data from the XML parse result</code>
  <code class="nv">Parsed</code> <code class="o">=</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">xmerl_scan</code><code class="p">:</code><code class="n">string</code><code class="p">(</code><code class="nv">WebData</code><code class="p">)),</code>

  <code class="c">%% This is the list of all children under &lt;current_observation&gt;</code>
  <code class="nv">Children</code> <code class="o">=</code> <code class="nv">Parsed</code><code class="nl">#xmlElement.content</code><code class="p">,</code>

  <code class="c">%% Find only XML elements and extract their names and their text content.</code>
  <code class="c">%% You need the guard so that you don't process the newlines in the</code>
  <code class="c">%% data (they are XML text descendants of the root element).</code>
  <code class="nv">ElementList</code> <code class="o">=</code> <code class="p">[{</code><code class="nv">El</code><code class="nl">#xmlElement.name</code><code class="p">,</code> <code class="n">extract_text</code><code class="p">(</code><code class="nv">El</code><code class="nl">#xmlElement.content</code><code class="p">)}</code>
    <code class="p">||</code> <code class="nv">El</code> <code class="o">&lt;-</code> <code class="nv">Children</code><code class="p">,</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nv">El</code><code class="p">)</code> <code class="o">==</code> <code class="n">xmlElement</code><code class="p">],</code>

  <code class="c">%% ElementList is now a keymap; get the data you want from it.</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">Item</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keyfind</code><code class="p">(</code><code class="nv">Item</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">ElementList</code><code class="p">)</code> <code class="k">end</code><code class="p">,</code> <code class="nv">ToFind</code><code class="p">).</code>


<code class="c">%% Given the parsed content of an XML element, return its first node value</code>
<code class="c">%% (if it's a text node); otherwise return the empty string.</code>

<code class="nf">extract_text</code><code class="p">(</code><code class="nv">Content</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Item</code> <code class="o">=</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">Content</code><code class="p">),</code>
  <code class="k">case</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nv">Item</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">xmlText</code> <code class="o">-&gt;</code> <code class="nv">Item</code><code class="nl">#xmlText.value</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="s">""</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
<div class="sect2" id="_set_up_a_supervisor">
<div class="titlepage"><div><div><h3 class="title">Set up a Supervisor</h3></div></div></div>
<p id="finally_you_ca">Finally, you can easily crash the server by handing it a number instead
of a string for the station code.  Set up a supervisor to restart the
server when it crashes.</p>
<pre class="programlisting" data-language="erl" id="cweather_su"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">weather_sup</code><code class="p">).</code>
<code class="go">{ok,weather_sup}</code>
<code class="gp">2&gt;</code> <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">Pid</code><code class="p">}</code> <code class="o">=</code> <code class="nn">weather_sup</code><code class="p">:</code><code class="n">start_link</code><code class="p">().</code>
<code class="go">{ok,&lt;0.38.0&gt;}</code>
<code class="gp">3&gt;</code> <code class="nb">unlink</code><code class="p">(</code><code class="nv">Pid</code><code class="p">).</code>
<code class="go">true</code>
<code class="gp">4&gt;</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="n">weather</code><code class="p">,</code> <code class="s">"KGAI"</code><code class="p">).</code>
<code class="go">{ok,[{location,"Montgomery County Airpark, MD"},</code>
<code class="go">     {observation_time_rfc822,"Mon, 18 Feb 2013 17:55:00 -0500"},</code>
<code class="go">     {weather,"Fair"},</code>
<code class="go">     {temperature_string,"37.0 F (3.0 C)"}]}</code>
<code class="gp">5&gt;</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="n">weather</code><code class="p">,</code> <code class="mi">1234</code><code class="p">).</code>
<code class="gt">** exception exit: {{badarg,[{erlang,'++',[1234,".xml"],[]},</code>
<code class="go">                             {weather,get_weather,2,[{file,"weather.erl"},{line,43}]},</code>
<code class="go">                             {weather,handle_call,3,[{file,"weather.erl"},{line,23}]},</code>
<code class="go">                             {gen_server,handle_msg,5,</code>
<code class="go">                                         [{file,"gen_server.erl"},{line,588}]},</code>
<code class="go">                             {proc_lib,init_p_do_apply,3,</code>
<code class="go">                                       [{file,"proc_lib.erl"},{line,227}]}]},</code>
<code class="go">                    {gen_server,call,[weather,1234]}}</code>
<code class="go">     in function  gen_server:call/2 (gen_server.erl, line 180)</code>

<code class="go">=INFO REPORT==== 18-Feb-2013::15:57:19 ===</code>
<code class="go">    application: inets</code>
<code class="go">    exited: stopped</code>
<code class="go">    type: temporary</code>
<code class="gp">6&gt;</code>
<code class="go">=ERROR REPORT==== 18-Feb-2013::15:57:19 ===</code>
<code class="gt">** Generic server weather terminating</code>
<code class="gt">** Last message in was 1234</code>
<code class="gt">** When Server state == ["KGAI"]</code>
<code class="gt">** Reason for termination ==</code>
<code class="gt">** {badarg,[{erlang,'++',[1234,".xml"],[]},</code>
<code class="go">            {weather,get_weather,2,[{file,"weather.erl"},{line,43}]},</code>
<code class="go">            {weather,handle_call,3,[{file,"weather.erl"},{line,23}]},</code>
<code class="go">            {gen_server,handle_msg,5,[{file,"gen_server.erl"},{line,588}]},</code>
<code class="go">            {proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,227}]}]}</code>

<code class="gp">6&gt;</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="n">weather</code><code class="p">,</code> <code class="s">"KCMI"</code><code class="p">).</code>
<code class="go">{ok,[{location,"Champaign / Urbana, University of Illinois-Willard, IL"},</code>
<code class="go">     {observation_time_rfc822,"Mon, 18 Feb 2013 16:53:00 -0600"},</code>
<code class="go">     {weather,"Overcast and Breezy"},</code>
<code class="go">     {temperature_string,"47.0 F (8.3 C)"}]}</code></pre>
<p id="see_a_suggested_id26"><a class="link" href="apa.html#SOLUTION11-ET01" title="Solution 11-1">See a suggested solution in Appendix A.</a></p>
</div>
</div>
<div class="sect1" data-original-filename="ch11-otp.asciidoc" id="CH11-ET02">
<div class="titlepage"><div><div><h2 class="title">Étude 11-2: Wrapper Functions</h2></div></div></div>
<p id="in_the_previous_id1">In the previous étude, you made calls directly to <code class="literal">gen_server</code>. This is
great for experimentation, but in a real application, you do not want
other modules to have to know the exact format of the arguments you gave
to <code class="literal">gen_server:call/2</code> or <code class="literal">gen_server:cast/2</code>. Instead, you provide a
"wrapper" function that makes the actual call. In this way, you can change
the internal format of your server requests while the interface you present
to other users remains unchanged.</p>
<p id="in_this_tude__id5">In this étude, then, you will provide two wrapper functions
<code class="literal">report/1</code> and <code class="literal">recent/0</code>. The <code class="literal">report/1</code> function will take a station name
as its argument and do the appropriate <code class="literal">gen_server:call</code>; the
<code class="literal">recent/0</code> function will do an appropriate <code class="literal">gen_server:cast</code>. Everything
else in your code will remain unchanged. You will, of course, have to add
<code class="literal">report/1</code> and <code class="literal">recent/0</code> to the <code class="literal">-export</code> list.</p>
<p id="heres_some_sam">Here’s some sample output.</p>
<pre class="programlisting" data-language="erl" id="cweather__id2"><code class="gp">1&gt;</code> <code class="n">c</code><code class="p">(</code><code class="n">weather</code><code class="p">).</code>
<code class="go">{ok,weather}</code>
<code class="gp">2&gt;</code> <code class="nn">weather</code><code class="p">:</code><code class="n">start_link</code><code class="p">().</code>
<code class="go">{ok,&lt;0.45.0&gt;}</code>
<code class="gp">3&gt;</code> <code class="nn">weather</code><code class="p">:</code><code class="n">report</code><code class="p">(</code><code class="s">"KSJC"</code><code class="p">).</code>
<code class="go">{ok,[{location,"San Jose International Airport, CA"},</code>
<code class="go">     {observation_time_rfc822,"Tue, 26 Feb 2013 17:53:00 -0800"},</code>
<code class="go">     {weather,"Fair"},</code>
<code class="go">     {temperature_string,"56.0 F (13.3 C)"}]}</code>
<code class="gp">4&gt;</code> <code class="nn">weather</code><code class="p">:</code><code class="n">report</code><code class="p">(</code><code class="s">"XYXY"</code><code class="p">).</code>
<code class="go">{error,404}</code>
<code class="gp">5&gt;</code> <code class="nn">weather</code><code class="p">:</code><code class="n">report</code><code class="p">(</code><code class="s">"KCMI"</code><code class="p">).</code>
<code class="go">{ok,[{location,"Champaign / Urbana, University of Illinois-Willard, IL"},</code>
<code class="go">     {observation_time_rfc822,"Tue, 26 Feb 2013 19:53:00 -0600"},</code>
<code class="go">     {weather,"Light Rain Fog/Mist"},</code>
<code class="go">     {temperature_string,"34.0 F (1.1 C)"}]}</code>
<code class="gp">6&gt;</code> <code class="nn">weather</code><code class="p">:</code><code class="n">recent</code><code class="p">().</code>
<code class="go">Most recent requests: ["KCMI","KSJC"]</code></pre>
<p id="see_a_suggested_id27"><a class="link" href="apa.html#SOLUTION11-ET02" title="Solution 11-2">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch11-otp.asciidoc" id="CH11-ET03">
<div class="titlepage"><div><div><h2 class="title">Étude 11-3: Independent Server and Client</h2></div></div></div>
<p id="in_the_previous_id2">In the previous études, the client and server have been running in
the same shell. In this étude, you will make the server available to
clients running in other shells.</p>
<p id="to_make_a_node_">To make a node available to other nodes, you need to name the node by using
the <code class="literal">-name</code> option when starting <code class="literal">erl</code>. It looks like this:</p>
<pre class="programlisting" data-language="erl" id="michelelocalho_id1"><code class="go">michele@localhost $ erl -name serverNode</code>
<code class="go">Erlang R15B02 (erts-5.9.2) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</code>

<code class="go">Eshell V5.9.2  (abort with ^G)</code>
<code class="go">(serverNode@localhost.gateway.2wire.net)1&gt;</code></pre>
<p id="this_is_a_long_">This is a <span class="emphasis"><em>long name</em></span>. You can also set up a node with a short name by using
the <code class="literal">-sname</code> option:</p>
<pre class="programlisting" data-language="erl" id="michelelocalho_id2"><code class="go">michele@localhost $ erl -sname serverNode</code>
<code class="go">Erlang R15B02 (erts-5.9.2) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</code>

<code class="go">Eshell V5.9.2  (abort with ^G)</code>
<code class="go">(serverNode@localhost)1&gt;</code></pre>
<div class="warning" id="if_you_set_up_a_id1"><p id="if_you_set_up_a_id2">If you set up a node in this way, <span class="emphasis"><em>any</em></span> other node can connect
to it and do any shell commands at all. In order to prevent this,
you may use the <code class="literal">-setcookie <em class="replaceable"><code>Cookie</code></em></code> when starting <code class="literal">erl</code>. Then,
only nodes that have the same <span class="emphasis"><em>Cookie</em></span> (which is an atom) can
connect to your node.</p></div>
<p id="to_connect_to_a">To connect to a node, use the <code class="literal">net_adm:ping/1</code> function, and give it
the name of the server you want to connect to as its argument. If you
connect succesfully, the function will return the atom <code class="literal">pong</code>; otherwise,
it will return <code class="literal">pang</code>.</p>
<p id="here_is_an_exam">Here is an example. First, start a shell with a (very bad) secret
cookie:</p>
<pre class="programlisting" data-language="erl" id="michelelocalho_id3"><code class="go">michele@localhost $ erl -sname serverNode -setcookie chocolateChip</code>
<code class="go">Erlang R15B02 (erts-5.9.2) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</code>

<code class="go">Eshell V5.9.2  (abort with ^G)</code>
<code class="go">(serverNode@localhost)1&gt;</code></pre>
<p id="now_open_anoth">Now, open another terminal window, start a shell with a different
cookie, and try to connect to the server node. I have purposely used
a different user name to show that this works too.</p>
<pre class="programlisting" data-language="erl" id="stevelocalhost_id1"><code class="go">steve@localhost $ erl -sname clientNode -setcookie oatmealRaisin</code>
<code class="go">Erlang R15B02 (erts-5.9.2) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</code>

<code class="go">Eshell V5.9.2  (abort with ^G)</code>
<code class="go">(clientNode@localhost)1&gt; net_adm:ping(serverNode@localhost).</code>
<code class="go">pang</code></pre>
<p id="the_server_node">The server node will detect this attempt and let you know about it:</p>
<pre class="programlisting" data-language="erl" id="error_report"><code class="go">=ERROR REPORT==== 28-Feb-2013::22:41:38 ===</code>
<code class="gt">** Connection attempt from disallowed node clientNode@localhost **</code></pre>
<p id="quit_the_client">Quit the client shell, and restart it with a matching cookie, and
all will be well.</p>
<pre class="programlisting" data-language="erl" id="stevelocalhost_id2"><code class="go">steve@localhost erltest $ erl -sname clientNode -setcookie chocolateChip</code>
<code class="go">Erlang R15B02 (erts-5.9.2) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</code>

<code class="go">Eshell V5.9.2  (abort with ^G)</code>
<code class="go">(clientNode@localhost)1&gt; net_adm:ping(serverNode@localhost).</code>
<code class="go">pong</code></pre>
<p id="to_make_your_we">To make your weather report server available to other nodes, you
need to do these things:</p>
<div class="itemizedlist" id="in_the_start_li_id1"><ul class="itemizedlist">
<li class="listitem">
In the <code class="literal">start_link/0</code> convenience method, set the first argument to
<code class="literal">gen_server:start_link/4</code> to <code class="literal">{global, ?SERVER}</code> instead of
<code class="literal">{local, ?SERVER}</code>
</li>
<li class="listitem">
In calls to <code class="literal">gen_server:call/2</code> and <code class="literal">gen_server:cast/2</code>, replace the
module name <code class="literal">weather</code> with <code class="literal">{global, weather}</code>
</li>
<li class="listitem">
Add a <code class="literal">connect/1</code> function that takes the server node name as its
argument. This function will use <code class="literal">net_adm:ping/1</code> to attempt to contact
the server. It provides appropriate feedback when it succeeds or fails.
</li>
</ul></div>
<p id="here_is_what_it">Here is what it looks like when one user starts the server in a shell.</p>
<pre class="programlisting" data-language="erl" id="michelelocalho_id4"><code class="go">michele@localhost $ erl -sname serverNode -setcookie meteorology</code>
<code class="go">Erlang R15B02 (erts-5.9.2) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</code>

<code class="go">Eshell V5.9.2  (abort with ^G)</code>
<code class="go">(serverNode@localhost)1&gt; weather:start_link().</code>
<code class="go">{ok,&lt;0.39.0&gt;}</code></pre>
<p id="and_heres_anot">And here’s another user in a different shell, calling upon the server.</p>
<pre class="programlisting" data-language="erl" id="stevelocalhost_id3"><code class="go">steve@localhost $ erl -sname clientNode -setcookie meteorology</code>
<code class="go">Erlang R15B02 (erts-5.9.2) [source] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]</code>

<code class="go">Eshell V5.9.2  (abort with ^G)</code>
<code class="go">(clientNode@localhost)1&gt; weather:connect(serverNode@localhost).</code>
<code class="go">Connected to server.</code>
<code class="go">ok</code>
<code class="go">(clientNode@localhost)2&gt; weather:report("KSJC").</code>
<code class="go">{ok,[{location,"San Jose International Airport, CA"},</code>
<code class="go">     {observation_time_rfc822,"Thu, 28 Feb 2013 21:53:00 -0800"},</code>
<code class="go">     {weather,"Fair"},</code>
<code class="go">     {temperature_string,"52.0 F (11.1 C)"}]}</code>
<code class="go">(clientNode@localhost)3&gt; weather:report("KITH").</code>
<code class="go">{ok,[{location,"Ithaca / Tompkins County, NY"},</code>
<code class="go">     {observation_time_rfc822,"Fri, 01 Mar 2013 00:56:00 -0500"},</code>
<code class="go">     {weather,"Light Snow"},</code>
<code class="go">     {temperature_string,"31.0 F (-0.5 C)"}]}</code>
<code class="go">(clientNode@localhost)4&gt; weather:recent().</code>
<code class="go">ok</code></pre>
<p id="whoa_what_happ">Whoa! What happened to the output from that last call?
The problem is that the <code class="literal">weather:recent/0</code> call does
an <code class="literal">io:format/3</code> call; that output will go to the server shell, since the
server is running that code, not the client. Bonus points if you fix this
problem by changing <code class="literal">weather:recent/0</code> from using
<code class="literal">gen_server:cast/2</code> to use <code class="literal">gen_server:call/2</code> instead to return
the recently reported weather stations as its reply.</p>
<p id="theres_one_mor">There’s one more question that went through my mind after I implemented
my solution: how did I know that the client was calling the <code class="literal">weather</code> code
running on the server and not the <code class="literal">weather</code> code in its own shell? It was
easy to find out: I stopped the server.</p>
<pre class="programlisting" data-language="erl" id="servernodeloc"><code class="go">(serverNode@localhost)2&gt;</code>
<code class="go">User switch command</code>
<code class="go"> --&gt; q</code>
<code class="go">michele@localhost $</code></pre>
<p id="then_i_had_the_">Then I had the client try to get a weather report.</p>
<pre class="programlisting" data-language="erl" id="clientnodeloc"><code class="go">(clientNode@localhost)5&gt; weather:report("KSJC").</code>
<code class="gt">** exception exit: {noproc,{gen_server,call,[{global,weather},"KSJC"]}}</code>
<code class="go">     in function  gen_server:call/2 (gen_server.erl, line 180)</code></pre>
<p id="the_fact_that_i">The fact that it failed told me that yes, indeed, the client was getting its
information from the server.</p>
<p id="see_a_suggested_id28"><a class="link" href="apa.html#SOLUTION11-ET03" title="Solution 11-3">See a suggested solution in Appendix A.</a></p>
</div>
<div class="sect1" data-original-filename="ch11-otp.asciidoc" id="CH11-ET04">
<div class="titlepage"><div><div><h2 class="title">Étude 11-4: Chat Room</h2></div></div></div>
<p id="in_the_previous_id3">In the previous études, the client simply made a call to the server, and
didn’t do any processing of its own. In this étude, you will create a
"chat room" with a chat server and multiple clients, much as you see in
<a class="xref" href="ch11.html#FIG1102" title="Server with multiple clients">Server with multiple clients</a>.</p>
<p id="FIG1102"><span class="formalpara-title">Server with multiple clients. </span><span class="inlinemediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/eter_1102.png"></span></p>
<p id="the_interesting">The interesting part of this program is that the client will <span class="emphasis"><em>also</em></span> be
a <code class="literal">gen_server</code>, as shown in <a class="xref" href="ch11.html#FIG1103" title="Client as a gen_server">Client as a <code class="literal">gen_server</code></a>.</p>
<p id="FIG1103"><span class="formalpara-title">Client as a <code class="literal">gen_server</code>. </span><span class="inlinemediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000000726/images/eter_1103.png"></span></p>
<p id="up_until_now_y">Up until now, you have been using a module name as the first argument to
<code class="literal">gen_server:call/2</code>, and in the previous étude, you used
<code class="literal">net_adm:ping/1</code> to connect to a server.</p>
<p id="in_this_tude__id6">In this étude, you won’t need <code class="literal">net_adm:ping/1</code>. Instead,
you will use a tuple of the form
<code class="literal">{Module, Node}</code> to directly connect to the node you want. So, for
example, if you want to make a call to a module named <code class="literal">chatroom</code> on
a node named <code class="literal">lobby@localhost</code>, you would do something like this:</p>
<p id="gen_servercall"><code class="literal">gen_server:call({chatroom, <code class="email">&lt;<a class="email" href="mailto:lobby@localhost">lobby@localhost</a>&gt;</code>}, Request)</code></p>
<p id="this_means_you_">This means
you won’t need to connect with <code class="literal">net_adm:ping/1</code>.</p>
<p id="here_is_my_desi">Here is my design for the solution. You, of course, may come up
with an entirely different and better design.</p>
<p id="my_solution_has">My solution has two modules, both of which use the <code class="literal">gen_server</code> behavior.</p>
<div class="sect2" id="_the_literal_chatroom_literal_module">
<div class="titlepage"><div><div><h3 class="title">The <code class="literal">chatroom</code> Module</h3></div></div></div>
<p id="the_first_modul">The first module, <code class="literal">chatroom</code>, will keep as its state a list of tuples, one
tuple for each person in the chat. Each tuple has the format
<code class="literal">{{UserName, UserServer}, Pid}</code>. The Pid is the one that <code class="literal">gen_server:call</code>
receives in the <code class="literal">From</code> parameter; it’s guaranteed to be unique for each
person in chat.</p>
<p id="the_handle_call_id1">The <code class="literal">handle_call/3</code> function will accept the following requests.</p>
<div class="variablelist" id="login_usernam"><dl class="variablelist">
<dt><span class="term">
<code class="literal">{login, UserName, ServerName}</code>
</span></dt>
<dd>
Adds the user name, server name, and Pid (which is in the <code class="literal">From</code> parameter)
to the server’s state. Don’t allow a duplicate user name from the same server.
</dd>
<dt><span class="term">
<code class="literal">logout</code>
</span></dt>
<dd>
Removes the user from the state list.
</dd>
<dt><span class="term">
<code class="literal">{say, Text}</code>
</span></dt>
<dd>
Sends the given Text to all the other users in the chat room. Use
<code class="literal">gen_server:cast/2</code> to send the message.
</dd>
<dt><span class="term">
<code class="literal">users</code>
</span></dt>
<dd>
Returns the list of names and servers for all people currently in the
chat room.
</dd>
<dt><span class="term">
<code class="literal">{who, Person, ServerName}</code>
</span></dt>
<dd>
Return the profile of the given person/server. (This is "extra credit";
see the following details about the <code class="literal">person</code> module). It works by
calling the <code class="literal">person</code> module at <code class="literal">ServerName</code> and giving it a
<code class="literal">get_profile</code> request.
</dd>
</dl></div>
</div>
<div class="sect2" id="_the_literal_person_literal_module">
<div class="titlepage"><div><div><h3 class="title">The <code class="literal">person</code> Module</h3></div></div></div>
<p id="the_other_modul">The other module, <code class="literal">person</code>, has a <code class="literal">start_link/1</code> function; the argument
is the node name of the chat room server. This will be passed on to the
<code class="literal">init/1</code> function. This is stored in the server’s state. I did this because
many other calls need to know the chat room server’s name, and keeping it in the
person’s state seemed a reasonable choice.</p>
<p id="for_extra_credi">For extra credit, the state will also include the person’s profile, which
is a list of <code class="literal">{Key, Value}</code> tuples.</p>
<p id="the_handle_call_id2">The <code class="literal">handle_call/3</code> takes care of these requests:</p>
<div class="variablelist" id="get_chat_node_r"><dl class="variablelist">
<dt><span class="term">
<code class="literal">get_chat_node</code>
</span></dt>
<dd>
Returns the chat node name that’s stored in the server’s state. (Almost all of
the wrapper functions to be described in the following section will need
the chat node name.)
</dd>
<dt><span class="term">
<code class="literal">get_profile</code>
</span></dt>
<dd>
Returns the profile that’s stored in the server’s state (extra credit)
</dd>
<dt><span class="term">
<code class="literal">{set_profile, Key, Value}</code>
</span></dt>
<dd>
If the profile already contains the key, replace it with the given value.
Otherwise, add the key and value to the profile. Hint: use
<code class="literal">lists:keymember/3</code> and <code class="literal">lists:keyreplace/4</code>. (extra credit)
</dd>
</dl></div>
<p id="because_the_cha">Because the chat room server uses <code class="literal">gen_server:cast/2</code> to send messages
to the people in the room, your <code class="literal">handle_cast/3</code> function will receive messages sent from other users in this form:</p>
<p id="message_from"><code class="literal">{message, {FromUser, FromServer}, Text}</code></p>
</div>
<div class="sect2" id="_wrapper_functions_for_the_literal_person_literal_module">
<div class="titlepage"><div><div><h3 class="title">Wrapper Functions for the <code class="literal">person</code> module</h3></div></div></div>
<div class="variablelist" id="get_chat_node"><dl class="variablelist">
<dt><span class="term">
<code class="literal">get_chat_node()</code>
</span></dt>
<dd>
A convenience function to get the name of the chat host node by doing
<code class="literal">gen_server:call(person, get_chat_node)</code>
</dd>
<dt><span class="term">
<code class="literal">login(UserName)</code>
</span></dt>
<dd>
Calls the chat room server with a {login, UserName} request. If the
user name is an atom, use <code class="literal">atom_to_list/1</code> to convert it to a string.
</dd>
<dt><span class="term">
<code class="literal">logout()</code>
</span></dt>
<dd>
Calls the chat room server with a <code class="literal">logout</code> request. As you saw in the
description of <code class="literal">chatroom</code>, the server uses the process ID to figure out
who should be logged out.
</dd>
<dt><span class="term">
<code class="literal">say(Text)</code>
</span></dt>
<dd>
Calls the chat server with a <code class="literal">{say, Text}</code> request.
</dd>
<dt><span class="term">
<code class="literal">users()</code>
</span></dt>
<dd>
Calls the chat server with a <code class="literal">users</code> request.
</dd>
<dt><span class="term">
<code class="literal">who(UserName, UserNode)</code>
</span></dt>
<dd>
Calls the chat server with a <code class="literal">{who, UserName, UserNode}</code> request to
see the profile of the given person. (extra credit)
</dd>
<dt><span class="term">
<code class="literal">set_profile(Key, Value)</code>
</span></dt>
<dd>
A convenience method that calls the <code class="literal">person</code> module with a
<code class="literal">{set_profile, Key, Value}</code> request. (extra credit)
</dd>
</dl></div>
<div class="note" id="the_login_lo_id1"><p id="the_login_lo_id2">The <code class="literal">login/2</code>, <code class="literal">logout/0</code>, and <code class="literal">say/2</code> wrapper functions do <span class="emphasis"><em>not</em></span> call
the chat server directly, because the <code class="literal">from</code> pid would be the process
calling those functions (usually the shell),
not the person server. Instead, these functions will make a
<code class="literal">gen_server:call</code> to the <code class="literal">person</code> server. Its <code class="literal">handle_call</code>
function will forward the <code class="literal">gen_server:call</code> to the <code class="literal">chatroom</code>. That way, the
chat room server sees the request coming from the <code class="literal">person</code> server.</p></div>
</div>
<div class="sect2" id="_putting_it_all_together">
<div class="titlepage"><div><div><h3 class="title">Putting it All Together</h3></div></div></div>
<p id="here_is_what_th">Here is what the chat room server looks like. The lines beginning with
<code class="literal">Recipient list:</code> are debug output. I have gotten rid of the startup lines
from the <code class="literal">erl</code> command.</p>
<pre class="programlisting" data-language="erl" id="erl_sname_lobb"><code class="go">erl -sname lobby</code>

<code class="go">(lobby@localhost)1&gt; chatroom:start_link().</code>
<code class="go">{ok,&lt;0.39.0&gt;}</code>
<code class="go">Recipient list: [{"Steve",sales@localhost},{"Michele",marketing@localhost}]</code>
<code class="go">Recipient list: [{"David",engineering@localhost},</code>
<code class="go">                 {"Michele",marketing@localhost}]</code>
<code class="go">Recipient list: [{"David",engineering@localhost},{"Steve",sales@localhost}]</code>
<code class="go">Recipient list: [{"David",engineering@localhost},</code>
<code class="go">                 {"Michele",marketing@localhost}]</code></pre>
<p id="and_here_are_th">And here are three other servers talking to one another and setting
profile information.</p>
<pre class="programlisting" data-language="erl" id="erl_sname_sale"><code class="go">erl -sname sales</code>

<code class="go">(sales@localhost)1&gt; person:start_link(lobby@localhost).</code>
<code class="go">Chat node is: lobby@localhost</code>
<code class="go">{ok,&lt;0.39.0&gt;}</code>
<code class="go">(sales@localhost)2&gt; person:login("Steve").</code>
<code class="go">{ok,"Logged in."}</code>
<code class="go">(sales@localhost)3&gt; person:set_profile(city, "Chicago").</code>
<code class="go">{ok,[{city,"Chicago"}]}</code>
<code class="go">David (engineering@localhost) says: "Hi, everyone."</code>
<code class="go">(sales@localhost)4&gt; person:say("How's things in Toronto, David?").</code>
<code class="go">ok</code>
<code class="go">Michele (marketing@localhost) says: "New product launch is next week."</code>
<code class="go">(sales@localhost)5&gt; person:say("oops, gotta run.").</code>
<code class="go">ok</code>
<code class="go">(sales@localhost)6&gt; person:logout().</code>
<code class="go">ok</code></pre>
<pre class="programlisting" data-language="erl" id="erl_sname_engi"><code class="go">erl -sname engineering</code>

<code class="go">(engineering@localhost)1&gt; person:start_link(lobby@localhost).</code>
<code class="go">Chat node is: lobby@localhost</code>
<code class="go">{ok,&lt;0.39.0&gt;}</code>
<code class="go">(engineering@localhost)2&gt; person:login("David").</code>
<code class="go">{ok,"Logged in."}</code>
<code class="go">(engineering@localhost)3&gt; person:set_profile(city, "Toronto").</code>
<code class="go">{ok,[{city,"Toronto"}]}</code>
<code class="go">(engineering@localhost)4&gt; person:set_profile(department, "New Products").</code>
<code class="go">{ok,[{department,"New Products"},{city,"Toronto"}]}</code>
<code class="go">(engineering@localhost)5&gt; person:say("Hi, everyone.").</code>
<code class="go">ok</code>
<code class="go">Steve (sales@localhost) says: "How's things in Toronto, David?"</code>
<code class="go">Michele (marketing@localhost) says: "New product launch is next week."</code>
<code class="go">(engineering@localhost)6&gt; person:users().</code>
<code class="go">[{"David",engineering@localhost},</code>
<code class="go"> {"Steve",sales@localhost},</code>
<code class="go"> {"Michele",marketing@localhost}]</code>
<code class="go">Steve (sales@localhost) says: "oops, gotta run."</code></pre>
<pre class="programlisting" data-language="erl" id="erl_sname_mark"><code class="go">erl -sname marketing</code>

<code class="go">(marketing@localhost)1&gt; person:start_link(lobby@localhost).</code>
<code class="go">Chat node is: lobby@localhost</code>
<code class="go">{ok,&lt;0.39.0&gt;}</code>
<code class="go">(marketing@localhost)2&gt; person:login("Michele").</code>
<code class="go">{ok,"Logged in."}</code>
<code class="go">(marketing@localhost)3&gt; person:set_profile(city, "San Jose").</code>
<code class="go">{ok,[{city,"San Jose"}]}</code>
<code class="go">David (engineering@localhost) says: "Hi, everyone."</code>
<code class="go">Steve (sales@localhost) says: "How's things in Toronto, David?"</code>
<code class="go">(marketing@localhost)4&gt; person:say("New product launch is next week.").</code>
<code class="go">ok</code>
<code class="go">Steve (sales@localhost) says: "oops, gotta run."</code>
<code class="go">(marketing@localhost)5&gt; person:users().</code>
<code class="go">[{"David",engineering@localhost},</code>
<code class="go"> {"Michele",marketing@localhost}]</code></pre>
<p id="see_a_suggested_id29"><a class="link" href="apa.html#SOLUTION11-ET04" title="Solution 11-4">See a suggested solution in Appendix A.</a></p>
</div>
</div></section><section class="chapter" data-original-filename="contributors.asciidoc" id="contributors"><div class="titlepage"><div><div><h1 class="title">Chapter 12. Contributors</h1></div></div></div>
<p id="the_author_and_">The author and O’Reilly Media wish to thank the people who have contributed to this project. They include:</p>
<div class="itemizedlist" id="fabio_draco_f_id1"><ul class="itemizedlist">
<li class="listitem">
<a class="ulink" href="https://github.com/draconar" target="_top">Fabio "Draco" Fonseca</a>
</li>
<li class="listitem">
<a class="ulink" href="https://github.com/develop7" target="_top">Andrei Dziahel</a>
</li>
<li class="listitem">
<a class="ulink" href="https://github.com/alco" target="_top">Alexei Sholik</a>
</li>
<li class="listitem">
<a class="ulink" href="https://github.com/braindump" target="_top">Lars Herbach</a>
</li>
</ul></div></section><section class="appendix" data-original-filename="appendix-a.asciidoc" id="APPENDIX"><div class="titlepage"><div><div><h1 class="title">Appendix A. Solutions to Études</h1></div></div></div>
<p id="here_are_the_so">Here are the solutions that I came up with for the études in
this book. Since I was learning Erlang as I wrote them, you
may expect some of the code to be naïve in the extreme.</p>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION02-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 2-1</h2></div></div></div>
<p id="here_is_a_sugge_id1">Here is a suggested solution for
<a class="link" href="ch02.html#CH02-ET01" title="Étude 2-1: Writing a Function">Étude 2-1</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="modulegeom_"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION02-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 2-2</h2></div></div></div>
<p id="here_is_a_sugge_id2">Here is a suggested solution for
<a class="link" href="ch02.html#CH02-ET02" title="Étude 2-2: Documenting a Module">Étude 2-2</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id1"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a rectangle, given the</code>
<code class="c">%% length and width. Returns the product</code>
<code class="c">%% of its arguments.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION02-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 2-3</h2></div></div></div>
<p id="here_is_a_sugge_id3">Here is a suggested solution for
<a class="link" href="ch02.html#CH02-ET03" title="Étude 2-3: Documenting a Function">Étude 2-3</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id2"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a rectangle, given the</code>
<code class="c">%% length and width. Returns the product</code>
<code class="c">%% of its arguments.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION03-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 3-1</h2></div></div></div>
<p id="here_is_a_sugge_id4">Here is a suggested solution for
<a class="link" href="ch03.html#CH03-ET01" title="Étude 3-1: Pattern Matching">Étude 3-1</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_4">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id3"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">H</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">B</code> <code class="o">*</code> <code class="nv">H</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION03-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 3-2</h2></div></div></div>
<p id="here_is_a_sugge_id5">Here is a suggested solution for
<a class="link" href="ch03.html#CH03-ET02" title="Étude 3-2: Guards">Étude 3-2</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_5">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id4"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse. Ensure that both arguments are greater than</code>
<code class="c">%% or equal to zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="k">when</code> <code class="nv">L</code> <code class="o">&gt;=</code><code class="mi">0</code><code class="p">,</code> <code class="nv">W</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">H</code><code class="p">)</code> <code class="k">when</code> <code class="nv">B</code><code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">H</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">B</code> <code class="o">*</code> <code class="nv">H</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION03-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 3-3</h2></div></div></div>
<p id="here_is_a_sugge_id6">Here is a suggested solution for
<a class="link" href="ch03.html#CH03-ET03" title="Étude 3-3: Underscores">Étude 3-3</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_6">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id5"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse. Invalid data returns zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="k">when</code> <code class="nv">L</code> <code class="o">&gt;=</code><code class="mi">0</code><code class="p">,</code> <code class="nv">W</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">H</code><code class="p">)</code> <code class="k">when</code> <code class="nv">B</code><code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">H</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">B</code> <code class="o">*</code> <code class="nv">H</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(_,</code> <code class="p">_,</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION03-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 3-4</h2></div></div></div>
<p id="here_is_a_sugge_id7">Here is a suggested solution for
<a class="link" href="ch03.html#CH03-ET04" title="Étude 3-4: Tuples as Parameters">Étude 3-4</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_7">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id6"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given a tuple</code>
<code class="c">%% containing a shape and two of the dimensions.</code>
<code class="c">%% Works by calling a private function.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">({</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">()})</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">({</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">Dim1</code><code class="p">,</code> <code class="nv">Dim2</code><code class="p">})</code> <code class="o">-&gt;</code> <code class="n">area</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">Dim1</code><code class="p">,</code> <code class="nv">Dim2</code><code class="p">).</code>

<code class="c">%% @doc Returns the product of its arguments for a rectangle,</code>
<code class="c">%% one half the product of the arguments for a triangle,</code>
<code class="c">%% and math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse. Invalid data returns zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="n">rectangle</code><code class="p">,</code> <code class="nv">L</code><code class="p">,</code><code class="nv">W</code><code class="p">)</code> <code class="k">when</code> <code class="nv">L</code> <code class="o">&gt;=</code><code class="mi">0</code><code class="p">,</code> <code class="nv">W</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nv">L</code> <code class="o">*</code> <code class="nv">W</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">triangle</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">H</code><code class="p">)</code> <code class="k">when</code> <code class="nv">B</code><code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">H</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">B</code> <code class="o">*</code> <code class="nv">H</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(</code><code class="n">ellipse</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">;</code>

<code class="nf">area</code><code class="p">(_,</code> <code class="p">_,</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 4-1</h2></div></div></div>
<p id="here_is_a_sugge_id8">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET01" title="Étude 4-1: Using case">Étude 4-1</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_8">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id7"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Shape</code> <code class="k">of</code>
    <code class="n">rectangle</code> <code class="o">-&gt;</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">;</code>
    <code class="n">triangle</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>
    <code class="n">ellipse</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 4-2</h2></div></div></div>
<p id="here_is_a_sugge_id9">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET02" title="Étude 4-2: Recursion">Étude 4-2</a>.</p>
<div class="sect2" id="_literal_dijkstra_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dijkstra.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id8"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Recursive function for calculating GCD</code>
<code class="c">%% of two numbers using Dijkstra's algorithm.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dijkstra</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">gcd</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the greatest common divisor of two</code>
<code class="c">%% integers. Uses Dijkstra's algorithm, which does not</code>
<code class="c">%% require any division.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">gcd</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nv">M</code> <code class="o">==</code> <code class="nv">N</code>  <code class="o">-&gt;</code> <code class="nv">M</code><code class="p">;</code>
    <code class="nv">M</code> <code class="o">&gt;</code> <code class="nv">N</code> <code class="o">-&gt;</code> <code class="n">gcd</code><code class="p">(</code><code class="nv">M</code> <code class="o">-</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">N</code><code class="p">);</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="nv">M</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET02B">
<div class="titlepage"><div><div><h2 class="title">Solution 4-2</h2></div></div></div>
<p id="here_is_another">Here is another solution for
<a class="link" href="ch04.html#CH04-ET02" title="Étude 4-2: Recursion">Étude 4-2</a>. This solution uses guards instead of
<code class="literal">if</code>.</p>
<div class="sect2" id="_literal_dijkstra_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dijkstra.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id9"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Recursive function for calculating GCD</code>
<code class="c">%% of two numbers using Dijkstra's algorithm.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dijkstra</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">gcd</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the greatest common divisor of two</code>
<code class="c">%% integers. Uses Dijkstra's algorithm, which does not</code>
<code class="c">%% require any division.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">gcd</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">M</code> <code class="o">==</code> <code class="nv">N</code> <code class="o">-&gt;</code>
  <code class="nv">M</code><code class="p">;</code>

<code class="nf">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code><code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="nv">N</code> <code class="o">-&gt;</code>
  <code class="n">gcd</code><code class="p">(</code><code class="nv">M</code> <code class="o">-</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">N</code><code class="p">);</code>

<code class="nf">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">gcd</code><code class="p">(</code><code class="nv">M</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="nv">M</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 4-3</h2></div></div></div>
<p id="here_is_a_sugge_id10">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET03" title="Étude 4-3: Non-Tail Recursive Functions">Étude 4-3</a>.</p>
<div class="sect2" id="_literal_powers_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id10"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power</code>
<code class="c">%% and finding the Nth root of a number using Newton's method.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is positive, X^N is equal to X times X^(N - 1)</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="mi">1</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">X</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="nv">X</code> <code class="o">*</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">);</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code></pre>
</div>
<div class="sect2" id="_literal_powers_traced_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers_traced.erl</code></h3></div></div></div>
<p id="this_code_conta_id1">This code contains output that lets you see the progress
of the recursion.</p>
<pre class="programlisting" data-language="erlang" id="author_j_d__id11"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power</code>
<code class="c">%% and finding the Nth root of a number using Newton's method.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers_traced</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is positive, X^N is equal to X times X^(N - 1)</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="mi">1</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">X</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Enter X: </code><code class="si">~p</code><code class="s">, N: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">]),</code>
  <code class="nv">Result</code> <code class="o">=</code> <code class="nv">X</code> <code class="o">*</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Result is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Result</code><code class="p">]),</code>
  <code class="nv">Result</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 4-4</h2></div></div></div>
<p id="here_is_a_sugge_id11">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET04" title="Étude 4-4: Tail Recursion with an Accumulator">Étude 4-4</a>.</p>
<div class="sect2" id="_literal_powers_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id12"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is positive, X^N is equal to X times X^(N - 1)</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code>

<code class="c">%% @doc Helper function to raise X to N by passing an Accumulator</code>
<code class="c">%% from call to call.</code>
<code class="c">%% When N is 0, return the value of the Accumulator;</code>
<code class="c">%% otherwise return raise(X, N - 1, X * Accumulator)</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Accumulator</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="nv">X</code> <code class="o">*</code> <code class="nv">Accumulator</code><code class="p">).</code></pre>
</div>
<div class="sect2" id="_literal_powers_traced_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers_traced.erl</code></h3></div></div></div>
<p id="this_code_conta_id2">This code contains output that lets you see the progress
of the recursion.</p>
<pre class="programlisting" data-language="erlang" id="author_j_d__id13"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers_traced</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>
<code class="c">%% When N is positive, call raise/3 with 1 as the accumulator.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code>

<code class="c">%% @doc Helper function to raise X to N by passing an Accumulator</code>
<code class="c">%% from call to call.</code>
<code class="c">%% When N is 0, return the value of the Accumulator;</code>
<code class="c">%% otherwise return raise(X, N - 1, X * Accumulator)</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"N equals 0."</code><code class="p">),</code>
  <code class="nv">Result</code> <code class="o">=</code> <code class="nv">Accumulator</code><code class="p">,</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Result is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Result</code><code class="p">]),</code>
  <code class="nv">Result</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Enter: X is </code><code class="si">~p</code><code class="s">, N is </code><code class="si">~p</code><code class="s">, Accumulator is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">]),</code>
  <code class="nv">Result</code> <code class="o">=</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="nv">X</code> <code class="o">*</code> <code class="nv">Accumulator</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Result is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Result</code><code class="p">]),</code>
  <code class="nv">Result</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION04-ET05">
<div class="titlepage"><div><div><h2 class="title">Solution 4-5</h2></div></div></div>
<p id="here_is_a_sugge_id12">Here is a suggested solution for
<a class="link" href="ch04.html#CH04-ET05" title="Étude 4-5: Recursion with a Helper Function">Étude 4-5</a>.</p>
<div class="sect2" id="_literal_powers_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">powers.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id14"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for raising a number to an integer power</code>
<code class="c">%% and finding the Nth root of a number using Newton's method.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">powers</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">nth_root</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">raise</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Find the nth root of a given number.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">nth_root</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">nth_root</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">A</code> <code class="o">=</code> <code class="nv">X</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">,</code>
  <code class="n">nth_root</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">A</code><code class="p">).</code>

<code class="c">%% @doc Helper function to find an nth_root by passing</code>
<code class="c">%% an approximation from one call to the next.</code>
<code class="c">%% If the difference between current and next approximations</code>
<code class="c">%% is less than 1.0e-8, return the next approximation; otherwise return</code>
<code class="c">%% nth_root(X, N, NextApproximation).</code>

<code class="nf">nth_root</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">A</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Current guess is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">A</code><code class="p">]),</code> <code class="c">%% see the guesses converge</code>
  <code class="nv">F</code> <code class="o">=</code> <code class="n">raise</code><code class="p">(</code><code class="nv">A</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-</code> <code class="nv">X</code><code class="p">,</code>
  <code class="nv">Fprime</code> <code class="o">=</code> <code class="nv">N</code> <code class="o">*</code> <code class="n">raise</code><code class="p">(</code><code class="nv">A</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">),</code>
  <code class="nv">Next</code> <code class="o">=</code> <code class="nv">A</code> <code class="o">-</code> <code class="nv">F</code> <code class="o">/</code> <code class="nv">Fprime</code><code class="p">,</code>
  <code class="nv">Change</code> <code class="o">=</code> <code class="nb">abs</code><code class="p">(</code><code class="nv">Next</code> <code class="o">-</code> <code class="nv">A</code><code class="p">),</code>
  <code class="k">if</code>
    <code class="nv">Change</code> <code class="o">&lt;</code> <code class="mi">1</code><code class="p">.</code><code class="mi">0</code><code class="n">e</code><code class="o">-</code><code class="mi">8</code> <code class="o">-&gt;</code> <code class="nv">Next</code><code class="p">;</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">nth_root</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Next</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Raise a number X to an integer power N.</code>
<code class="c">%% Any number to the power 0 equals 1.</code>
<code class="c">%% Any number to the power 1 is that number itself.</code>
<code class="c">%% When N is positive, X^N is equal to X times X^(N - 1)</code>
<code class="c">%% When N is negative, X^N is equal to 1.0 / X^N</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">raise</code><code class="p">(</code><code class="n">number</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&gt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="k">when</code> <code class="nv">N</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code> <code class="mi">1</code> <code class="o">/</code> <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="o">-</code><code class="nv">N</code><code class="p">).</code>

<code class="c">%% @doc Helper function to raise X to N by passing an Accumulator</code>
<code class="c">%% from call to call.</code>
<code class="c">%% When N is 0, return the value of the Accumulator;</code>
<code class="c">%% otherwise return raise(X, N - 1, X * Accumulator)</code>

<code class="nf">raise</code><code class="p">(_,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Accumulator</code><code class="p">;</code>

<code class="nf">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">raise</code><code class="p">(</code><code class="nv">X</code><code class="p">,</code> <code class="nv">N</code><code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="nv">X</code> <code class="o">*</code> <code class="nv">Accumulator</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION05-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 5-1</h2></div></div></div>
<p id="here_is_a_sugge_id13">Here is a suggested solution for
<a class="link" href="ch05.html#CH05-ET01" title="Étude 5-1: Validating Input">Étude 5-1</a>.</p>
<div class="sect2" id="_literal_geom_erl_literal_9">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">geom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id15"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating areas of geometric shapes.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">geom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>

<code class="c">%% @doc Calculates the area of a shape, given the</code>
<code class="c">%% shape and two of the dimensions. Returns the product</code>
<code class="c">%% of its arguments for a rectangle, one half the</code>
<code class="c">%% product of the arguments for a triangle, and</code>
<code class="c">%% math:pi times the product of the arguments for</code>
<code class="c">%% an ellipse.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">B</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Shape</code> <code class="k">of</code>
    <code class="n">rectangle</code> <code class="o">-&gt;</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">;</code>
    <code class="n">triangle</code> <code class="o">-&gt;</code> <code class="p">(</code><code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">.</code><code class="mi">0</code><code class="p">;</code>
    <code class="n">ellipse</code> <code class="o">-&gt;</code> <code class="nn">math</code><code class="p">:</code><code class="n">pi</code><code class="p">()</code> <code class="o">*</code> <code class="nv">A</code> <code class="o">*</code> <code class="nv">B</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
<div class="sect2" id="_literal_ask_area_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">ask_area.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id16"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions to calculate areas of shape given user input.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">ask_area</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">area</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code>

<code class="c">%% @doc Requests a character for the name of a shape,</code>
<code class="c">%% numbers for its dimensions, and calculates shape's area.</code>
<code class="c">%% The characters are R for rectangle, T for triangle,</code>
<code class="c">%% and E for ellipse. Input is allowed in either upper</code>
<code class="c">%% or lower case.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">area</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">area</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">Answer</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="s">"R)ectangle, T)riangle, or E)llipse &gt; "</code><code class="p">),</code>
  <code class="nv">Shape</code> <code class="o">=</code> <code class="n">char_to_shape</code><code class="p">(</code><code class="nb">hd</code><code class="p">(</code><code class="nv">Answer</code><code class="p">)),</code>
  <code class="k">case</code> <code class="nv">Shape</code> <code class="k">of</code>
    <code class="n">rectangle</code> <code class="o">-&gt;</code> <code class="nv">Numbers</code> <code class="o">=</code> <code class="n">get_dimensions</code><code class="p">(</code><code class="s">"width"</code><code class="p">,</code> <code class="s">"height"</code><code class="p">);</code>
    <code class="n">triangle</code> <code class="o">-&gt;</code> <code class="nv">Numbers</code> <code class="o">=</code> <code class="n">get_dimensions</code><code class="p">(</code><code class="s">"base"</code><code class="p">,</code> <code class="s">"height"</code><code class="p">);</code>
    <code class="n">ellipse</code> <code class="o">-&gt;</code> <code class="nv">Numbers</code> <code class="o">=</code> <code class="n">get_dimensions</code><code class="p">(</code><code class="s">"major axis"</code><code class="p">,</code> <code class="s">"minor axis"</code><code class="p">);</code>
    <code class="n">unknown</code> <code class="o">-&gt;</code> <code class="nv">Numbers</code> <code class="o">=</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="s">"Unknown shape "</code> <code class="o">++</code> <code class="p">[</code><code class="nb">hd</code><code class="p">(</code><code class="nv">Answer</code><code class="p">)]}</code>
  <code class="k">end</code><code class="p">,</code>

  <code class="nv">Area</code> <code class="o">=</code> <code class="n">calculate</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">),</code> <code class="nb">element</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">)),</code>
  <code class="nv">Area</code><code class="p">.</code>

<code class="c">%% @doc Given a character, returns an atom representing the</code>
<code class="c">%% specified shape (or the atom unknown if a bad character is given).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">char_to_shape</code><code class="p">(</code><code class="n">char</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">char_to_shape</code><code class="p">(</code><code class="nv">Char</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Char</code> <code class="k">of</code>
    <code class="sc">$R</code> <code class="o">-&gt;</code> <code class="n">rectangle</code><code class="p">;</code>
    <code class="sc">$r</code> <code class="o">-&gt;</code> <code class="n">rectangle</code><code class="p">;</code>
    <code class="sc">$T</code> <code class="o">-&gt;</code> <code class="n">triangle</code><code class="p">;</code>
    <code class="sc">$t</code> <code class="o">-&gt;</code> <code class="n">triangle</code><code class="p">;</code>
    <code class="sc">$E</code> <code class="o">-&gt;</code> <code class="n">ellipse</code><code class="p">;</code>
    <code class="sc">$e</code> <code class="o">-&gt;</code> <code class="n">ellipse</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code>  <code class="n">unknown</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Present a prompt and get a number from the</code>
<code class="c">%% user. Allow either integers or floats.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">get_number</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">get_number</code><code class="p">(</code><code class="nv">Prompt</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Str</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="s">"Enter "</code> <code class="o">++</code> <code class="nv">Prompt</code> <code class="o">++</code> <code class="s">" &gt; "</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Test</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">Test</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="nv">N</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">Str</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">N</code> <code class="o">=</code> <code class="nv">Test</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nv">N</code><code class="p">.</code>

<code class="c">%% @doc Get dimensions for a shape. Input are the two prompts,</code>
<code class="c">%% output is a tuple {Dimension1, Dimension2}.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">get_dimensions</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">()}).</code>

<code class="nf">get_dimensions</code><code class="p">(</code><code class="nv">Prompt1</code><code class="p">,</code> <code class="nv">Prompt2</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">N1</code> <code class="o">=</code> <code class="n">get_number</code><code class="p">(</code><code class="nv">Prompt1</code><code class="p">),</code>
  <code class="nv">N2</code> <code class="o">=</code> <code class="n">get_number</code><code class="p">(</code><code class="nv">Prompt2</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">N1</code><code class="p">,</code> <code class="nv">N2</code><code class="p">}.</code>

<code class="c">%% @doc Calculate area of a shape, given its shape and dimensions.</code>
<code class="c">%% Handle errors appropriately.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">calculate</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">number</code><code class="p">(),</code> <code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">calculate</code><code class="p">(</code><code class="n">unknown</code><code class="p">,</code> <code class="p">_,</code> <code class="nv">Err</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~s~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Err</code><code class="p">]);</code>
<code class="nf">calculate</code><code class="p">(_,</code> <code class="n">error</code><code class="p">,</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error in first number.</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
<code class="nf">calculate</code><code class="p">(_,</code> <code class="p">_,</code> <code class="n">error</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error in second number.</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
<code class="nf">calculate</code><code class="p">(_,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="k">when</code> <code class="nv">A</code> <code class="o">&lt;</code> <code class="mi">0</code><code class="p">;</code> <code class="nv">B</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Both numbers must be greater than or equal to zero</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
<code class="nf">calculate</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">geom</code><code class="p">:</code><code class="n">area</code><code class="p">(</code><code class="nv">Shape</code><code class="p">,</code> <code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION05-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 5-2</h2></div></div></div>
<p id="here_is_a_sugge_id14">Here is a suggested solution for
<a class="link" href="ch05.html#CH05-ET02" title="Étude 5-2: Using the re Module">Étude 5-2</a>.</p>
<div class="sect2" id="_literal_dates_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dates.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id17"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for splitting a date into a list of</code>
<code class="c">%% year-month-day.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dates</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">date_parts</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns a list of integers in form [year, month, day].</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">date_parts</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">YStr</code><code class="p">,</code> <code class="nv">MStr</code><code class="p">,</code> <code class="nv">DStr</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[</code><code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">YStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">MStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">DStr</code><code class="p">))].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 6-1</h2></div></div></div>
<p id="here_is_a_sugge_id15">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET01" title="Étude 6-1: Recursive Iteration through a List">Étude 6-1</a>.</p>
<div class="sect2" id="_literal_stats_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id18"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">(</code><code class="n">list</code><code class="p">(</code><code class="n">number</code><code class="p">()))</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Result</code> <code class="p">|</code> <code class="nv">Rest</code><code class="p">]</code> <code class="o">=</code> <code class="nv">NumberList</code><code class="p">,</code>
  <code class="n">minimum</code><code class="p">(</code><code class="nv">Rest</code><code class="p">,</code> <code class="nv">Result</code><code class="p">).</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 6-2</h2></div></div></div>
<p id="here_is_a_sugge_id16">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET02" title="Étude 6-2: Iteration through Lists (More Practice)">Étude 6-2</a>.</p>
<div class="sect2" id="_literal_stats_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id19"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">maximum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">range</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">(</code><code class="n">list</code><code class="p">(</code><code class="n">number</code><code class="p">()))</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Result</code> <code class="p">|</code> <code class="nv">Rest</code><code class="p">]</code> <code class="o">=</code> <code class="nv">NumberList</code><code class="p">,</code>
  <code class="n">minimum</code><code class="p">(</code><code class="nv">Rest</code><code class="p">,</code> <code class="nv">Result</code><code class="p">).</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the maximum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">maximum</code><code class="p">(</code><code class="n">list</code><code class="p">(</code><code class="n">number</code><code class="p">()))</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Result</code> <code class="p">|</code> <code class="nv">Rest</code><code class="p">]</code> <code class="o">=</code> <code class="nv">NumberList</code><code class="p">,</code>
  <code class="n">maximum</code><code class="p">(</code><code class="nv">Rest</code><code class="p">,</code> <code class="nv">Result</code><code class="p">).</code>

<code class="nf">maximum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">maximum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&gt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Return the range (maximum and minimum) of a list of numbers</code>
<code class="c">%% as a two-element list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">range</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">number</code><code class="p">()]).</code>

<code class="nf">range</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 6-3</h2></div></div></div>
<p id="here_is_a_sugge_id17">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET03" title="Étude 6-3: Accumulating the Sum of a List">Étude 6-3</a> with leap years handled in the
<code class="literal">julian/5</code> function.</p>
<div class="sect2" id="_literal_dates_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dates.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id20"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for splitting a date into a list of</code>
<code class="c">%% year-month-day and finding Julian date.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dates</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">date_parts</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">julian</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">is_leap_year</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns a list of integers in form [year, month, day].</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">date_parts</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">(</code><code class="n">integer</code><code class="p">())).</code>

<code class="nf">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">YStr</code><code class="p">,</code> <code class="nv">MStr</code><code class="p">,</code> <code class="nv">DStr</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[</code><code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">YStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">MStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">DStr</code><code class="p">))].</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns the day of the year (Julian date).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">pos_integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">IsoDate</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">DaysPerMonth</code> <code class="o">=</code> <code class="p">[</code><code class="mi">31</code><code class="p">,</code> <code class="mi">28</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">],</code>
  <code class="p">[</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">]</code> <code class="o">=</code> <code class="n">date_parts</code><code class="p">(</code><code class="nv">IsoDate</code><code class="p">),</code>
  <code class="n">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">DaysPerMonth</code><code class="p">,</code> <code class="mi">0</code><code class="p">).</code>

<code class="c">%% @doc Helper function that recursively accumulates the number of days</code>
<code class="c">%% up to the specified date.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="p">[</code><code class="n">integer</code><code class="p">()],</code> <code class="n">integer</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">MonthList</code><code class="p">,</code> <code class="nv">Total</code><code class="p">)</code> <code class="k">when</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="mi">13</code> <code class="o">-</code> <code class="nb">length</code><code class="p">(</code><code class="nv">MonthList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">ThisMonth</code><code class="p">|</code><code class="nv">RemainingMonths</code><code class="p">]</code> <code class="o">=</code> <code class="nv">MonthList</code><code class="p">,</code>
  <code class="n">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">RemainingMonths</code><code class="p">,</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">ThisMonth</code><code class="p">);</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="p">_</code><code class="nv">MonthList</code><code class="p">,</code> <code class="nv">Total</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="mi">2</code> <code class="ow">andalso</code> <code class="n">is_leap_year</code><code class="p">(</code><code class="nv">Y</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code> <code class="o">+</code> <code class="mi">1</code><code class="p">;</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Given a year, return true or false depending on whether</code>
<code class="c">%% the year is a leap year.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">is_leap_year</code><code class="p">(</code><code class="n">pos_integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">boolean</code><code class="p">()).</code>

<code class="nf">is_leap_year</code><code class="p">(</code><code class="nv">Year</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">4</code> <code class="o">==</code> <code class="mi">0</code> <code class="ow">andalso</code> <code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">100</code> <code class="o">/=</code> <code class="mi">0</code><code class="p">)</code>
    <code class="ow">orelse</code> <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">400</code> <code class="o">==</code> <code class="mi">0</code><code class="p">).</code></pre>
<p id="here_is_a_sugge_id18">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET03" title="Étude 6-3: Accumulating the Sum of a List">Étude 6-3</a> with leap years handled in the
<code class="literal">julian/1</code> function.</p>
</div>
<div class="sect2" id="_literal_dates_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dates.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id21"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for splitting a date into a list of</code>
<code class="c">%% year-month-day and finding Julian date.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dates</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">date_parts</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">julian</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">is_leap_year</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns a list of integers in form [year, month, day].</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">date_parts</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">(</code><code class="n">integer</code><code class="p">())).</code>

<code class="nf">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">YStr</code><code class="p">,</code> <code class="nv">MStr</code><code class="p">,</code> <code class="nv">DStr</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[</code><code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">YStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">MStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">DStr</code><code class="p">))].</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns the day of the year (Julian date).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">pos_integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">IsoDate</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">]</code> <code class="o">=</code> <code class="n">date_parts</code><code class="p">(</code><code class="nv">IsoDate</code><code class="p">),</code>
  <code class="nv">DaysInFeb</code> <code class="o">=</code> <code class="k">case</code> <code class="n">is_leap_year</code><code class="p">(</code><code class="nv">Y</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="mi">29</code><code class="p">;</code>
    <code class="p">_</code><code class="n">else</code> <code class="o">-&gt;</code> <code class="mi">28</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nv">DaysPerMonth</code> <code class="o">=</code> <code class="p">[</code><code class="mi">31</code><code class="p">,</code> <code class="nv">DaysInFeb</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">],</code>
  <code class="n">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">DaysPerMonth</code><code class="p">,</code> <code class="mi">0</code><code class="p">).</code>

<code class="c">%% @doc Helper function that recursively accumulates the number of days</code>
<code class="c">%% up to the specified date.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="p">[</code><code class="n">integer</code><code class="p">()],</code> <code class="n">integer</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">MonthList</code><code class="p">,</code> <code class="nv">Total</code><code class="p">)</code> <code class="k">when</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="mi">13</code> <code class="o">-</code> <code class="nb">length</code><code class="p">(</code><code class="nv">MonthList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">ThisMonth</code><code class="p">|</code><code class="nv">RemainingMonths</code><code class="p">]</code> <code class="o">=</code> <code class="nv">MonthList</code><code class="p">,</code>
  <code class="n">julian</code><code class="p">(</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="nv">RemainingMonths</code><code class="p">,</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">ThisMonth</code><code class="p">);</code>

<code class="nf">julian</code><code class="p">(_</code><code class="nv">Y</code><code class="p">,</code> <code class="p">_</code><code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">,</code> <code class="p">_</code><code class="nv">MonthList</code><code class="p">,</code> <code class="nv">Total</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code><code class="p">.</code>

<code class="c">%% @doc Given a year, return true or false depending on whether</code>
<code class="c">%% the year is a leap year.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">is_leap_year</code><code class="p">(</code><code class="n">pos_integer</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">boolean</code><code class="p">()).</code>

<code class="nf">is_leap_year</code><code class="p">(</code><code class="nv">Year</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">4</code> <code class="o">==</code> <code class="mi">0</code> <code class="ow">andalso</code> <code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">100</code> <code class="o">/=</code> <code class="mi">0</code><code class="p">)</code>
    <code class="ow">orelse</code> <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">400</code> <code class="o">==</code> <code class="mi">0</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 6-4</h2></div></div></div>
<p id="here_is_a_sugge_id19">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET04" title="Étude 6-4: Lists of Lists">Étude 6-4</a>.</p>
<div class="sect2" id="_literal_teeth_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">teeth.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id22"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Show teeth that need attention due to excessive pocket depth.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">teeth</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">alert</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Create a list of tooth numbers that require attention.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">alert</code><code class="p">[</code><code class="n">integer</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">integer</code><code class="p">()]).</code>

<code class="nf">alert</code><code class="p">(</code><code class="nv">ToothList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">alert</code><code class="p">(</code><code class="nv">ToothList</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% @doc Helper function that accumulates the list of teeth needing attention</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">alert</code><code class="p">([</code><code class="n">integer</code><code class="p">()],</code> <code class="n">integer</code><code class="p">(),</code> <code class="p">[</code><code class="n">integer</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">integer</code><code class="p">()]).</code>

<code class="nf">alert</code><code class="p">([],</code> <code class="p">_</code><code class="nv">Tooth_number</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">Result</code><code class="p">);</code>

<code class="nf">alert</code><code class="p">([</code><code class="nv">Head</code> <code class="p">|</code> <code class="nv">Tail</code> <code class="p">],</code> <code class="nv">ToothNumber</code><code class="p">,</code> <code class="nv">Result</code> <code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nn">stats</code><code class="p">:</code><code class="n">maximum</code><code class="p">(</code><code class="nv">Head</code><code class="p">)</code> <code class="o">&gt;=</code> <code class="mi">4</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">alert</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">ToothNumber</code> <code class="o">+</code> <code class="mi">1</code><code class="p">,</code> <code class="p">[</code><code class="nv">ToothNumber</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">]);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">alert</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">ToothNumber</code> <code class="o">+</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
<div class="sect2" id="_literal_stats_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id23"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">maximum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">range</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)).</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the maximum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">maximum</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)).</code>

<code class="nf">maximum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">maximum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&gt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Return the range (maximum and minimum) of a list of numbers</code>
<code class="c">%% as a two-element list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">range</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">number</code><code class="p">()]).</code>

<code class="nf">range</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION06-ET05">
<div class="titlepage"><div><div><h2 class="title">Solution 6-5</h2></div></div></div>
<p id="here_is_a_sugge_id20">Here is a suggested solution for
<a class="link" href="ch06.html#CH06-ET05" title="Étude 6-5: Random Numbers; Generating Lists of Lists">Étude 6-5</a>.</p>
<div class="sect2" id="_literal_non_fp_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">non_fp.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id24"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Generate a random set of teeth, with a certain</code>
<code class="c">%% percentage expected to be bad.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">non_fp</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">generate_teeth</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">test_teeth</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code>

<code class="c">%% @doc Generate a list of lists, six numbers per tooth, giving random</code>
<code class="c">%% pocket depths. Takes a string where T="there's a tooth there"</code>
<code class="c">%% and F="no tooth"), and a float giving probability that a tooth is good.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">generate_teeth</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="nb">float</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">(</code><code class="n">list</code><code class="p">(</code><code class="n">integer</code><code class="p">()))).</code>

<code class="nf">generate_teeth</code><code class="p">(</code><code class="nv">TeethPresent</code><code class="p">,</code> <code class="nv">ProbGood</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">random</code><code class="p">:</code><code class="n">seed</code><code class="p">(</code><code class="n">now</code><code class="p">()),</code>
  <code class="n">generate_teeth</code><code class="p">(</code><code class="nv">TeethPresent</code><code class="p">,</code> <code class="nv">ProbGood</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% @doc Helper function that adds tooth data to the ultimate result.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">generate_teeth</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="nb">float</code><code class="p">(),</code> <code class="p">[[</code><code class="n">integer</code><code class="p">()]])</code> <code class="o">-&gt;</code> <code class="p">[[</code><code class="n">integer</code><code class="p">()]]).</code>

<code class="nf">generate_teeth</code><code class="p">([],</code> <code class="p">_</code><code class="nv">Prob</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">Result</code><code class="p">);</code>

<code class="nf">generate_teeth</code><code class="p">([</code><code class="sc">$F</code> <code class="p">|</code> <code class="nv">Tail</code><code class="p">],</code> <code class="nv">ProbGood</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">generate_teeth</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">ProbGood</code><code class="p">,</code> <code class="p">[[</code><code class="mi">0</code><code class="p">]</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">]);</code>

<code class="nf">generate_teeth</code><code class="p">([</code><code class="sc">$T</code> <code class="p">|</code> <code class="nv">Tail</code><code class="p">],</code> <code class="nv">ProbGood</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">generate_teeth</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">ProbGood</code><code class="p">,</code>
  <code class="p">[</code><code class="n">generate_tooth</code><code class="p">(</code><code class="nv">ProbGood</code><code class="p">)</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">]).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">generate_tooth</code><code class="p">(</code><code class="nb">float</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">(</code><code class="n">integer</code><code class="p">())).</code>

<code class="c">%% @doc Generates a list of six numbers for a single tooth. Choose a</code>
<code class="c">%% random number between 0 and 1. If that number is less than the probability</code>
<code class="c">%% of a good tooth, it sets the "base depth" to 2, otherwise it sets the base</code>
<code class="c">%% depth to 3.</code>

<code class="nf">generate_tooth</code><code class="p">(</code><code class="nv">ProbGood</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Good</code> <code class="o">=</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">()</code> <code class="o">&lt;</code> <code class="nv">ProbGood</code><code class="p">,</code>
  <code class="k">case</code> <code class="nv">Good</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="nv">BaseDepth</code> <code class="o">=</code> <code class="mi">2</code><code class="p">;</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="nv">BaseDepth</code> <code class="o">=</code> <code class="mi">3</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="n">generate_tooth</code><code class="p">(</code><code class="nv">BaseDepth</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% @doc Take the base depth, add a number in range -1..1 to it,</code>
<code class="c">%% and add it to the list.</code>

<code class="nf">generate_tooth</code><code class="p">(_</code><code class="nv">Base</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">generate_tooth</code><code class="p">(</code><code class="nv">Base</code><code class="p">,</code> <code class="nv">N</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Base</code> <code class="o">+</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="mi">3</code><code class="p">)</code> <code class="o">-</code> <code class="mi">2</code> <code class="p">|</code> <code class="n">generate_tooth</code><code class="p">(</code><code class="nv">Base</code><code class="p">,</code> <code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)].</code>

<code class="nf">test_teeth</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">TList</code> <code class="o">=</code> <code class="s">"FTTTTTTTTTTTTTTFTTTTTTTTTTTTTTTT"</code><code class="p">,</code>
  <code class="nv">N</code> <code class="o">=</code> <code class="n">generate_teeth</code><code class="p">(</code><code class="nv">TList</code><code class="p">,</code> <code class="mi">0</code><code class="p">.</code><code class="mi">75</code><code class="p">),</code>
  <code class="n">print_tooth</code><code class="p">(</code><code class="nv">N</code><code class="p">).</code>

<code class="nf">print_tooth</code><code class="p">([])</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Finished.</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
<code class="nf">print_tooth</code><code class="p">([</code><code class="nv">H</code><code class="p">|</code><code class="nv">T</code><code class="p">])</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code><code class="p">]),</code>
  <code class="n">print_tooth</code><code class="p">(</code><code class="nv">T</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 7-1</h2></div></div></div>
<p id="here_is_a_sugge_id21">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET01" title="Étude 7-1: Simple Higher Order Functions">Étude 7-1</a>.</p>
<div class="sect2" id="_literal_calculus_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">calculus.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id25"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Find the derivative of a function Fn at point X.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">calculus</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">derivative</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Calculate derivative by classical definition.</code>
<code class="c">%% (Fn(X + H) - Fn(X)) / H</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">derivative</code><code class="p">(</code><code class="n">function</code><code class="p">(),</code> <code class="nb">float</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">derivative</code><code class="p">(</code><code class="nv">Fn</code><code class="p">,</code> <code class="nv">X</code><code class="p">)</code> <code class="o">-&gt;</code>
        <code class="nv">Delta</code> <code class="o">=</code> <code class="mi">1</code><code class="p">.</code><code class="mi">0</code><code class="n">e</code><code class="o">-</code><code class="mi">10</code><code class="p">,</code>
        <code class="p">(</code><code class="nv">Fn</code><code class="p">(</code><code class="nv">X</code> <code class="o">+</code> <code class="nv">Delta</code><code class="p">)</code> <code class="o">-</code> <code class="nv">Fn</code><code class="p">(</code><code class="nv">X</code><code class="p">))</code> <code class="o">/</code> <code class="nv">Delta</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 7-2</h2></div></div></div>
<p id="here_is_a_sugge_id22">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET02" title="Étude 7-2: List Comprehensions and Pattern Matching">Étude 7-2</a>.</p>
<div class="sect2" id="_literal_patmatch_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">patmatch.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id26"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Use pattern matching in a list comprehension.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">patmatch</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">older_males</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">older_or_male</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code>

<code class="c">%% @doc Select all males older than 40 from a list of tuples giving</code>
<code class="c">%% name, gender, and age.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">older_males</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">get_people</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="p">[{</code><code class="s">"Federico"</code><code class="p">,</code> <code class="sc">$M</code><code class="p">,</code> <code class="mi">22</code><code class="p">},</code> <code class="p">{</code><code class="s">"Kim"</code><code class="p">,</code> <code class="sc">$F</code><code class="p">,</code> <code class="mi">45</code><code class="p">},</code> <code class="p">{</code><code class="s">"Hansa"</code><code class="p">,</code> <code class="sc">$F</code><code class="p">,</code> <code class="mi">30</code><code class="p">},</code>
  <code class="p">{</code><code class="s">"Vu"</code><code class="p">,</code> <code class="sc">$M</code><code class="p">,</code> <code class="mi">47</code><code class="p">},</code> <code class="p">{</code><code class="s">"Cathy"</code><code class="p">,</code> <code class="sc">$F</code><code class="p">,</code> <code class="mi">32</code><code class="p">},</code> <code class="p">{</code><code class="s">"Elias"</code><code class="p">,</code> <code class="sc">$M</code><code class="p">,</code> <code class="mi">50</code><code class="p">}].</code>

<code class="nf">older_males</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">People</code> <code class="o">=</code> <code class="n">get_people</code><code class="p">(),</code>
  <code class="p">[</code><code class="nv">Name</code> <code class="p">||</code> <code class="p">{</code><code class="nv">Name</code><code class="p">,</code> <code class="nv">Gender</code><code class="p">,</code> <code class="nv">Age</code><code class="p">}</code> <code class="o">&lt;-</code> <code class="nv">People</code><code class="p">,</code> <code class="nv">Gender</code> <code class="o">==</code> <code class="sc">$M</code><code class="p">,</code> <code class="nv">Age</code> <code class="o">&gt;</code> <code class="mi">40</code><code class="p">].</code>

<code class="nf">older_or_male</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">People</code> <code class="o">=</code> <code class="n">get_people</code><code class="p">(),</code>
  <code class="p">[</code><code class="nv">Name</code> <code class="p">||</code> <code class="p">{</code><code class="nv">Name</code><code class="p">,</code> <code class="nv">Gender</code><code class="p">,</code> <code class="nv">Age</code><code class="p">}</code> <code class="o">&lt;-</code> <code class="nv">People</code><code class="p">,</code> <code class="p">(</code><code class="nv">Gender</code> <code class="o">==</code> <code class="sc">$M</code><code class="p">)</code> <code class="ow">orelse</code> <code class="p">(</code><code class="nv">Age</code> <code class="o">&gt;</code> <code class="mi">40</code><code class="p">)].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 7-3</h2></div></div></div>
<p id="here_is_a_sugge_id23">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET03" title="Étude 7-3: Using lists:foldl/3">Étude 7-3</a>.</p>
<div class="sect2" id="_literal_stats_erl_literal_4">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id27"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">maximum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">range</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">mean</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">stdv</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">stdv_sums</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)).</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the maximum item in a list of numbers. Fails when given</code>
<code class="c">%% an empty list, as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">maximum</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)).</code>

<code class="nf">maximum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">maximum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&gt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Return the range (maximum and minimum) of a list of numbers</code>
<code class="c">%% as a two-element list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">range</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">range</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)].</code>

<code class="c">%% @doc Return the mean of the list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">mean</code><code class="p">(</code><code class="n">list</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">mean</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Sum</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">V</code><code class="p">,</code> <code class="nv">A</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">V</code> <code class="o">+</code> <code class="nv">A</code> <code class="k">end</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">NumberList</code><code class="p">),</code>
  <code class="nv">Sum</code> <code class="o">/</code> <code class="nb">length</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">).</code>

<code class="nf">stdv_sums</code><code class="p">(</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Sum</code><code class="p">,</code> <code class="nv">SumSquares</code><code class="p">]</code> <code class="o">=</code> <code class="nv">Accumulator</code><code class="p">,</code>
  <code class="p">[</code><code class="nv">Sum</code> <code class="o">+</code> <code class="nv">Value</code><code class="p">,</code> <code class="nv">SumSquares</code> <code class="o">+</code> <code class="nv">Value</code> <code class="o">*</code> <code class="nv">Value</code><code class="p">].</code>

<code class="nf">stdv</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">N</code> <code class="o">=</code> <code class="nb">length</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code>
  <code class="p">[</code><code class="nv">Sum</code><code class="p">,</code> <code class="nv">SumSquares</code><code class="p">]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code> <code class="n">stdv_sums</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="p">[</code><code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">],</code> <code class="nv">NumberList</code><code class="p">),</code>
  <code class="nn">math</code><code class="p">:</code><code class="n">sqrt</code><code class="p">((</code><code class="nv">N</code> <code class="o">*</code> <code class="nv">SumSquares</code> <code class="o">-</code> <code class="nv">Sum</code> <code class="o">*</code> <code class="nv">Sum</code><code class="p">)</code> <code class="o">/</code> <code class="p">(</code><code class="nv">N</code> <code class="o">*</code> <code class="p">(</code><code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">))).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 7-4</h2></div></div></div>
<p id="here_is_a_sugge_id24">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET04" title="Étude 7-4: Using lists:split/2">Étude 7-4</a>.</p>
<div class="sect2" id="_literal_dates_erl_literal_4">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">dates.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id28"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for splitting a date into a list of</code>
<code class="c">%% year-month-day and finding Julian date.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">dates</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">date_parts</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">julian</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">is_leap_year</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns a list of integers in form [year, month, day].</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">date_parts</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">YStr</code><code class="p">,</code> <code class="nv">MStr</code><code class="p">,</code> <code class="nv">DStr</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[</code><code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">YStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">MStr</code><code class="p">)),</code>
    <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">DStr</code><code class="p">))].</code>

<code class="c">%% @doc Takes a string in ISO date format (yyyy-mm-dd) and</code>
<code class="c">%% returns the day of the year (Julian date).</code>
<code class="c">%% Works by summing the days per month up to, but not including,</code>
<code class="c">%% the month in question, then adding the number of days.</code>
<code class="c">%% If it's a leap year and past February, add a leap day.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">julian</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">julian</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">DaysPerMonth</code> <code class="o">=</code> <code class="p">[</code><code class="mi">31</code><code class="p">,</code> <code class="mi">28</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">,</code> <code class="mi">30</code><code class="p">,</code> <code class="mi">31</code><code class="p">],</code>
  <code class="p">[</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">]</code> <code class="o">=</code> <code class="n">date_parts</code><code class="p">(</code><code class="nv">DateStr</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Sublist</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">M</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">DaysPerMonth</code><code class="p">),</code>
  <code class="nv">Total</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">V</code><code class="p">,</code> <code class="nv">A</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">V</code> <code class="o">+</code> <code class="nv">A</code> <code class="k">end</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Sublist</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">M</code> <code class="o">&gt;</code> <code class="mi">2</code> <code class="ow">andalso</code> <code class="n">is_leap_year</code><code class="p">(</code><code class="nv">Y</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code> <code class="o">+</code> <code class="mi">1</code><code class="p">;</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="nv">Total</code> <code class="o">+</code> <code class="nv">D</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">is_leap_year</code><code class="p">(</code><code class="nv">Year</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">4</code> <code class="o">==</code> <code class="mi">0</code> <code class="ow">andalso</code> <code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">100</code> <code class="o">/=</code> <code class="mi">0</code><code class="p">)</code>
    <code class="ow">orelse</code> <code class="p">(</code><code class="nv">Year</code> <code class="ow">rem</code> <code class="mi">400</code> <code class="o">==</code> <code class="mi">0</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET05">
<div class="titlepage"><div><div><h2 class="title">Solution 7-5</h2></div></div></div>
<p id="here_is_a_sugge_id25">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET05" title="Étude 7-5: Multiple Generators in List Comprehensions">Étude 7-5</a>.</p>
<div class="sect2" id="_literal_cards_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">cards.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id29"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for playing a card game.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">cards</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">make_deck</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">show_deck</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc generate a deck of cards</code>
<code class="nf">make_deck</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="p">[{</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Suit</code><code class="p">}</code> <code class="p">||</code> <code class="nv">Value</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"A"</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">7</code><code class="p">,</code> <code class="mi">8</code><code class="p">,</code> <code class="mi">9</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="s">"J"</code><code class="p">,</code> <code class="s">"Q"</code><code class="p">,</code> <code class="s">"K"</code><code class="p">],</code>
    <code class="nv">Suit</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"Clubs"</code><code class="p">,</code> <code class="s">"Diamonds"</code><code class="p">,</code> <code class="s">"Hearts"</code><code class="p">,</code> <code class="s">"Spades"</code><code class="p">]].</code>

<code class="nf">show_deck</code><code class="p">(</code><code class="nv">Deck</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">foreach</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">Item</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Item</code><code class="p">])</code> <code class="k">end</code><code class="p">,</code> <code class="nv">Deck</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION07-ET06">
<div class="titlepage"><div><div><h2 class="title">Solution 7-6</h2></div></div></div>
<p id="here_is_a_sugge_id26">Here is a suggested solution for
<a class="link" href="ch07.html#CH07-ET06" title="Étude 7-6: Explaining an Algorithm">Étude 7-6</a>.</p>
<div class="sect2" id="_literal_cards_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">cards.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id30"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for playing a card game.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">cards</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">make_deck</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">shuffle</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc generate a deck of cards</code>
<code class="nf">make_deck</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="p">[{</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Suit</code><code class="p">}</code> <code class="p">||</code> <code class="nv">Value</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"A"</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">7</code><code class="p">,</code> <code class="mi">8</code><code class="p">,</code> <code class="mi">9</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="s">"J"</code><code class="p">,</code> <code class="s">"Q"</code><code class="p">,</code> <code class="s">"K"</code><code class="p">],</code>
    <code class="nv">Suit</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"Clubs"</code><code class="p">,</code> <code class="s">"Diamonds"</code><code class="p">,</code> <code class="s">"Hearts"</code><code class="p">,</code> <code class="s">"Spades"</code><code class="p">]].</code>

<code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% If the list is empty, return the accumulated value.</code>
<code class="nf">shuffle</code><code class="p">([],</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Acc</code><code class="p">;</code>

<code class="c">%% Otherwise, find a random location in the list and split the list</code>
<code class="c">%% at that location. Let's say the list has 52 elements and the random</code>
<code class="c">%% location is location 22. The first 22 elements go into Leading, and the</code>
<code class="c">%% last 30 elements go into [H|T]. Thus, H would contain element 23, and</code>
<code class="c">%% T would contain elements 24 through 52.</code>
<code class="c">%%</code>
<code class="c">%% H is the "chosen element". It goes into the accumulator (the shuffled list)</code>
<code class="c">%% and then we call shuffle again with the remainder of the deck: the</code>
<code class="c">%% leading elements and the tail of the split list.</code>

<code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Leading</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">T</code><code class="p">]}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">List</code><code class="p">))</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">List</code><code class="p">),</code>
  <code class="n">shuffle</code><code class="p">(</code><code class="nv">Leading</code> <code class="o">++</code> <code class="nv">T</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">Acc</code><code class="p">]).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION08-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 8-1</h2></div></div></div>
<p id="here_is_a_sugge_id27">Here is a suggested solution for
<a class="link" href="ch08.html#CH08-ET01" title="Étude 8-1: Using Processes to Simulate a Card Game">Étude 8-1</a>.</p>
<div class="sect2" id="_literal_cards_erl_literal_3">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">cards.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id31"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for playing card games.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">cards</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">make_deck</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">shuffle</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc generate a deck of cards</code>
<code class="p">-</code><code class="ni">type</code> <code class="n">card</code><code class="p">()::{</code><code class="n">string</code><code class="p">()|</code><code class="n">integer</code><code class="p">(),</code> <code class="n">string</code><code class="p">()}.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">make_deck</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">card</code><code class="p">()]).</code>

<code class="c">%%make_deck() -&gt;</code>
<code class="c">%%  [{Value, Suit} || Value &lt;- ["A", 2, 3, 4, 5, 6, 7, 8, 9, 10, "J", "Q", "K"],</code>
<code class="c">%%    Suit &lt;- ["Clubs", "Diamonds", "Hearts", "Spades"]].</code>

<code class="nf">make_deck</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="p">[{</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Suit</code><code class="p">}</code> <code class="p">||</code> <code class="nv">Value</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"A"</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">],</code>
    <code class="nv">Suit</code> <code class="o">&lt;-</code> <code class="p">[</code><code class="s">"Clubs"</code><code class="p">,</code> <code class="s">"Diamonds"</code><code class="p">]].</code>

<code class="c">%% Do a Fisher-Yates shuffle of a deck</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">shuffle</code><code class="p">([</code><code class="n">card</code><code class="p">()])</code><code class="o">-&gt;</code> <code class="p">[</code><code class="n">card</code><code class="p">()]).</code>

<code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% If the list is empty, return the accumulated value.</code>
<code class="nf">shuffle</code><code class="p">([],</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Acc</code><code class="p">;</code>

<code class="c">%% Otherwise, find a random location in the list and split the list</code>
<code class="c">%% at that location. Let's say the list has 52 elements and the random</code>
<code class="c">%% location is location 22. The first 22 elements go into Leading, and the</code>
<code class="c">%% last 30 elements go into [H|T]. Thus, H would contain element 23, and</code>
<code class="c">%% T would contain elements 24 through 52.</code>
<code class="c">%%</code>
<code class="c">%% H is the "chosen element". It goes into the accumulator (the shuffled list)</code>
<code class="c">%% and then we call shuffle again with the remainder of the deck: the</code>
<code class="c">%% leading elements and the tail of the split list.</code>

<code class="nf">shuffle</code><code class="p">(</code><code class="nv">List</code><code class="p">,</code> <code class="nv">Acc</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Leading</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">T</code><code class="p">]}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">List</code><code class="p">))</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">List</code><code class="p">),</code>
  <code class="n">shuffle</code><code class="p">(</code><code class="nv">Leading</code> <code class="o">++</code> <code class="nv">T</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code> <code class="p">|</code> <code class="nv">Acc</code><code class="p">]).</code></pre>
</div>
<div class="sect2" id="_literal_game_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">game.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id32"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Play the card game "war" with two players.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">game</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">play_game</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">dealer</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">player</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">value</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="c">%% @doc create a dealer</code>
<code class="nf">play_game</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nb">spawn</code><code class="p">(</code><code class="n">game</code><code class="p">,</code> <code class="n">dealer</code><code class="p">,</code> <code class="p">[]).</code>

<code class="nf">dealer</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">random</code><code class="p">:</code><code class="n">seed</code><code class="p">(</code><code class="n">now</code><code class="p">()),</code>
  <code class="nv">DealerPid</code> <code class="o">=</code> <code class="n">self</code><code class="p">(),</code>
  <code class="nv">Deck</code> <code class="o">=</code> <code class="nn">cards</code><code class="p">:</code><code class="n">shuffle</code><code class="p">(</code><code class="nn">cards</code><code class="p">:</code><code class="n">make_deck</code><code class="p">()),</code>
  <code class="p">{</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nb">trunc</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">Deck</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">),</code> <code class="nv">Deck</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"About to spawn players each with </code><code class="si">~p</code><code class="s"> cards.</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code>
    <code class="p">[</code><code class="nb">trunc</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">Deck</code><code class="p">)</code> <code class="o">/</code> <code class="mi">2</code><code class="p">)]),</code>
  <code class="nv">P1</code> <code class="o">=</code> <code class="nb">spawn</code><code class="p">(</code><code class="n">game</code><code class="p">,</code> <code class="n">player</code><code class="p">,</code> <code class="p">[</code><code class="nv">DealerPid</code><code class="p">,</code> <code class="nv">P1Cards</code><code class="p">]),</code>
  <code class="nv">P2</code> <code class="o">=</code> <code class="nb">spawn</code><code class="p">(</code><code class="n">game</code><code class="p">,</code> <code class="n">player</code><code class="p">,</code> <code class="p">[</code><code class="nv">DealerPid</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">]),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Spawned players </code><code class="si">~p</code><code class="s"> and </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">P1</code><code class="p">,</code> <code class="nv">P2</code><code class="p">]),</code>
  <code class="n">dealer</code><code class="p">([</code><code class="nv">P1</code><code class="p">,</code> <code class="nv">P2</code><code class="p">],</code> <code class="n">pre_battle</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%% The dealer has to keep track of the players' process IDs,</code>
<code class="c">%% the cards they have given to the dealer for comparison,</code>
<code class="c">%% how many players have responded (0, 1, or 2), and the pile</code>
<code class="c">%% in the middle of the table in case of a war.</code>

<code class="nf">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">,</code> <code class="nv">Count</code><code class="p">,</code> <code class="nv">Pile</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">P1</code><code class="p">,</code> <code class="nv">P2</code><code class="p">]</code> <code class="o">=</code> <code class="nv">Pids</code><code class="p">,</code>
  <code class="nv">NCards</code> <code class="o">=</code> <code class="k">if</code>
    <code class="nv">Pile</code> <code class="o">==</code> <code class="p">[]</code>  <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>
    <code class="nv">Pile</code> <code class="o">/=</code> <code class="p">[]</code> <code class="o">-&gt;</code> <code class="mi">3</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="k">case</code> <code class="nv">State</code> <code class="k">of</code>
    <code class="n">pre_battle</code> <code class="o">-&gt;</code>
      <code class="nv">P1</code> <code class="o">!</code> <code class="p">{</code><code class="n">give_cards</code><code class="p">,</code> <code class="nv">NCards</code><code class="p">},</code>
      <code class="nv">P2</code> <code class="o">!</code> <code class="p">{</code><code class="n">give_cards</code><code class="p">,</code> <code class="nv">NCards</code><code class="p">},</code>
      <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">await_battle</code><code class="p">,</code> <code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">,</code> <code class="nv">Count</code><code class="p">,</code> <code class="nv">Pile</code><code class="p">);</code>
    <code class="n">await_battle</code> <code class="o">-&gt;</code>
      <code class="k">receive</code>
        <code class="p">{</code><code class="n">accept</code><code class="p">,</code> <code class="nv">Pid</code><code class="p">,</code> <code class="nv">Data</code><code class="p">}</code> <code class="o">-&gt;</code>
          <code class="nv">NextCount</code> <code class="o">=</code> <code class="nv">Count</code> <code class="o">+</code> <code class="mi">1</code><code class="p">,</code>
          <code class="k">case</code> <code class="nv">Pid</code> <code class="k">of</code>
            <code class="nv">P1</code> <code class="o">-&gt;</code> <code class="nv">Next_P1Cards</code> <code class="o">=</code> <code class="nv">Data</code><code class="p">,</code> <code class="nv">Next_P2Cards</code> <code class="o">=</code> <code class="nv">P2Cards</code><code class="p">;</code>
            <code class="nv">P2</code> <code class="o">-&gt;</code> <code class="nv">Next_P1Cards</code> <code class="o">=</code> <code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">Next_P2Cards</code> <code class="o">=</code> <code class="nv">Data</code>
          <code class="k">end</code>
      <code class="k">end</code><code class="p">,</code>
      <code class="k">if</code>
        <code class="nv">NextCount</code> <code class="o">==</code> <code class="mi">2</code> <code class="o">-&gt;</code> <code class="nv">NextState</code> <code class="o">=</code> <code class="n">check_cards</code><code class="p">;</code>
        <code class="nv">NextCount</code> <code class="o">/=</code> <code class="mi">2</code> <code class="o">-&gt;</code> <code class="nv">NextState</code> <code class="o">=</code> <code class="nv">State</code>
      <code class="k">end</code><code class="p">,</code>
      <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="nv">NextState</code><code class="p">,</code> <code class="nv">Next_P1Cards</code><code class="p">,</code> <code class="nv">Next_P2Cards</code><code class="p">,</code>
        <code class="nv">NextCount</code><code class="p">,</code> <code class="nv">Pile</code><code class="p">);</code>
    <code class="n">check_cards</code> <code class="o">-&gt;</code>
      <code class="nv">Winner</code> <code class="o">=</code> <code class="n">game_winner</code><code class="p">(</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">),</code>
      <code class="k">case</code> <code class="nv">Winner</code> <code class="k">of</code>
        <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Compare </code><code class="si">~p</code><code class="s"> to </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">]),</code>
          <code class="nv">NewPile</code> <code class="o">=</code> <code class="nv">Pile</code> <code class="o">++</code> <code class="nv">P1Cards</code> <code class="o">++</code> <code class="nv">P2Cards</code><code class="p">,</code>
          <code class="k">case</code> <code class="n">battle_winner</code><code class="p">(</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">)</code> <code class="k">of</code>
             <code class="mi">0</code> <code class="o">-&gt;</code> <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">pre_battle</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">NewPile</code><code class="p">);</code>
             <code class="mi">1</code> <code class="o">-&gt;</code>
              <code class="nv">P1</code> <code class="o">!</code> <code class="p">{</code><code class="n">take_cards</code><code class="p">,</code> <code class="nv">NewPile</code><code class="p">},</code>
              <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">await_confirmation</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="p">[]);</code>
             <code class="mi">2</code> <code class="o">-&gt;</code>
              <code class="nv">P2</code> <code class="o">!</code> <code class="p">{</code><code class="n">take_cards</code><code class="p">,</code> <code class="nv">NewPile</code><code class="p">},</code>
              <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">await_confirmation</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="p">[])</code>
           <code class="k">end</code><code class="p">;</code>
        <code class="mi">3</code> <code class="o">-&gt;</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"It's a draw!</code><code class="si">~n</code><code class="s">"</code><code class="p">),</code>
          <code class="n">end_game</code><code class="p">(</code><code class="nv">Pids</code><code class="p">);</code>
        <code class="p">_</code> <code class="o">-&gt;</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Player </code><code class="si">~p</code><code class="s"> wins</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Winner</code><code class="p">]),</code>
          <code class="n">end_game</code><code class="p">(</code><code class="nv">Pids</code><code class="p">)</code>
      <code class="k">end</code><code class="p">;</code>
    <code class="n">await_war</code><code class="o">-&gt;</code>
      <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Awaiting war</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
    <code class="n">await_confirmation</code> <code class="o">-&gt;</code>
      <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Awaiting confirmation of player receiving cards</code><code class="si">~n</code><code class="s">"</code><code class="p">),</code>
      <code class="k">receive</code>
        <code class="p">{</code><code class="n">confirmed</code><code class="p">,</code> <code class="p">_</code><code class="nv">Pid</code><code class="p">,</code> <code class="p">_</code><code class="nv">Data</code><code class="p">}</code> <code class="o">-&gt;</code>
        <code class="n">dealer</code><code class="p">(</code><code class="nv">Pids</code><code class="p">,</code> <code class="n">pre_battle</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="p">[])</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">end_game</code><code class="p">(</code><code class="nv">Pids</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">foreach</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">Process</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nb">exit</code><code class="p">(</code><code class="nv">Process</code><code class="p">,</code> <code class="n">kill</code><code class="p">)</code> <code class="k">end</code><code class="p">,</code> <code class="nv">Pids</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Game finished.</code><code class="si">~n</code><code class="s">"</code><code class="p">).</code>

<code class="c">%% Do we have a winner? If both players are out of cards,</code>
<code class="c">%% it's a draw. If one player is out of cards, the other is the winner.</code>

<code class="nf">game_winner</code><code class="p">([],</code> <code class="p">[])</code> <code class="o">-&gt;</code> <code class="mi">3</code><code class="p">;</code>
<code class="nf">game_winner</code><code class="p">([],</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="mi">2</code><code class="p">;</code>
<code class="nf">game_winner</code><code class="p">(_,</code> <code class="p">[])</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>
<code class="nf">game_winner</code><code class="p">(_,</code> <code class="p">_)</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">.</code>

<code class="nf">battle_winner</code><code class="p">(</code><code class="nv">P1Cards</code><code class="p">,</code> <code class="nv">P2Cards</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">V1</code> <code class="o">=</code> <code class="n">value</code><code class="p">(</code><code class="nb">hd</code><code class="p">(</code><code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">P1Cards</code><code class="p">))),</code>
  <code class="nv">V2</code> <code class="o">=</code> <code class="n">value</code><code class="p">(</code><code class="nb">hd</code><code class="p">(</code><code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">P2Cards</code><code class="p">))),</code>
  <code class="nv">Winner</code> <code class="o">=</code> <code class="k">if</code>
    <code class="nv">V1</code> <code class="o">&gt;</code> <code class="nv">V2</code> <code class="o">-&gt;</code> <code class="mi">1</code><code class="p">;</code>
    <code class="nv">V2</code> <code class="o">&gt;</code> <code class="nv">V1</code> <code class="o">-&gt;</code> <code class="mi">2</code><code class="p">;</code>
    <code class="nv">V1</code> <code class="o">==</code> <code class="nv">V2</code> <code class="o">-&gt;</code> <code class="mi">0</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Winner of </code><code class="si">~p</code><code class="s"> vs. </code><code class="si">~p</code><code class="s"> is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">V1</code><code class="p">,</code> <code class="nv">V2</code><code class="p">,</code> <code class="nv">Winner</code><code class="p">]),</code>
  <code class="nv">Winner</code> <code class="o">=</code> <code class="nv">Winner</code><code class="p">.</code>

<code class="nf">player</code><code class="p">(</code><code class="nv">Dealer</code><code class="p">,</code> <code class="nv">Hand</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">receive</code>
    <code class="p">{</code><code class="nv">Command</code><code class="p">,</code> <code class="nv">Data</code><code class="p">}</code> <code class="o">-&gt;</code>
      <code class="k">case</code> <code class="nv">Command</code> <code class="k">of</code>
        <code class="n">give_cards</code> <code class="o">-&gt;</code>
          <code class="p">{</code><code class="nv">ToSend</code><code class="p">,</code> <code class="nv">NewHand</code><code class="p">}</code> <code class="o">=</code> <code class="n">give_cards</code><code class="p">(</code><code class="nv">Hand</code><code class="p">,</code> <code class="nv">Data</code><code class="p">),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Sending </code><code class="si">~p</code><code class="s"> to </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">ToSend</code><code class="p">,</code> <code class="nv">Dealer</code><code class="p">]),</code>
          <code class="nv">Dealer</code><code class="o">!</code><code class="p">{</code><code class="n">accept</code><code class="p">,</code> <code class="n">self</code><code class="p">(),</code> <code class="nv">ToSend</code><code class="p">};</code>
        <code class="n">take_cards</code> <code class="o">-&gt;</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~p</code><code class="s"> now has </code><code class="si">~p</code><code class="s"> (cards)</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="n">self</code><code class="p">(),</code>
            <code class="nb">length</code><code class="p">(</code><code class="nv">Data</code><code class="p">)</code> <code class="o">+</code> <code class="nb">length</code><code class="p">(</code><code class="nv">Hand</code><code class="p">)]),</code>
          <code class="nv">NewHand</code> <code class="o">=</code> <code class="nv">Hand</code> <code class="o">++</code> <code class="nv">Data</code><code class="p">,</code>
          <code class="nv">Dealer</code><code class="o">!</code><code class="p">{</code><code class="n">confirmed</code><code class="p">,</code> <code class="n">self</code><code class="p">(),</code> <code class="p">[]}</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="n">player</code><code class="p">(</code><code class="nv">Dealer</code><code class="p">,</code> <code class="nv">NewHand</code><code class="p">).</code>

<code class="c">%% Player gives N cards from current Hand. N is 1 or 3,</code>
<code class="c">%% depending if there is a war or not.</code>
<code class="c">%% If a player is asked for 3 cards but doesn't have enough,</code>
<code class="c">%% give all the cards in the hand.</code>
<code class="c">%% This function returns a tuple: {[cards to send], [remaining cards in hand]}</code>

<code class="nf">give_cards</code><code class="p">([],</code> <code class="p">_</code><code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">{[],[]};</code>
<code class="nf">give_cards</code><code class="p">([</code><code class="nv">A</code><code class="p">],</code> <code class="p">_</code><code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">{[</code><code class="nv">A</code><code class="p">],[]};</code>
<code class="nf">give_cards</code><code class="p">([</code><code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">],</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nv">N</code> <code class="o">==</code> <code class="mi">1</code> <code class="o">-&gt;</code> <code class="p">{[</code><code class="nv">A</code><code class="p">],</code> <code class="p">[</code><code class="nv">B</code><code class="p">]};</code>
    <code class="nv">N</code> <code class="o">==</code> <code class="mi">3</code> <code class="o">-&gt;</code> <code class="p">{[</code><code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">],</code> <code class="p">[]}</code>
  <code class="k">end</code><code class="p">;</code>
<code class="nf">give_cards</code><code class="p">(</code><code class="nv">Hand</code><code class="p">,</code> <code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nv">N</code> <code class="o">==</code> <code class="mi">1</code> <code class="o">-&gt;</code> <code class="p">{[</code><code class="nb">hd</code><code class="p">(</code><code class="nv">Hand</code><code class="p">)],</code> <code class="nb">tl</code><code class="p">(</code><code class="nv">Hand</code><code class="p">)};</code>
    <code class="nv">N</code> <code class="o">==</code> <code class="mi">3</code> <code class="o">-&gt;</code>
      <code class="p">[</code><code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">C</code> <code class="p">|</code> <code class="nv">Remainder</code><code class="p">]</code> <code class="o">=</code> <code class="nv">Hand</code><code class="p">,</code>
      <code class="p">{[</code><code class="nv">A</code><code class="p">,</code> <code class="nv">B</code><code class="p">,</code> <code class="nv">C</code><code class="p">],</code> <code class="nv">Remainder</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the value of a card. Aces are high; K &gt; Q &gt; J</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">value</code><code class="p">({</code><code class="nn">cards</code><code class="p">:</code><code class="n">card</code><code class="p">()})</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">value</code><code class="p">({</code><code class="nv">V</code><code class="p">,</code> <code class="p">_</code><code class="nv">Suit</code><code class="p">})</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nb">is_integer</code><code class="p">(</code><code class="nv">V</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">V</code><code class="p">;</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">V</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="k">case</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">V</code><code class="p">)</code> <code class="k">of</code>
        <code class="sc">$J</code> <code class="o">-&gt;</code> <code class="mi">11</code><code class="p">;</code>
        <code class="sc">$Q</code> <code class="o">-&gt;</code> <code class="mi">12</code><code class="p">;</code>
        <code class="sc">$K</code> <code class="o">-&gt;</code> <code class="mi">13</code><code class="p">;</code>
        <code class="sc">$A</code> <code class="o">-&gt;</code> <code class="mi">14</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION09-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 9-1</h2></div></div></div>
<p id="here_is_a_sugge_id28">Here is a suggested solution for
<a class="link" href="ch09.html#CH09-ET01" title="Étude 9-1: try and catch">Étude 9-1</a>.</p>
<div class="sect2" id="_literal_stats_erl_literal_5">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">stats.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id33"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Functions for calculating basic statistics on a list of numbers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">stats</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">minimum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">maximum</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">range</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">mean</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">stdv</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">stdv_sums</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="c">%% @doc Returns the minimum item in a list of numbers. Uses</code>
<code class="c">%% try/catch to return an error when there's an empty list,</code>
<code class="c">%% as there's nothing reasonable to return.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">minimum</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">try</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">))</code> <code class="k">of</code>
    <code class="nv">Answer</code> <code class="o">-&gt;</code> <code class="nv">Answer</code>
  <code class="k">catch</code>
    <code class="nn">error</code><code class="p">:</code><code class="nv">Error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="nv">Error</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">minimum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">minimum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&lt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">minimum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Returns the maximum item in a list of numbers. Catches</code>
<code class="c">%% errors when given an empty list.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">maximum</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="nf">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">try</code>
    <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">,</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">))</code>
  <code class="k">catch</code>
    <code class="nn">error</code><code class="p">:</code><code class="nv">Error</code><code class="o">-&gt;</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="nv">Error</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">maximum</code><code class="p">([],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>

<code class="nf">maximum</code><code class="p">([</code><code class="nv">Head</code><code class="p">|</code><code class="nv">Tail</code><code class="p">],</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Head</code> <code class="o">&gt;</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Head</code><code class="p">);</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">Tail</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Return the range (maximum and minimum) of a list of numbers</code>
<code class="c">%% as a two-element list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">range</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">list</code><code class="p">()).</code>

<code class="nf">range</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">minimum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code> <code class="n">maximum</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)].</code>

<code class="c">%% @doc Return the mean of the list.</code>
<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">mean</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">mean</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">try</code>
    <code class="nv">Sum</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">V</code><code class="p">,</code> <code class="nv">A</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nv">V</code> <code class="o">+</code> <code class="nv">A</code> <code class="k">end</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">NumberList</code><code class="p">),</code>
    <code class="nv">Sum</code> <code class="o">/</code> <code class="nb">length</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code>
  <code class="k">catch</code>
    <code class="nn">error</code><code class="p">:</code><code class="nv">Error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="nv">Error</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Helper function to generate sums and sums of squares</code>
<code class="c">%% when calculating standard deviation.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">stdv_sums</code><code class="p">(</code><code class="n">number</code><code class="p">(),[</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">number</code><code class="p">()]).</code>

<code class="nf">stdv_sums</code><code class="p">(</code><code class="nv">Value</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Sum</code><code class="p">,</code> <code class="nv">SumSquares</code><code class="p">]</code> <code class="o">=</code> <code class="nv">Accumulator</code><code class="p">,</code>
  <code class="p">[</code><code class="nv">Sum</code> <code class="o">+</code> <code class="nv">Value</code><code class="p">,</code> <code class="nv">SumSquares</code> <code class="o">+</code> <code class="nv">Value</code> <code class="o">*</code> <code class="nv">Value</code><code class="p">].</code>

<code class="c">%% @doc Calculate the standard deviation of a list of numbers.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">stdv</code><code class="p">([</code><code class="n">number</code><code class="p">()])</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">stdv</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">N</code> <code class="o">=</code> <code class="nb">length</code><code class="p">(</code><code class="nv">NumberList</code><code class="p">),</code>
  <code class="k">try</code>
    <code class="p">[</code><code class="nv">Sum</code><code class="p">,</code> <code class="nv">SumSquares</code><code class="p">]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code> <code class="n">stdv_sums</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="p">[</code><code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">],</code> <code class="nv">NumberList</code><code class="p">),</code>
    <code class="nn">math</code><code class="p">:</code><code class="n">sqrt</code><code class="p">((</code><code class="nv">N</code> <code class="o">*</code> <code class="nv">SumSquares</code> <code class="o">-</code> <code class="nv">Sum</code> <code class="o">*</code> <code class="nv">Sum</code><code class="p">)</code> <code class="o">/</code> <code class="p">(</code><code class="nv">N</code> <code class="o">*</code> <code class="p">(</code><code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)))</code>
  <code class="k">catch</code>
    <code class="nn">error</code><code class="p">:</code><code class="nv">Error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="nv">Error</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION09-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 9-2</h2></div></div></div>
<p id="here_is_a_sugge_id29">Here is a suggested solution for
<a class="link" href="ch09.html#CH09-ET02" title="Étude 9-2: Logging Errors">Étude 9-2</a>.</p>
<div class="sect2" id="_literal_bank_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">bank.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id34"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Implement a bank account that logs its transactions.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">bank</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">account</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">account</code><code class="p">(</code><code class="n">number</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">number</code><code class="p">()).</code>

<code class="c">%% @doc create a client and give it a starting balance</code>

<code class="nf">account</code><code class="p">(</code><code class="nv">Balance</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Input</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="s">"D)eposit, W)ithdraw, B)alance, Q)uit: "</code><code class="p">),</code>
  <code class="nv">Action</code> <code class="o">=</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">Input</code><code class="p">),</code>

  <code class="k">case</code> <code class="nv">Action</code> <code class="k">of</code>
    <code class="sc">$D</code> <code class="o">-&gt;</code>
      <code class="nv">Amount</code> <code class="o">=</code> <code class="n">get_number</code><code class="p">(</code><code class="s">"Amount to deposit: "</code><code class="p">),</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="n">transaction</code><code class="p">(</code><code class="n">deposit</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">,</code> <code class="nv">Amount</code><code class="p">);</code>
    <code class="sc">$W</code> <code class="o">-&gt;</code>
      <code class="nv">Amount</code> <code class="o">=</code> <code class="n">get_number</code><code class="p">(</code><code class="s">"Amount to withdraw: "</code><code class="p">),</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="n">transaction</code><code class="p">(</code><code class="n">withdraw</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">,</code> <code class="nv">Amount</code><code class="p">);</code>
    <code class="sc">$B</code> <code class="o">-&gt;</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="n">transaction</code><code class="p">(</code><code class="n">balance</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">);</code>
    <code class="sc">$Q</code> <code class="o">-&gt;</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code>
      <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Unknown command </code><code class="si">~c~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Action</code><code class="p">]),</code>
      <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="k">if</code>
    <code class="nv">Action</code> <code class="o">/=</code> <code class="sc">$Q</code> <code class="o">-&gt;</code>
    <code class="n">account</code><code class="p">(</code><code class="nv">NewBalance</code><code class="p">);</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="n">true</code>
  <code class="k">end</code><code class="p">.</code>


<code class="c">%% @doc Present a prompt and get a number from the</code>
<code class="c">%% user. Allow either integers or floats.</code>
<code class="nf">get_number</code><code class="p">(</code><code class="nv">Prompt</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Str</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">Prompt</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Test</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">Test</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="nv">N</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">Str</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">N</code> <code class="o">=</code> <code class="nv">Test</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nv">N</code><code class="p">.</code>

<code class="nf">transaction</code><code class="p">(</code><code class="nv">Action</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">,</code> <code class="nv">Amount</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nv">Action</code> <code class="k">of</code>
    <code class="n">deposit</code> <code class="o">-&gt;</code>
      <code class="k">if</code>
        <code class="nv">Amount</code> <code class="o">&gt;=</code> <code class="mi">10000</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">warning_msg</code><code class="p">(</code><code class="s">"Excessive deposit </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Your deposit of $</code><code class="si">~p</code><code class="s"> may be subject to hold."</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Your new balance is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Balance</code> <code class="o">+</code> <code class="nv">Amount</code><code class="p">]),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code> <code class="o">+</code> <code class="nv">Amount</code><code class="p">;</code>
        <code class="nv">Amount</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">error_msg</code><code class="p">(</code><code class="s">"Negative deposit amount </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Deposits may not be less than zero."</code><code class="p">),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code><code class="p">;</code>
        <code class="nv">Amount</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">info_msg</code><code class="p">(</code><code class="s">"Successful deposit </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code> <code class="o">+</code> <code class="nv">Amount</code><code class="p">,</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Your new balance is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">NewBalance</code><code class="p">])</code>
      <code class="k">end</code><code class="p">;</code>
    <code class="n">withdraw</code> <code class="o">-&gt;</code>
      <code class="k">if</code>
        <code class="nv">Amount</code> <code class="o">&gt;</code> <code class="nv">Balance</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">error_msg</code><code class="p">(</code><code class="s">"Overdraw </code><code class="si">~p</code><code class="s"> from balance </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">,</code>
            <code class="nv">Balance</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"You cannot withdraw more than your current balance of </code><code class="si">~p</code><code class="s">.</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code>
            <code class="p">[</code><code class="nv">Balance</code><code class="p">]),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code><code class="p">;</code>
        <code class="nv">Amount</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">error_msg</code><code class="p">(</code><code class="s">"Negative withdrawal amount </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Withdrawals may not be less than zero."</code><code class="p">),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code><code class="p">;</code>
        <code class="nv">Amount</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">-&gt;</code>
          <code class="nn">error_logger</code><code class="p">:</code><code class="n">info_msg</code><code class="p">(</code><code class="s">"Successful withdrawal </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Amount</code><code class="p">]),</code>
          <code class="nv">NewBalance</code> <code class="o">=</code> <code class="nv">Balance</code> <code class="o">-</code> <code class="nv">Amount</code><code class="p">,</code>
          <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Your new balance is </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">NewBalance</code><code class="p">])</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="nv">NewBalance</code><code class="p">.</code>

<code class="nf">transaction</code><code class="p">(</code><code class="n">balance</code><code class="p">,</code> <code class="nv">Balance</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">error_logger</code><code class="p">:</code><code class="n">info_msg</code><code class="p">(</code><code class="s">"Balance inquiry </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Balance</code><code class="p">]),</code>
  <code class="nv">Balance</code><code class="p">.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION10-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 10-1</h2></div></div></div>
<p id="here_is_a_sugge_id30">Here is a suggested solution for
<a class="link" href="ch10.html#CH10-ET01" title="Étude 10-1: Using ETS">Étude 10-1</a>.</p>
<div class="sect2" id="_literal_phone_records_hrl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">phone_records.hrl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="recordphone_c_id1"><code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">phone_call</code><code class="p">,</code>
  <code class="p">{</code><code class="n">phone_number</code><code class="p">,</code> <code class="n">start_date</code><code class="p">,</code> <code class="n">start_time</code><code class="p">,</code> <code class="n">end_date</code><code class="p">,</code> <code class="n">end_time</code><code class="p">}).</code></pre>
</div>
<div class="sect2" id="_literal_phone_ets_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">phone_ets.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id35"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Read in a database of phone calls</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">phone_ets</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">setup</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">summary</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">summary</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>
<code class="p">-</code><code class="ni">include</code><code class="p">(</code><code class="s">"phone_records.hrl"</code><code class="p">).</code>

<code class="c">%% @doc Create an ets table of phone calls from the given file name.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">setup</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">setup</code><code class="p">(</code><code class="nv">FileName</code><code class="p">)</code> <code class="o">-&gt;</code>

  <code class="c">%% If the table exists, delete it</code>
  <code class="k">case</code> <code class="nn">ets</code><code class="p">:</code><code class="n">info</code><code class="p">(</code><code class="n">call_table</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">undefined</code> <code class="o">-&gt;</code> <code class="n">false</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nn">ets</code><code class="p">:</code><code class="n">delete</code><code class="p">(</code><code class="n">call_table</code><code class="p">)</code>
   <code class="k">end</code><code class="p">,</code>

  <code class="c">%% and create it anew</code>
  <code class="nn">ets</code><code class="p">:</code><code class="n">new</code><code class="p">(</code><code class="n">call_table</code><code class="p">,</code> <code class="p">[</code><code class="n">named_table</code><code class="p">,</code> <code class="n">bag</code><code class="p">,</code>
    <code class="p">{</code><code class="n">keypos</code><code class="p">,</code> <code class="nl">#phone_call.phone_number</code><code class="p">}]),</code>

  <code class="p">{</code><code class="nv">ResultCode</code><code class="p">,</code> <code class="nv">InputFile</code><code class="p">}</code> <code class="o">=</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="nv">FileName</code><code class="p">,</code> <code class="p">[</code><code class="n">read</code><code class="p">]),</code>
  <code class="k">case</code> <code class="nv">ResultCode</code> <code class="k">of</code>
    <code class="n">ok</code> <code class="o">-&gt;</code> <code class="n">read_item</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error opening file: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">InputFile</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% Read a line from the input file, and insert its contents into</code>
<code class="c">%% the call_table. This function is called recursively until end of file</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">read_item</code><code class="p">(</code><code class="nn">file</code><code class="p">:</code><code class="n">io_device</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">read_item</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">RawData</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">),</code>
  <code class="k">if</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">RawData</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nv">Data</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">strip</code><code class="p">(</code><code class="nv">RawData</code><code class="p">,</code> <code class="n">right</code><code class="p">,</code> <code class="sc">$\n</code><code class="p">),</code>
      <code class="p">[</code><code class="nv">Number</code><code class="p">,</code> <code class="nv">SDate</code><code class="p">,</code> <code class="nv">STime</code><code class="p">,</code> <code class="nv">EDate</code><code class="p">,</code> <code class="nv">ETime</code><code class="p">]</code> <code class="o">=</code>
        <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Data</code><code class="p">,</code> <code class="s">","</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
      <code class="nn">ets</code><code class="p">:</code><code class="n">insert</code><code class="p">(</code><code class="n">call_table</code><code class="p">,</code> <code class="nl">#phone_call</code><code class="p">{</code><code class="n">phone_number</code> <code class="o">=</code> <code class="nv">Number</code><code class="p">,</code>
        <code class="n">start_date</code> <code class="o">=</code> <code class="n">to_date</code><code class="p">(</code><code class="nv">SDate</code><code class="p">),</code> <code class="n">start_time</code> <code class="o">=</code> <code class="n">to_time</code><code class="p">(</code><code class="nv">STime</code><code class="p">),</code>
        <code class="n">end_date</code> <code class="o">=</code> <code class="n">to_date</code><code class="p">(</code><code class="nv">EDate</code><code class="p">),</code> <code class="n">end_time</code><code class="o">=</code> <code class="n">to_time</code><code class="p">(</code><code class="nv">ETime</code><code class="p">)}),</code>
      <code class="n">read_item</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">);</code>
    <code class="nv">RawData</code> <code class="o">==</code> <code class="n">eof</code> <code class="o">-&gt;</code> <code class="n">ok</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Convert a string in form "yyyy-mm-dd" to a tuple {yyyy, mm, dd}</code>
<code class="c">%% suitable for use with the calendar module.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_date</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">()}).</code>

<code class="nf">to_date</code><code class="p">(</code><code class="nv">Date</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Year</code><code class="p">,</code> <code class="nv">Month</code><code class="p">,</code> <code class="nv">Day</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Date</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[{</code><code class="nv">Y</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">D</code><code class="p">,</code> <code class="p">_}]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">Year</code><code class="p">,</code> <code class="nv">Month</code><code class="p">,</code> <code class="nv">Day</code><code class="p">]),</code>
  <code class="p">{</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">}.</code>

<code class="c">%% @doc Convert a string in form "hh:mm:ss" to a tuple {hh, mm, ss}</code>
<code class="c">%% suitable for use with the calendar module.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_time</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">()}).</code>

<code class="nf">to_time</code><code class="p">(</code><code class="nv">Time</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Hour</code><code class="p">,</code> <code class="nv">Minute</code><code class="p">,</code> <code class="nv">Second</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Time</code><code class="p">,</code> <code class="s">":"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[{</code><code class="nv">H</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">S</code><code class="p">,</code> <code class="p">_}]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">Hour</code><code class="p">,</code> <code class="nv">Minute</code><code class="p">,</code> <code class="nv">Second</code><code class="p">]),</code>
  <code class="p">{</code><code class="nv">H</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">S</code><code class="p">}.</code>

<code class="c">%% @doc Create a summary of number of minutes used by all phone numbers.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">summary</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">tuple</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())]).</code>

<code class="nf">summary</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">FirstKey</code> <code class="o">=</code> <code class="nn">ets</code><code class="p">:</code><code class="n">first</code><code class="p">(</code><code class="n">call_table</code><code class="p">),</code>
  <code class="n">summary</code><code class="p">(</code><code class="nv">FirstKey</code><code class="p">,</code> <code class="p">[]).</code>

<code class="nf">summary</code><code class="p">(</code><code class="nv">Key</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">NextKey</code> <code class="o">=</code> <code class="nn">ets</code><code class="p">:</code><code class="n">next</code><code class="p">(</code><code class="n">call_table</code><code class="p">,</code> <code class="nv">Key</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">NextKey</code> <code class="k">of</code>
    <code class="n">'$end_of_table'</code> <code class="o">-&gt;</code> <code class="nv">Result</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="n">summary</code><code class="p">(</code><code class="nv">NextKey</code><code class="p">,</code> <code class="p">[</code><code class="nb">hd</code><code class="p">(</code><code class="n">summary</code><code class="p">(</code><code class="nv">Key</code><code class="p">))</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Create a summary of number of minutes used by one phone number.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">summary</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">tuple</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">integer</code><code class="p">())]).</code>

<code class="nf">summary</code><code class="p">(</code><code class="nv">PhoneNumber</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Calls</code> <code class="o">=</code> <code class="nn">ets</code><code class="p">:</code><code class="n">lookup</code><code class="p">(</code><code class="n">call_table</code><code class="p">,</code> <code class="nv">PhoneNumber</code><code class="p">),</code>
  <code class="nv">Total</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code> <code class="n">subtotal</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Calls</code><code class="p">),</code>
  <code class="p">[{</code><code class="nv">PhoneNumber</code><code class="p">,</code> <code class="nv">Total</code><code class="p">}].</code>

<code class="nf">subtotal</code><code class="p">(</code><code class="nv">Item</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">StartSeconds</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">(</code>
    <code class="p">{</code><code class="nv">Item</code><code class="nl">#phone_call.start_date</code><code class="p">,</code> <code class="nv">Item</code><code class="nl">#phone_call.start_time</code><code class="p">}),</code>
  <code class="nv">EndSeconds</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">(</code>
    <code class="p">{</code><code class="nv">Item</code><code class="nl">#phone_call.end_date</code><code class="p">,</code> <code class="nv">Item</code><code class="nl">#phone_call.end_time</code><code class="p">}),</code>
  <code class="nv">Accumulator</code> <code class="o">+</code> <code class="p">((</code><code class="nv">EndSeconds</code> <code class="o">-</code> <code class="nv">StartSeconds</code> <code class="o">+</code> <code class="mi">59</code><code class="p">)</code> <code class="ow">div</code> <code class="mi">60</code><code class="p">).</code></pre>
</div>
<div class="sect2" id="_literal_generate_calls_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">generate_calls.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id36"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Generate a random set of data for phone calls</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">generate_calls</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">make_call_list</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">format_date</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">format_time</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code>

<code class="nf">make_call_list</code><code class="p">(</code><code class="nv">N</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Now</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">({{</code><code class="mi">2013</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">10</code><code class="p">},</code> <code class="p">{</code><code class="mi">9</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">0</code><code class="p">}}),</code>
  <code class="nv">Numbers</code> <code class="o">=</code> <code class="p">[</code>
    <code class="p">{</code><code class="s">"213-555-0172"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"301-555-0433"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"415-555-7871"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"650-555-3326"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"729-555-8855"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"838-555-1099"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">},</code>
    <code class="p">{</code><code class="s">"946-555-9760"</code><code class="p">,</code> <code class="nv">Now</code><code class="p">}</code>
  <code class="p">],</code>
  <code class="nv">CallList</code> <code class="o">=</code> <code class="n">make_call_list</code><code class="p">(</code><code class="nv">N</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">,</code> <code class="p">[]),</code>
  <code class="p">{</code><code class="nv">Result</code><code class="p">,</code> <code class="nv">OutputFile</code><code class="p">}</code> <code class="o">=</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="s">"call_list.csv"</code><code class="p">,</code> <code class="p">[</code><code class="n">write</code><code class="p">]),</code>
  <code class="k">case</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">ok</code> <code class="o">-&gt;</code> <code class="n">write_item</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="nv">CallList</code><code class="p">);</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="nv">OutputFile</code><code class="p">)</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">make_call_list</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code> <code class="p">_</code><code class="nv">Numbers</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">reverse</code><code class="p">(</code><code class="nv">Result</code><code class="p">);</code>

<code class="nf">make_call_list</code><code class="p">(</code><code class="nv">N</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">,</code> <code class="nv">Result</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Entry</code> <code class="o">=</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="nb">length</code><code class="p">(</code><code class="nv">Numbers</code><code class="p">)),</code>
  <code class="p">{</code><code class="nv">Head</code><code class="p">,</code> <code class="nv">Tail</code><code class="p">}</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Entry</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">Numbers</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Number</code><code class="p">,</code> <code class="nv">LastCall</code><code class="p">}</code> <code class="o">=</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">Tail</code><code class="p">),</code>
  <code class="nv">StartCall</code> <code class="o">=</code> <code class="nv">LastCall</code> <code class="o">+</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="mi">120</code><code class="p">)</code> <code class="o">+</code> <code class="mi">20</code><code class="p">,</code>
  <code class="nv">Duration</code> <code class="o">=</code> <code class="nn">random</code><code class="p">:</code><code class="n">uniform</code><code class="p">(</code><code class="mi">180</code><code class="p">)</code> <code class="o">+</code> <code class="mi">40</code><code class="p">,</code>
  <code class="nv">EndCall</code> <code class="o">=</code> <code class="nv">StartCall</code> <code class="o">+</code> <code class="nv">Duration</code><code class="p">,</code>
  <code class="nv">Item</code> <code class="o">=</code> <code class="p">[</code><code class="nv">Number</code><code class="p">,</code> <code class="n">format_date</code><code class="p">(</code><code class="nv">StartCall</code><code class="p">),</code> <code class="n">format_time</code><code class="p">(</code><code class="nv">StartCall</code><code class="p">),</code>
    <code class="n">format_date</code><code class="p">(</code><code class="nv">EndCall</code><code class="p">),</code> <code class="n">format_time</code><code class="p">(</code><code class="nv">EndCall</code><code class="p">)],</code>
  <code class="nv">UpdatedNumbers</code> <code class="o">=</code> <code class="nv">Head</code> <code class="o">++</code> <code class="p">[{</code><code class="nv">Number</code><code class="p">,</code> <code class="nv">EndCall</code><code class="p">}</code> <code class="p">|</code> <code class="nb">tl</code><code class="p">(</code><code class="nv">Tail</code><code class="p">)],</code>
  <code class="n">make_call_list</code><code class="p">(</code><code class="nv">N</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">UpdatedNumbers</code><code class="p">,</code> <code class="p">[</code><code class="nv">Item</code> <code class="p">|</code> <code class="nv">Result</code><code class="p">]).</code>

<code class="nf">write_item</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="p">[])</code> <code class="o">-&gt;</code>
  <code class="nn">file</code><code class="p">:</code><code class="n">close</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">);</code>

<code class="nf">write_item</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="p">[</code><code class="nv">H</code><code class="p">|</code><code class="nv">T</code><code class="p">])</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~s</code><code class="s"> </code><code class="si">~s</code><code class="s"> </code><code class="si">~s</code><code class="s"> </code><code class="si">~s</code><code class="s"> </code><code class="si">~s~n</code><code class="s">"</code><code class="p">,</code> <code class="nv">H</code><code class="p">),</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">fwrite</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="s">"</code><code class="si">~s</code><code class="s">,</code><code class="si">~s</code><code class="s">,</code><code class="si">~s</code><code class="s">,</code><code class="si">~s</code><code class="s">,</code><code class="si">~s~n</code><code class="s">"</code><code class="p">,</code> <code class="nv">H</code><code class="p">),</code>
  <code class="n">write_item</code><code class="p">(</code><code class="nv">OutputFile</code><code class="p">,</code> <code class="nv">T</code><code class="p">).</code>

<code class="nf">format_date</code><code class="p">(</code><code class="nv">GSeconds</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Date</code><code class="p">,</code> <code class="p">_</code><code class="nv">Time</code><code class="p">}</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">gregorian_seconds_to_datetime</code><code class="p">(</code><code class="nv">GSeconds</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">}</code> <code class="o">=</code> <code class="nv">Date</code><code class="p">,</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">flatten</code><code class="p">(</code><code class="nn">io_lib</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~4b</code><code class="s">-</code><code class="si">~2..0b</code><code class="s">-</code><code class="si">~2..0b</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">])).</code>

<code class="nf">format_time</code><code class="p">(</code><code class="nv">GSeconds</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{_</code><code class="nv">Date</code><code class="p">,</code> <code class="nv">Time</code><code class="p">}</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">gregorian_seconds_to_datetime</code><code class="p">(</code><code class="nv">GSeconds</code><code class="p">),</code>
  <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="nv">H</code><code class="p">,</code> <code class="nv">S</code><code class="p">}</code> <code class="o">=</code> <code class="nv">Time</code><code class="p">,</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">flatten</code><code class="p">(</code><code class="nn">io_lib</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~2..0b</code><code class="s">:</code><code class="si">~2..0b</code><code class="s">:</code><code class="si">~2..0b</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">M</code><code class="p">,</code> <code class="nv">H</code><code class="p">,</code> <code class="nv">S</code><code class="p">])).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION10-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 10-2</h2></div></div></div>
<p id="here_is_a_sugge_id31">Here is a suggested solution for
<a class="link" href="ch10.html#CH10-ET02" title="Étude 10-2: Using Mnesia">Étude 10-2</a>.</p>
<div class="sect2" id="_literal_phone_records_hrl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">phone_records.hrl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="recordphone_c_id2"><code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">phone_call</code><code class="p">,</code>
  <code class="p">{</code><code class="n">phone_number</code><code class="p">,</code> <code class="n">start_date</code><code class="p">,</code> <code class="n">start_time</code><code class="p">,</code> <code class="n">end_date</code><code class="p">,</code> <code class="n">end_time</code><code class="p">}).</code>
<code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">customer</code><code class="p">,</code>
  <code class="p">{</code><code class="n">phone_number</code><code class="p">,</code> <code class="n">last_name</code><code class="p">,</code> <code class="n">first_name</code><code class="p">,</code> <code class="n">middle_name</code><code class="p">,</code> <code class="n">rate</code><code class="p">}).</code></pre>
</div>
<div class="sect2" id="_literal_phone_mnesia_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">phone_mnesia.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id37"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Read in a database of phone calls and customers.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">phone_mnesia</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">setup</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">summary</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code>
<code class="p">-</code><code class="ni">include</code><code class="p">(</code><code class="s">"phone_records.hrl"</code><code class="p">).</code>
<code class="p">-</code><code class="ni">include_lib</code><code class="p">(</code><code class="s">"stdlib/include/qlc.hrl"</code><code class="p">).</code>

<code class="c">%% @doc Set up Mnesia tables for phone calls and customers</code>
<code class="c">%% given their file names</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">setup</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">setup</code><code class="p">(</code><code class="nv">CallFileName</code><code class="p">,</code> <code class="nv">CustomerFileName</code><code class="p">)</code> <code class="o">-&gt;</code>

  <code class="nn">mnesia</code><code class="p">:</code><code class="n">create_schema</code><code class="p">([</code><code class="nb">node</code><code class="p">()]),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">start</code><code class="p">(),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">delete_table</code><code class="p">(</code><code class="n">phone_call</code><code class="p">),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">delete_table</code><code class="p">(</code><code class="n">customer</code><code class="p">),</code>

  <code class="n">fill_table</code><code class="p">(</code><code class="n">phone_call</code><code class="p">,</code> <code class="nv">CallFileName</code><code class="p">,</code> <code class="k">fun</code> <code class="n">add_call</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="n">record_info</code><code class="p">(</code><code class="n">fields</code><code class="p">,</code> <code class="n">phone_call</code><code class="p">),</code> <code class="n">bag</code><code class="p">),</code>
  <code class="n">fill_table</code><code class="p">(</code><code class="n">customer</code><code class="p">,</code> <code class="nv">CustomerFileName</code><code class="p">,</code> <code class="k">fun</code> <code class="n">add_customer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="n">record_info</code><code class="p">(</code><code class="n">fields</code><code class="p">,</code> <code class="n">customer</code><code class="p">),</code> <code class="n">set</code><code class="p">).</code>

<code class="c">%% @doc Fill the given table with data from given file name.</code>
<code class="c">%% AdderFunction assigns data to fields and writes it to the table;</code>
<code class="c">%% RecordInfo is used when creating the table, as is the TableType.</code>

<code class="nf">fill_table</code><code class="p">(</code><code class="nv">TableName</code><code class="p">,</code> <code class="nv">FileName</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">,</code> <code class="nv">RecordInfo</code><code class="p">,</code> <code class="nv">TableType</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">create_table</code><code class="p">(</code><code class="nv">TableName</code><code class="p">,</code> <code class="p">[{</code><code class="n">attributes</code><code class="p">,</code> <code class="nv">RecordInfo</code><code class="p">},</code> <code class="p">{</code><code class="n">type</code><code class="p">,</code> <code class="nv">TableType</code><code class="p">}]),</code>

  <code class="p">{</code><code class="nv">OpenResult</code><code class="p">,</code> <code class="nv">InputFile</code><code class="p">}</code> <code class="o">=</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="nv">FileName</code><code class="p">,</code> <code class="p">[</code><code class="n">read</code><code class="p">]),</code>
  <code class="k">case</code> <code class="nv">OpenResult</code> <code class="k">of</code>
    <code class="n">ok</code> <code class="o">-&gt;</code>
      <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
        <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">)</code> <code class="k">end</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error opening file: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">FileName</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Read a line from InputFile, and insert its contents into</code>
<code class="c">%% the appropriate table by using AdderFunction.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">read_file</code><code class="p">(</code><code class="nn">file</code><code class="p">:</code><code class="n">io_device</code><code class="p">(),</code> <code class="n">function</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">RawData</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">),</code>
  <code class="k">if</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">RawData</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nv">Data</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">strip</code><code class="p">(</code><code class="nv">RawData</code><code class="p">,</code> <code class="n">right</code><code class="p">,</code> <code class="sc">$\n</code><code class="p">),</code>
      <code class="nv">ItemList</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Data</code><code class="p">,</code> <code class="s">","</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
      <code class="nv">AdderFunction</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">),</code>
      <code class="n">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">);</code>
    <code class="nv">RawData</code> <code class="o">==</code> <code class="n">eof</code> <code class="o">-&gt;</code> <code class="n">ok</code>
  <code class="k">end</code><code class="p">.</code>


<code class="c">%% Add a phone call record; the data is in an ItemList.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">add_call</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">undefined</code><code class="p">).</code>

<code class="nf">add_call</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Number</code><code class="p">,</code> <code class="nv">SDate</code><code class="p">,</code> <code class="nv">STime</code><code class="p">,</code> <code class="nv">EDate</code><code class="p">,</code> <code class="nv">ETime</code><code class="p">]</code> <code class="o">=</code> <code class="nv">ItemList</code><code class="p">,</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">write</code><code class="p">(</code><code class="nl">#phone_call</code><code class="p">{</code><code class="n">phone_number</code> <code class="o">=</code> <code class="nv">Number</code><code class="p">,</code>
        <code class="n">start_date</code> <code class="o">=</code> <code class="n">to_date</code><code class="p">(</code><code class="nv">SDate</code><code class="p">),</code> <code class="n">start_time</code> <code class="o">=</code> <code class="n">to_time</code><code class="p">(</code><code class="nv">STime</code><code class="p">),</code>
        <code class="n">end_date</code> <code class="o">=</code> <code class="n">to_date</code><code class="p">(</code><code class="nv">EDate</code><code class="p">),</code> <code class="n">end_time</code><code class="o">=</code> <code class="n">to_time</code><code class="p">(</code><code class="nv">ETime</code><code class="p">)}).</code>

<code class="c">%% Add a customer record; the data is in an ItemList.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">add_customer</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">undefined</code><code class="p">).</code>

<code class="nf">add_customer</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Phone</code><code class="p">,</code> <code class="nv">Last</code><code class="p">,</code> <code class="nv">First</code><code class="p">,</code> <code class="nv">Middle</code><code class="p">,</code> <code class="nv">Rate</code><code class="p">]</code> <code class="o">=</code> <code class="nv">ItemList</code><code class="p">,</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">write</code><code class="p">(</code><code class="nl">#customer</code><code class="p">{</code><code class="n">phone_number</code> <code class="o">=</code> <code class="nv">Phone</code><code class="p">,</code> <code class="n">last_name</code> <code class="o">=</code> <code class="nv">Last</code><code class="p">,</code>
    <code class="n">first_name</code> <code class="o">=</code> <code class="nv">First</code><code class="p">,</code> <code class="n">middle_name</code> <code class="o">=</code> <code class="nv">Middle</code><code class="p">,</code> <code class="n">rate</code> <code class="o">=</code> <code class="n">to_float</code><code class="p">(</code><code class="nv">Rate</code><code class="p">)}).</code>

<code class="c">%% @doc Convert a string in form "yyyy-mm-dd" to a tuple {yyyy, mm, dd}</code>
<code class="c">%% suitable for use with the calendar module.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_date</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">()}).</code>

<code class="nf">to_date</code><code class="p">(</code><code class="nv">Date</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Year</code><code class="p">,</code> <code class="nv">Month</code><code class="p">,</code> <code class="nv">Day</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Date</code><code class="p">,</code> <code class="s">"-"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[{</code><code class="nv">Y</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">D</code><code class="p">,</code> <code class="p">_}]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">Year</code><code class="p">,</code> <code class="nv">Month</code><code class="p">,</code> <code class="nv">Day</code><code class="p">]),</code>
  <code class="p">{</code><code class="nv">Y</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">D</code><code class="p">}.</code>

<code class="c">%% @doc Convert a string in form "hh:mm:ss" to a tuple {hh, mm, ss}</code>
<code class="c">%% suitable for use with the calendar module.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_time</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">(),</code> <code class="n">integer</code><code class="p">()}).</code>

<code class="nf">to_time</code><code class="p">(</code><code class="nv">Time</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Hour</code><code class="p">,</code> <code class="nv">Minute</code><code class="p">,</code> <code class="nv">Second</code><code class="p">]</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Time</code><code class="p">,</code> <code class="s">":"</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
  <code class="p">[{</code><code class="nv">H</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">M</code><code class="p">,</code> <code class="p">_},</code> <code class="p">{</code><code class="nv">S</code><code class="p">,</code> <code class="p">_}]</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="p">[</code><code class="nv">Hour</code><code class="p">,</code> <code class="nv">Minute</code><code class="p">,</code> <code class="nv">Second</code><code class="p">]),</code>
  <code class="p">{</code><code class="nv">H</code><code class="p">,</code> <code class="nv">M</code><code class="p">,</code> <code class="nv">S</code><code class="p">}.</code>


<code class="c">%% @doc Convenience routine to convert a string to float.</code>
<code class="c">%% In case of an error, return zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_float</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FPart</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">FPart</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">FPart</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">summary</code><code class="p">(</code><code class="nv">Last</code><code class="p">,</code> <code class="nv">First</code><code class="p">,</code> <code class="nv">Middle</code><code class="p">)</code> <code class="o">-&gt;</code>

  <code class="nv">QHandle</code> <code class="o">=</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">([</code><code class="nv">Customer</code> <code class="p">||</code>
    <code class="nv">Customer</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">customer</code><code class="p">),</code>
    <code class="nv">Customer</code><code class="nl">#customer.last_name</code> <code class="o">==</code> <code class="nv">Last</code><code class="p">,</code>
    <code class="nv">Customer</code><code class="nl">#customer.first_name</code> <code class="o">==</code> <code class="nv">First</code><code class="p">,</code>
    <code class="nv">Customer</code><code class="nl">#customer.middle_name</code> <code class="o">==</code> <code class="nv">Middle</code> <code class="p">]),</code>

  <code class="p">{_</code><code class="nv">Result</code><code class="p">,</code> <code class="p">[</code><code class="nv">ThePerson</code><code class="p">|_]}</code> <code class="o">=</code>
    <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code><code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code><code class="nv">QHandle</code><code class="p">)</code> <code class="k">end</code><code class="p">),</code>

  <code class="p">{_</code><code class="nv">Result</code><code class="p">,</code> <code class="nv">Calls</code><code class="p">}</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code>
       <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
        <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[</code><code class="nv">Call</code> <code class="p">||</code>
          <code class="nv">Call</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">phone_call</code><code class="p">),</code>
          <code class="nv">QCustomer</code> <code class="o">&lt;-</code> <code class="nv">QHandle</code><code class="p">,</code>
          <code class="nv">QCustomer</code><code class="nl">#customer.phone_number</code> <code class="o">==</code> <code class="nv">Call</code><code class="nl">#phone_call.phone_number</code>
        <code class="p">]</code>
        <code class="p">)</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>

  <code class="nv">TotalMinutes</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">foldl</code><code class="p">(</code><code class="k">fun</code> <code class="n">subtotal</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nv">Calls</code><code class="p">),</code>

  <code class="p">[{</code><code class="nv">ThePerson</code><code class="nl">#customer.phone_number</code><code class="p">,</code>
    <code class="nv">TotalMinutes</code><code class="p">,</code> <code class="nv">TotalMinutes</code> <code class="o">*</code> <code class="nv">ThePerson</code><code class="nl">#customer.rate</code><code class="p">}].</code>

<code class="nf">subtotal</code><code class="p">(</code><code class="nv">Item</code><code class="p">,</code> <code class="nv">Accumulator</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">StartSeconds</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">(</code>
    <code class="p">{</code><code class="nv">Item</code><code class="nl">#phone_call.start_date</code><code class="p">,</code> <code class="nv">Item</code><code class="nl">#phone_call.start_time</code><code class="p">}),</code>
  <code class="nv">EndSeconds</code> <code class="o">=</code> <code class="nn">calendar</code><code class="p">:</code><code class="n">datetime_to_gregorian_seconds</code><code class="p">(</code>
    <code class="p">{</code><code class="nv">Item</code><code class="nl">#phone_call.end_date</code><code class="p">,</code> <code class="nv">Item</code><code class="nl">#phone_call.end_time</code><code class="p">}),</code>
  <code class="nv">Accumulator</code> <code class="o">+</code> <code class="p">((</code><code class="nv">EndSeconds</code> <code class="o">-</code> <code class="nv">StartSeconds</code> <code class="o">+</code> <code class="mi">59</code><code class="p">)</code> <code class="ow">div</code> <code class="mi">60</code><code class="p">).</code></pre>
</div>
<div class="sect2" id="_literal_pet_records_hrl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">pet_records.hrl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="recordperson_id2"><code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">person</code><code class="p">,</code>
  <code class="p">{</code><code class="n">id_number</code><code class="p">,</code> <code class="n">name</code><code class="p">,</code> <code class="n">age</code><code class="p">,</code> <code class="n">gender</code><code class="p">,</code> <code class="n">city</code><code class="p">,</code> <code class="n">amount_owed</code><code class="p">}).</code>
<code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">animal</code><code class="p">,</code>
  <code class="p">{</code><code class="n">id_number</code><code class="p">,</code> <code class="n">name</code><code class="p">,</code> <code class="n">species</code><code class="p">,</code> <code class="n">gender</code><code class="p">,</code> <code class="n">owner_id</code><code class="p">}).</code></pre>
</div>
<div class="sect2" id="_literal_pet_mnesia_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">pet_mnesia.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="author_j_d__id38"><code class="c">%% @author J D Eisenberg &lt;jdavid.eisenberg@gmail.com&gt;</code>
<code class="c">%% @doc Read in a database of people and their pets</code>
<code class="c">%% appointments.</code>
<code class="c">%% @copyright 2013 J D Eisenberg</code>
<code class="c">%% @version 0.1</code>

<code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">pet_mnesia</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">setup</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">get_info</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">get_info_easier</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code>
<code class="p">-</code><code class="ni">include</code><code class="p">(</code><code class="s">"pet_records.hrl"</code><code class="p">).</code>
<code class="p">-</code><code class="ni">include_lib</code><code class="p">(</code><code class="s">"stdlib/include/qlc.hrl"</code><code class="p">).</code>

<code class="c">%% @doc Set up Mnesia tables for phone calls and customers</code>
<code class="c">%% given their file names</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">setup</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">setup</code><code class="p">(</code><code class="nv">PersonFileName</code><code class="p">,</code> <code class="nv">AnimalFileName</code><code class="p">)</code> <code class="o">-&gt;</code>

  <code class="nn">mnesia</code><code class="p">:</code><code class="n">create_schema</code><code class="p">([</code><code class="nb">node</code><code class="p">()]),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">start</code><code class="p">(),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">delete_table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">delete_table</code><code class="p">(</code><code class="n">animal</code><code class="p">),</code>

  <code class="n">fill_table</code><code class="p">(</code><code class="n">person</code><code class="p">,</code> <code class="nv">PersonFileName</code><code class="p">,</code> <code class="k">fun</code> <code class="n">add_person</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="n">record_info</code><code class="p">(</code><code class="n">fields</code><code class="p">,</code> <code class="n">person</code><code class="p">),</code> <code class="n">set</code><code class="p">),</code>
  <code class="n">fill_table</code><code class="p">(</code><code class="n">animal</code><code class="p">,</code> <code class="nv">AnimalFileName</code><code class="p">,</code> <code class="k">fun</code> <code class="n">add_animal</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
    <code class="n">record_info</code><code class="p">(</code><code class="n">fields</code><code class="p">,</code> <code class="n">animal</code><code class="p">),</code> <code class="n">set</code><code class="p">).</code>

<code class="c">%% @doc Fill the given table with data from given file name.</code>
<code class="c">%% AdderFunction assigns data to fields and writes it to the table;</code>
<code class="c">%% RecordInfo is used when creating the table, as is the TableType.</code>

<code class="nf">fill_table</code><code class="p">(</code><code class="nv">TableName</code><code class="p">,</code> <code class="nv">FileName</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">,</code> <code class="nv">RecordInfo</code><code class="p">,</code> <code class="nv">TableType</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">create_table</code><code class="p">(</code><code class="nv">TableName</code><code class="p">,</code> <code class="p">[{</code><code class="n">attributes</code><code class="p">,</code> <code class="nv">RecordInfo</code><code class="p">},</code> <code class="p">{</code><code class="n">type</code><code class="p">,</code> <code class="nv">TableType</code><code class="p">}]),</code>

  <code class="p">{</code><code class="nv">OpenResult</code><code class="p">,</code> <code class="nv">InputFile</code><code class="p">}</code> <code class="o">=</code> <code class="nn">file</code><code class="p">:</code><code class="n">open</code><code class="p">(</code><code class="nv">FileName</code><code class="p">,</code> <code class="p">[</code><code class="n">read</code><code class="p">]),</code>
  <code class="k">case</code> <code class="nv">OpenResult</code> <code class="k">of</code>
    <code class="n">ok</code> <code class="o">-&gt;</code>
      <code class="nv">TransResult</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
        <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">)</code> <code class="k">end</code><code class="p">),</code>
        <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Transaction result </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">TransResult</code><code class="p">]);</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Error opening file: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">FileName</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Read a line from InputFile, and insert its contents into</code>
<code class="c">%% the appropriate table by using AdderFunction.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">read_file</code><code class="p">(</code><code class="nn">file</code><code class="p">:</code><code class="n">io_device</code><code class="p">(),</code> <code class="n">function</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">RawData</code> <code class="o">=</code> <code class="nn">io</code><code class="p">:</code><code class="n">get_line</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="s">""</code><code class="p">),</code>
  <code class="k">if</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">RawData</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nv">Data</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">strip</code><code class="p">(</code><code class="nv">RawData</code><code class="p">,</code> <code class="n">right</code><code class="p">,</code> <code class="sc">$\n</code><code class="p">),</code>
      <code class="nv">ItemList</code> <code class="o">=</code> <code class="nn">re</code><code class="p">:</code><code class="n">split</code><code class="p">(</code><code class="nv">Data</code><code class="p">,</code> <code class="s">","</code><code class="p">,</code> <code class="p">[{</code><code class="n">return</code><code class="p">,</code> <code class="n">list</code><code class="p">}]),</code>
      <code class="nv">AdderFunction</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">),</code>
      <code class="n">read_file</code><code class="p">(</code><code class="nv">InputFile</code><code class="p">,</code> <code class="nv">AdderFunction</code><code class="p">);</code>
    <code class="nv">RawData</code> <code class="o">==</code> <code class="n">eof</code> <code class="o">-&gt;</code> <code class="n">ok</code>
  <code class="k">end</code><code class="p">.</code>


<code class="c">%% Add a person record; the data is in an ItemList.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">add_person</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">undefined</code><code class="p">).</code>

<code class="nf">add_person</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Id</code><code class="p">,</code> <code class="nv">Name</code><code class="p">,</code> <code class="nv">Age</code><code class="p">,</code> <code class="nv">Gender</code><code class="p">,</code> <code class="nv">City</code><code class="p">,</code> <code class="nv">Owed</code><code class="p">]</code> <code class="o">=</code> <code class="nv">ItemList</code><code class="p">,</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">write</code><code class="p">(</code><code class="nl">#person</code><code class="p">{</code><code class="n">id_number</code> <code class="o">=</code> <code class="n">to_int</code><code class="p">(</code><code class="nv">Id</code><code class="p">),</code> <code class="n">name</code> <code class="o">=</code> <code class="nv">Name</code><code class="p">,</code>
    <code class="n">age</code> <code class="o">=</code> <code class="n">to_int</code><code class="p">(</code><code class="nv">Age</code><code class="p">),</code> <code class="n">gender</code> <code class="o">=</code> <code class="nv">Gender</code><code class="p">,</code> <code class="n">city</code> <code class="o">=</code> <code class="nv">City</code><code class="p">,</code>
    <code class="n">amount_owed</code> <code class="o">=</code> <code class="n">to_float</code><code class="p">(</code><code class="nv">Owed</code><code class="p">)}).</code>

<code class="c">%% Add an animal record; the data is in an ItemList.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">add_animal</code><code class="p">(</code><code class="n">list</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">undefined</code><code class="p">).</code>

<code class="nf">add_animal</code><code class="p">(</code><code class="nv">ItemList</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">[</code><code class="nv">Id</code><code class="p">,</code> <code class="nv">Name</code><code class="p">,</code> <code class="nv">Species</code><code class="p">,</code> <code class="nv">Gender</code><code class="p">,</code> <code class="nv">Owner</code><code class="p">]</code> <code class="o">=</code> <code class="nv">ItemList</code><code class="p">,</code>
  <code class="nn">mnesia</code><code class="p">:</code><code class="n">write</code><code class="p">(</code><code class="nl">#animal</code><code class="p">{</code><code class="n">id_number</code> <code class="o">=</code> <code class="n">to_int</code><code class="p">(</code><code class="nv">Id</code><code class="p">),</code>
    <code class="n">name</code> <code class="o">=</code> <code class="nv">Name</code><code class="p">,</code> <code class="n">species</code> <code class="o">=</code> <code class="nv">Species</code><code class="p">,</code> <code class="n">gender</code> <code class="o">=</code> <code class="nv">Gender</code><code class="p">,</code>
    <code class="n">owner_id</code> <code class="o">=</code> <code class="n">to_int</code><code class="p">(</code><code class="nv">Owner</code><code class="p">)}).</code>

<code class="c">%% @doc Convenience routine to convert a string to integer.</code>
<code class="c">%% In case of an error, return zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_int</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">integer</code><code class="p">()).</code>

<code class="nf">to_int</code><code class="p">(</code><code class="nv">Str</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">IPart</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_integer</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">IPart</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">IPart</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% @doc Convenience routine to convert a string to float.</code>
<code class="c">%% In case of an error, return zero.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">to_float</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="nb">float</code><code class="p">()).</code>

<code class="nf">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FPart</code><code class="p">,</code> <code class="p">_}</code> <code class="o">=</code> <code class="nn">string</code><code class="p">:</code><code class="n">to_float</code><code class="p">(</code><code class="nv">Str</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">FPart</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="mi">0</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="nv">FPart</code>
  <code class="k">end</code><code class="p">.</code>

<code class="nf">get_info</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nv">People</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
      <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[</code> <code class="nv">P</code> <code class="p">||</code>
        <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
        <code class="nv">P</code><code class="nl">#person.age</code> <code class="o">&gt;=</code> <code class="mi">21</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.gender</code> <code class="o">==</code> <code class="s">"M"</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.city</code> <code class="o">==</code> <code class="s">"Podunk"</code><code class="p">]</code>
        <code class="p">)</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>

  <code class="nv">Pets</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
      <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[{</code><code class="nv">A</code><code class="nl">#animal.name</code><code class="p">,</code> <code class="nv">A</code><code class="nl">#animal.species</code><code class="p">,</code> <code class="nv">P</code><code class="nl">#person.name</code><code class="p">}</code> <code class="p">||</code>
        <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
        <code class="nv">P</code><code class="nl">#person.age</code> <code class="o">&gt;=</code> <code class="mi">21</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.gender</code> <code class="o">==</code> <code class="s">"M"</code><code class="p">,</code>
        <code class="nv">P</code><code class="nl">#person.city</code> <code class="o">==</code> <code class="s">"Podunk"</code><code class="p">,</code>
        <code class="nv">A</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">animal</code><code class="p">),</code>
        <code class="nv">A</code><code class="nl">#animal.owner_id</code> <code class="o">==</code> <code class="nv">P</code><code class="nl">#person.id_number</code><code class="p">])</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>
  <code class="p">[</code><code class="nv">People</code><code class="p">,</code> <code class="nv">Pets</code><code class="p">].</code>

<code class="nf">get_info_easier</code><code class="p">()</code> <code class="o">-&gt;</code>

  <code class="c">%% "Pre-process" the list comprehension for finding people</code>

  <code class="nv">QHandle</code> <code class="o">=</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[</code> <code class="nv">P</code> <code class="p">||</code>
    <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">person</code><code class="p">),</code>
    <code class="nv">P</code><code class="nl">#person.age</code> <code class="o">&gt;=</code> <code class="mi">21</code><code class="p">,</code>
    <code class="nv">P</code><code class="nl">#person.gender</code> <code class="o">==</code> <code class="s">"M"</code><code class="p">,</code>
    <code class="nv">P</code><code class="nl">#person.city</code> <code class="o">==</code> <code class="s">"Podunk"</code><code class="p">]</code>
  <code class="p">),</code>

  <code class="c">%% Evaluate it to retrieve the people you want</code>

  <code class="nv">People</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code> <code class="nv">QHandle</code> <code class="p">)</code> <code class="k">end</code>
  <code class="p">),</code>

  <code class="c">%% And use the handle again when retrieving</code>
  <code class="c">%% information about their pets</code>

  <code class="nv">Pets</code> <code class="o">=</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">transaction</code><code class="p">(</code>
    <code class="k">fun</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="nn">qlc</code><code class="p">:</code><code class="n">e</code><code class="p">(</code>
      <code class="nn">qlc</code><code class="p">:</code><code class="n">q</code><code class="p">(</code> <code class="p">[{</code><code class="nv">A</code><code class="nl">#animal.name</code><code class="p">,</code> <code class="nv">A</code><code class="nl">#animal.species</code><code class="p">,</code> <code class="nv">P</code><code class="nl">#person.name</code><code class="p">}</code> <code class="p">||</code>
        <code class="nv">P</code> <code class="o">&lt;-</code> <code class="nv">QHandle</code><code class="p">,</code>
        <code class="nv">A</code> <code class="o">&lt;-</code> <code class="nn">mnesia</code><code class="p">:</code><code class="n">table</code><code class="p">(</code><code class="n">animal</code><code class="p">),</code>
        <code class="nv">A</code><code class="nl">#animal.owner_id</code> <code class="o">==</code> <code class="nv">P</code><code class="nl">#person.id_number</code><code class="p">])</code>
      <code class="p">)</code>
    <code class="k">end</code>
  <code class="p">),</code>
  <code class="p">[</code><code class="nv">People</code><code class="p">,</code> <code class="nv">Pets</code><code class="p">].</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION11-ET01">
<div class="titlepage"><div><div><h2 class="title">Solution 11-1</h2></div></div></div>
<p id="here_is_a_sugge_id32">Here is a suggested solution for
<a class="link" href="ch11.html#CH11-ET01" title="Étude 11-1: Get the Weather">Étude 11-1</a>.</p>
<div class="sect2" id="_literal_weather_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">weather.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="moduleweather_id1"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">weather</code><code class="p">).</code>
<code class="p">-</code><code class="ni">behaviour</code><code class="p">(</code><code class="n">gen_server</code><code class="p">).</code>
<code class="p">-</code><code class="ni">include_lib</code><code class="p">(</code><code class="s">"xmerl/include/xmerl.hrl"</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">start_link</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code> <code class="c">% convenience call for startup</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">init</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
         <code class="n">handle_call</code><code class="o">/</code><code class="mi">3</code><code class="p">,</code>
         <code class="n">handle_cast</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">handle_info</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">terminate</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">code_change</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code> <code class="c">% gen_server callbacks</code>
<code class="p">-</code><code class="ni">define</code><code class="p">(</code><code class="no">SERVER</code><code class="p">,</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">).</code> <code class="c">% macro that just defines this module as server</code>

<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">()</code> <code class="o">-&gt;</code>
        <code class="nn">gen_server</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">local</code><code class="p">,</code> <code class="o">?</code><code class="nv">SERVER</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[]).</code>

<code class="c">%%% gen_server callbacks</code>
<code class="nf">init</code><code class="p">([])</code> <code class="o">-&gt;</code>
  <code class="nn">inets</code><code class="p">:</code><code class="n">start</code><code class="p">(),</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">[]}.</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">}</code> <code class="o">=</code> <code class="n">get_weather</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">}.</code>

<code class="nf">handle_cast</code><code class="p">(_</code><code class="nv">Message</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Most recent requests: </code><code class="si">~p</code><code class="se">\n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">State</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_info</code><code class="p">(_</code><code class="nv">Info</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">terminate</code><code class="p">(_</code><code class="nv">Reason</code><code class="p">,</code> <code class="p">_</code><code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">inets</code><code class="p">:</code><code class="n">stop</code><code class="p">(),</code>
  <code class="n">ok</code><code class="p">.</code>

<code class="nf">code_change</code><code class="p">(_</code><code class="nv">OldVsn</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="p">_</code><code class="nv">Extra</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="c">%%% Internal functions</code>

<code class="c">%% Given a 4-letter station code as the Request, return its basic</code>
<code class="c">%% weather information as a {key,value} list. If successful, add the</code>
<code class="c">%% station name to the State, which will keep track of recently-accessed</code>
<code class="c">%% weather stations.</code>

<code class="nf">get_weather</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">URL</code> <code class="o">=</code> <code class="s">"http://w1.weather.gov/xml/current_obs/"</code> <code class="o">++</code> <code class="nv">Request</code> <code class="o">++</code> <code class="s">".xml"</code><code class="p">,</code>
  <code class="p">{</code><code class="nv">Result</code><code class="p">,</code> <code class="nv">Info</code><code class="p">}</code> <code class="o">=</code> <code class="nn">httpc</code><code class="p">:</code><code class="n">request</code><code class="p">(</code><code class="nv">URL</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">error</code> <code class="o">-&gt;</code> <code class="p">{{</code><code class="nv">Result</code><code class="p">,</code> <code class="nv">Info</code><code class="p">},</code> <code class="nv">State</code><code class="p">};</code>
    <code class="n">ok</code> <code class="o">-&gt;</code>
      <code class="p">{{_</code><code class="nv">Protocol</code><code class="p">,</code> <code class="nv">Code</code><code class="p">,</code> <code class="p">_</code><code class="nv">CodeStr</code><code class="p">},</code> <code class="p">_</code><code class="nv">Attrs</code><code class="p">,</code> <code class="nv">WebData</code><code class="p">}</code> <code class="o">=</code> <code class="nv">Info</code><code class="p">,</code>
      <code class="k">case</code> <code class="nv">Code</code> <code class="k">of</code>
        <code class="mi">404</code> <code class="o">-&gt;</code>
          <code class="p">{{</code><code class="n">error</code><code class="p">,</code> <code class="mi">404</code><code class="p">},</code> <code class="nv">State</code><code class="p">};</code>
        <code class="mi">200</code> <code class="o">-&gt;</code>
          <code class="nv">Weather</code> <code class="o">=</code> <code class="n">analyze_info</code><code class="p">(</code><code class="nv">WebData</code><code class="p">),</code>
          <code class="p">{{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">Weather</code><code class="p">},</code> <code class="p">[</code><code class="nv">Request</code> <code class="p">|</code> <code class="nn">lists</code><code class="p">:</code><code class="n">sublist</code><code class="p">(</code><code class="nv">State</code><code class="p">,</code> <code class="mi">10</code><code class="p">)]}</code>
      <code class="k">end</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% Take raw XML data and return a set of {key, value} tuples</code>

<code class="nf">analyze_info</code><code class="p">(</code><code class="nv">WebData</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="c">%% list of fields that you want to extract</code>
  <code class="nv">ToFind</code> <code class="o">=</code> <code class="p">[</code><code class="n">location</code><code class="p">,</code> <code class="n">observation_time_rfc822</code><code class="p">,</code> <code class="n">weather</code><code class="p">,</code> <code class="n">temperature_string</code><code class="p">],</code>

  <code class="c">%% get just the parsed data from the XML parse result</code>
  <code class="nv">Parsed</code> <code class="o">=</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nn">xmerl_scan</code><code class="p">:</code><code class="n">string</code><code class="p">(</code><code class="nv">WebData</code><code class="p">)),</code>

  <code class="c">%% This is the list of all children under &lt;current_observation&gt;</code>
  <code class="nv">Children</code> <code class="o">=</code> <code class="nv">Parsed</code><code class="nl">#xmlElement.content</code><code class="p">,</code>

  <code class="c">%% Find only XML elements and extract their names and their text content.</code>
  <code class="c">%% You need the guard so that you don't process the newlines in the</code>
  <code class="c">%% data (they are XML text descendants of the root element).</code>
  <code class="nv">ElementList</code> <code class="o">=</code> <code class="p">[{</code><code class="nv">El</code><code class="nl">#xmlElement.name</code><code class="p">,</code> <code class="n">extract_text</code><code class="p">(</code><code class="nv">El</code><code class="nl">#xmlElement.content</code><code class="p">)}</code>
    <code class="p">||</code> <code class="nv">El</code> <code class="o">&lt;-</code> <code class="nv">Children</code><code class="p">,</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nv">El</code><code class="p">)</code> <code class="o">==</code> <code class="n">xmlElement</code><code class="p">],</code>

  <code class="c">%% ElementList is now a keymap; get the data you want from it.</code>
  <code class="nn">lists</code><code class="p">:</code><code class="n">map</code><code class="p">(</code><code class="k">fun</code><code class="p">(</code><code class="nv">Item</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keyfind</code><code class="p">(</code><code class="nv">Item</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">ElementList</code><code class="p">)</code> <code class="k">end</code><code class="p">,</code> <code class="nv">ToFind</code><code class="p">).</code>


<code class="c">%% Given the parsed content of an XML element, return its first node value</code>
<code class="c">%% (if it's a text node); otherwise return the empty string.</code>

<code class="nf">extract_text</code><code class="p">(</code><code class="nv">Content</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Item</code> <code class="o">=</code> <code class="nb">hd</code><code class="p">(</code><code class="nv">Content</code><code class="p">),</code>
  <code class="k">case</code> <code class="nb">element</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nv">Item</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">xmlText</code> <code class="o">-&gt;</code> <code class="nv">Item</code><code class="nl">#xmlText.value</code><code class="p">;</code>
    <code class="p">_</code> <code class="o">-&gt;</code> <code class="s">""</code>
  <code class="k">end</code><code class="p">.</code></pre>
</div>
<div class="sect2" id="_literal_weather_sup_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">weather_sup.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="moduleweather_id2"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">weather_sup</code><code class="p">).</code>
<code class="p">-</code><code class="ni">behaviour</code><code class="p">(</code><code class="n">supervisor</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">start_link</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code> <code class="c">% convenience call for startup</code>

<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">init</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code> <code class="c">% supervisor calls</code>
<code class="p">-</code><code class="ni">define</code><code class="p">(</code><code class="no">SERVER</code><code class="p">,</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">).</code>


<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">supervisor</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">local</code><code class="p">,</code> <code class="o">?</code><code class="nv">SERVER</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="p">[]).</code>

<code class="c">%%% supervisor callback</code>
<code class="nf">init</code><code class="p">([])</code> <code class="o">-&gt;</code>
    <code class="nv">RestartStrategy</code> <code class="o">=</code> <code class="n">one_for_one</code><code class="p">,</code>
    <code class="nv">MaxRestarts</code> <code class="o">=</code> <code class="mi">1</code><code class="p">,</code> <code class="c">% one restart every</code>
    <code class="nv">MaxSecondsBetweenRestarts</code> <code class="o">=</code> <code class="mi">5</code><code class="p">,</code> <code class="c">% five seconds</code>

    <code class="nv">SupFlags</code> <code class="o">=</code> <code class="p">{</code><code class="nv">RestartStrategy</code><code class="p">,</code> <code class="nv">MaxRestarts</code><code class="p">,</code> <code class="nv">MaxSecondsBetweenRestarts</code><code class="p">},</code>

    <code class="nv">Restart</code> <code class="o">=</code> <code class="n">permanent</code><code class="p">,</code> <code class="c">% or temporary, or transient</code>
    <code class="nv">Shutdown</code> <code class="o">=</code> <code class="mi">2000</code><code class="p">,</code> <code class="c">% milliseconds, could be infinity or brutal_kill</code>
    <code class="nv">Type</code> <code class="o">=</code> <code class="n">worker</code><code class="p">,</code> <code class="c">% could also be supervisor</code>

    <code class="nv">Weather</code> <code class="o">=</code> <code class="p">{</code><code class="n">weather</code><code class="p">,</code> <code class="p">{</code><code class="n">weather</code><code class="p">,</code> <code class="n">start_link</code><code class="p">,</code> <code class="p">[]},</code>
                      <code class="nv">Restart</code><code class="p">,</code> <code class="nv">Shutdown</code><code class="p">,</code> <code class="nv">Type</code><code class="p">,</code> <code class="p">[</code><code class="n">weather</code><code class="p">]},</code>

    <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">{</code><code class="nv">SupFlags</code><code class="p">,</code> <code class="p">[</code><code class="nv">Weather</code><code class="p">]}}.</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION11-ET02">
<div class="titlepage"><div><div><h2 class="title">Solution 11-2</h2></div></div></div>
<p id="here_is_a_sugge_id33">Here is a suggested solution for
<a class="link" href="ch11.html#CH11-ET02" title="Étude 11-2: Wrapper Functions">Étude 11-2</a>. Since the bulk of the code
is identical to the code in the previous étude,
the only code shown here is the revised <code class="literal">-export</code> list
and the added functions.</p>
<div class="sect2" id="_literal_weather_erl_literal_2">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">weather.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="exportreport"><code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">report</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">recent</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code> <code class="c">% wrapper functions</code>

<code class="c">%% Wrapper to hide internal details when getting a weather report</code>
<code class="nf">report</code><code class="p">(</code><code class="nv">Station</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">SERVER</code><code class="p">,</code> <code class="nv">Station</code><code class="p">).</code>

<code class="c">%% Wrapper to hide internal details when getting a list of recently used</code>
<code class="c">%% stations.</code>
<code class="nf">recent</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">cast</code><code class="p">(</code><code class="o">?</code><code class="nv">SERVER</code><code class="p">,</code> <code class="s">""</code><code class="p">).</code></pre>
</div>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION11-ET03">
<div class="titlepage"><div><div><h2 class="title">Solution 11-3</h2></div></div></div>
<p id="here_is_a_sugge_id34">Here is a suggested solution for
<a class="link" href="ch11.html#CH11-ET03" title="Étude 11-3: Independent Server and Client">Étude 11-3</a>. Since the bulk of the code
is identical to the previous étude,
the only code shown here is the added and revised code.</p>
<pre class="programlisting" data-language="erlang" id="doc_connect"><code class="c">%% @doc Connect to a named server</code>
<code class="nf">connect</code><code class="p">(</code><code class="nv">ServerName</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Result</code> <code class="o">=</code> <code class="nn">net_adm</code><code class="p">:</code><code class="n">ping</code><code class="p">(</code><code class="nv">ServerName</code><code class="p">),</code>
  <code class="k">case</code> <code class="nv">Result</code> <code class="k">of</code>
    <code class="n">pong</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Connected to server.</code><code class="si">~n</code><code class="s">"</code><code class="p">);</code>
    <code class="n">pang</code> <code class="o">-&gt;</code> <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Cannot connect to </code><code class="si">~p</code><code class="s">.</code><code class="si">~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">ServerName</code><code class="p">])</code>
  <code class="k">end</code><code class="p">.</code>

<code class="c">%% Wrapper to hide internal details when getting a weather report</code>
<code class="nf">report</code><code class="p">(</code><code class="nv">Station</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">global</code><code class="p">,</code> <code class="n">weather</code><code class="p">},</code> <code class="nv">Station</code><code class="p">).</code>

<code class="c">%% Wrapper to hide internal details when getting a list of recently used</code>
<code class="c">%% stations.</code>
<code class="nf">recent</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">global</code><code class="p">,</code><code class="n">weather</code><code class="p">},</code> <code class="n">recent</code><code class="p">).</code>

<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">global</code><code class="p">,</code> <code class="o">?</code><code class="nv">SERVER</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[]).</code>

<code class="c">%%% gen_server callbacks</code>
<code class="nf">init</code><code class="p">([])</code> <code class="o">-&gt;</code>
  <code class="nn">inets</code><code class="p">:</code><code class="n">start</code><code class="p">(),</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">[]}.</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">recent</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>
<code class="nf">handle_call</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">}</code> <code class="o">=</code> <code class="n">get_weather</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">}.</code>

<code class="nf">handle_cast</code><code class="p">(_</code><code class="nv">Message</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Most recent requests: </code><code class="si">~p</code><code class="se">\n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">State</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code></pre>
</div>
<div class="sect1" data-original-filename="appendix-a.asciidoc" id="SOLUTION11-ET04">
<div class="titlepage"><div><div><h2 class="title">Solution 11-4</h2></div></div></div>
<p id="here_is_a_sugge_id35">Here is a suggested solution for
<a class="link" href="ch11.html#CH11-ET04" title="Étude 11-4: Chat Room">Étude 11-4</a>.</p>
<div class="sect2" id="_literal_chatroom_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">chatroom.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="modulechatroo"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">chatroom</code><code class="p">).</code>
<code class="p">-</code><code class="ni">behaviour</code><code class="p">(</code><code class="n">gen_server</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">start_link</code><code class="o">/</code><code class="mi">0</code><code class="p">]).</code> <code class="c">% convenience call for startup</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">init</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
         <code class="n">handle_call</code><code class="o">/</code><code class="mi">3</code><code class="p">,</code>
         <code class="n">handle_cast</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">handle_info</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">terminate</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">code_change</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code> <code class="c">% gen_server callbacks</code>

<code class="p">-</code><code class="ni">define</code><code class="p">(</code><code class="no">SERVER</code><code class="p">,</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">).</code> <code class="c">% macro that defines this module as the server</code>

<code class="c">% The server state consists of a list of tuples for each person in chat.</code>
<code class="c">% Each tuple has the format {{UserName, UserServer}, PID of person}</code>

<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">local</code><code class="p">,</code> <code class="o">?</code><code class="nv">SERVER</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="p">[],</code> <code class="p">[]).</code>

<code class="c">%%% gen_server callbacks</code>
<code class="nf">init</code><code class="p">([])</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">[]}.</code>

<code class="c">%% Check to see if a user name/server pair is unique;</code>
<code class="c">%% if so, add it to the server's state</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">login</code><code class="p">,</code> <code class="nv">UserName</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FromPid</code><code class="p">,</code> <code class="p">_</code><code class="nv">FromTag</code><code class="p">}</code> <code class="o">=</code> <code class="nv">From</code><code class="p">,</code>
  <code class="k">case</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keymember</code><code class="p">({</code><code class="nv">UserName</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code>
      <code class="nv">NewState</code> <code class="o">=</code> <code class="nv">State</code><code class="p">,</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="s">"User "</code> <code class="o">++</code> <code class="nv">UserName</code> <code class="o">++</code> <code class="s">" already in use."</code><code class="p">};</code>
    <code class="n">false</code> <code class="o">-&gt;</code>
      <code class="nv">NewState</code> <code class="o">=</code> <code class="p">[{{</code><code class="nv">UserName</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="nv">FromPid</code><code class="p">}</code> <code class="p">|</code> <code class="nv">State</code><code class="p">],</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="s">"Logged in."</code><code class="p">}</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">};</code>

<code class="c">%% Log out the person sending the message, but only</code>
<code class="c">%% if they're logged in already.</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">logout</code><code class="p">,</code> <code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FromPid</code><code class="p">,</code> <code class="p">_</code><code class="nv">FromTag</code><code class="p">}</code> <code class="o">=</code> <code class="nv">From</code><code class="p">,</code>
  <code class="k">case</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keymember</code><code class="p">(</code><code class="nv">FromPid</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code>
      <code class="nv">NewState</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keydelete</code><code class="p">(</code><code class="nv">FromPid</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>
      <code class="nv">Reply</code>  <code class="o">=</code> <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="n">logged_out</code><code class="p">};</code>
    <code class="n">false</code> <code class="o">-&gt;</code>
      <code class="nv">NewState</code> <code class="o">=</code> <code class="nv">State</code><code class="p">,</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="n">not_logged_in</code><code class="p">}</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">NewState</code><code class="p">};</code>

<code class="c">%% When receiving a message from a person, use the From PID to</code>
<code class="c">%% get the user's name and server name from the chatroom server state.</code>
<code class="c">%% Send the message via a "cast" to everyone who is NOT the sender.</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">say</code><code class="p">,</code> <code class="nv">Text</code><code class="p">},</code> <code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="nv">FromPid</code><code class="p">,</code> <code class="p">_</code><code class="nv">FromTag</code><code class="p">}</code> <code class="o">=</code> <code class="nv">From</code><code class="p">,</code>

  <code class="k">case</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keymember</code><code class="p">(</code><code class="nv">FromPid</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code>
    <code class="p">{</code><code class="n">value</code><code class="p">,</code> <code class="p">{{</code><code class="nv">SenderName</code><code class="p">,</code> <code class="nv">SenderServer</code><code class="p">},</code> <code class="p">_}}</code> <code class="o">=</code>
      <code class="nn">lists</code><code class="p">:</code><code class="n">keysearch</code><code class="p">(</code><code class="nv">FromPid</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>

    <code class="c">% For debugging: get the list of recipients.</code>
    <code class="nv">RecipientList</code> <code class="o">=</code> <code class="p">[{</code><code class="nv">RecipientName</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">}</code> <code class="p">||</code>
      <code class="p">{{</code><code class="nv">RecipientName</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">},</code> <code class="p">_}</code> <code class="o">&lt;-</code> <code class="nv">State</code><code class="p">,</code>
      <code class="p">{</code><code class="nv">RecipientName</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">}</code> <code class="o">/=</code> <code class="p">{</code><code class="nv">SenderName</code><code class="p">,</code> <code class="nv">SenderServer</code><code class="p">}],</code>
    <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Recipient list: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">RecipientList</code><code class="p">]),</code>

    <code class="p">[</code><code class="nn">gen_server</code><code class="p">:</code><code class="n">cast</code><code class="p">({</code><code class="n">person</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">},</code>
      <code class="p">{</code><code class="n">message</code><code class="p">,</code> <code class="p">{</code><code class="nv">SenderName</code><code class="p">,</code> <code class="nv">SenderServer</code><code class="p">},</code> <code class="nv">Text</code><code class="p">})</code> <code class="p">||</code>
      <code class="p">{{</code><code class="nv">RecipientName</code><code class="p">,</code> <code class="nv">RecipientServer</code><code class="p">},</code> <code class="p">_}</code> <code class="o">&lt;-</code> <code class="nv">State</code><code class="p">,</code>
     <code class="nv">RecipientName</code> <code class="o">/=</code> <code class="nv">SenderName</code><code class="p">];</code>

    <code class="n">false</code> <code class="o">-&gt;</code> <code class="n">ok</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="n">ok</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="c">%% Get the state of another person and return it to the asker</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">who</code><code class="p">,</code> <code class="nv">Person</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="c">% Find pid of the person at the serverref</code>
  <code class="nv">Found</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keyfind</code><code class="p">({</code><code class="nv">Person</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">},</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">State</code><code class="p">),</code>

  <code class="k">case</code> <code class="nv">Found</code> <code class="k">of</code>
    <code class="p">{{_</code><code class="nv">FromUser</code><code class="p">,</code> <code class="p">_</code><code class="nv">FromServer</code><code class="p">},</code> <code class="nv">Pid</code><code class="p">}</code> <code class="o">-&gt;</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="nv">Pid</code><code class="p">,</code> <code class="n">get_profile</code><code class="p">);</code>
    <code class="p">_</code> <code class="o">-&gt;</code>
      <code class="nv">Reply</code> <code class="o">=</code> <code class="s">"Cannot find that user"</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="c">%% Return a list of all users currently in the chat room</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">users</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">UserList</code> <code class="o">=</code> <code class="p">[{</code><code class="nv">UserName</code><code class="p">,</code> <code class="nv">UserServer</code><code class="p">}</code> <code class="p">||</code>
    <code class="p">{{</code><code class="nv">UserName</code><code class="p">,</code> <code class="nv">UserServer</code><code class="p">},</code> <code class="p">_}</code> <code class="o">&lt;-</code> <code class="nv">State</code><code class="p">],</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">UserList</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="nv">Request</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="s">"Unhandled Request"</code><code class="p">,</code> <code class="nv">Request</code><code class="p">},</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_cast</code><code class="p">(_</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_info</code><code class="p">(</code><code class="nv">Info</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Received unknown message </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Info</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">terminate</code><code class="p">(_</code><code class="nv">Reason</code><code class="p">,</code> <code class="p">_</code><code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">ok</code><code class="p">.</code>

<code class="nf">code_change</code><code class="p">(_</code><code class="nv">OldVsn</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="p">_</code><code class="nv">Extra</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="c">%%% Internal functions</code></pre>
</div>
<div class="sect2" id="_literal_person_erl_literal">
<div class="titlepage"><div><div><h3 class="title"><code class="literal">person.erl</code></h3></div></div></div>
<pre class="programlisting" data-language="erlang" id="moduleperson"><code class="p">-</code><code class="ni">module</code><code class="p">(</code><code class="n">person</code><code class="p">).</code>
<code class="p">-</code><code class="ni">behaviour</code><code class="p">(</code><code class="n">gen_server</code><code class="p">).</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">start_link</code><code class="o">/</code><code class="mi">1</code><code class="p">]).</code> <code class="c">% convenience call for startup</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">init</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code>
         <code class="n">handle_call</code><code class="o">/</code><code class="mi">3</code><code class="p">,</code>
         <code class="n">handle_cast</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">handle_info</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">terminate</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code>
         <code class="n">code_change</code><code class="o">/</code><code class="mi">3</code><code class="p">]).</code> <code class="c">% gen_server callbacks</code>

<code class="p">-</code><code class="ni">record</code><code class="p">(</code><code class="nl">state</code><code class="p">,</code> <code class="p">{</code><code class="n">chat_node</code><code class="p">,</code> <code class="n">profile</code><code class="p">}).</code>

<code class="c">% internal functions</code>
<code class="p">-</code><code class="ni">export</code><code class="p">([</code><code class="n">login</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">logout</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">say</code><code class="o">/</code><code class="mi">1</code><code class="p">,</code> <code class="n">users</code><code class="o">/</code><code class="mi">0</code><code class="p">,</code> <code class="n">who</code><code class="o">/</code><code class="mi">2</code><code class="p">,</code> <code class="n">set_profile</code><code class="o">/</code><code class="mi">2</code><code class="p">]).</code>

<code class="p">-</code><code class="ni">define</code><code class="p">(</code><code class="no">CLIENT</code><code class="p">,</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">).</code> <code class="c">% macro that defines this module as the client</code>

<code class="c">%%% convenience method for startup</code>
<code class="nf">start_link</code><code class="p">(</code><code class="nv">ChatNode</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">start_link</code><code class="p">({</code><code class="n">local</code><code class="p">,</code> <code class="o">?</code><code class="nv">CLIENT</code><code class="p">},</code> <code class="o">?</code><code class="nv">MODULE</code><code class="p">,</code> <code class="nv">ChatNode</code><code class="p">,</code> <code class="p">[]).</code>

<code class="nf">init</code><code class="p">(</code><code class="nv">ChatNode</code><code class="p">)</code><code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Chat node is: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">ChatNode</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nl">#state</code><code class="p">{</code><code class="n">chat_node</code><code class="o">=</code><code class="nv">ChatNode</code><code class="p">,</code> <code class="n">profile</code><code class="o">=</code><code class="p">[]}}.</code>

<code class="c">%% The server is asked to either:</code>
<code class="c">%% a) return the chat host name from the state,</code>
<code class="c">%% b) return the user profile</code>
<code class="c">%% c) update the user profile</code>
<code class="c">%% d) log a user in</code>
<code class="c">%% e) send a message to all people in chat room</code>
<code class="c">%% f) log a user out</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">get_chat_node</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">get_profile</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.profile</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">set_profile</code><code class="p">,</code> <code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">},</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">case</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keymember</code><code class="p">(</code><code class="nv">Key</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.profile</code><code class="p">)</code> <code class="k">of</code>
    <code class="n">true</code> <code class="o">-&gt;</code> <code class="nv">NewProfile</code> <code class="o">=</code> <code class="nn">lists</code><code class="p">:</code><code class="n">keyreplace</code><code class="p">(</code><code class="nv">Key</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.profile</code><code class="p">,</code>
      <code class="p">{</code><code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">});</code>
    <code class="n">false</code> <code class="o">-&gt;</code> <code class="nv">NewProfile</code> <code class="o">=</code> <code class="p">[{</code><code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">}</code> <code class="p">|</code> <code class="nv">State</code><code class="nl">#state.profile</code><code class="p">]</code>
  <code class="k">end</code><code class="p">,</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">NewProfile</code><code class="p">,</code>
    <code class="nl">#state</code><code class="p">{</code><code class="n">chat_node</code> <code class="o">=</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">,</code> <code class="n">profile</code><code class="o">=</code><code class="nv">NewProfile</code><code class="p">}};</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">login</code><code class="p">,</code> <code class="nv">UserName</code><code class="p">},</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Reply</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">},</code>
    <code class="p">{</code><code class="n">login</code><code class="p">,</code> <code class="nv">UserName</code><code class="p">,</code> <code class="nb">node</code><code class="p">()}),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">({</code><code class="n">say</code><code class="p">,</code> <code class="nv">Text</code><code class="p">},</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Reply</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">},</code>
    <code class="p">{</code><code class="n">say</code><code class="p">,</code> <code class="nv">Text</code><code class="p">}),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">(</code><code class="n">logout</code><code class="p">,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nv">Reply</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="nv">State</code><code class="nl">#state.chat_node</code><code class="p">},</code> <code class="n">logout</code><code class="p">),</code>
  <code class="p">{</code><code class="n">reply</code><code class="p">,</code> <code class="nv">Reply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_call</code><code class="p">(_,</code> <code class="p">_</code><code class="nv">From</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="p">[],</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_cast</code><code class="p">({</code><code class="n">message</code><code class="p">,</code> <code class="p">{</code><code class="nv">FromUser</code><code class="p">,</code> <code class="nv">FromServer</code><code class="p">},</code> <code class="nv">Text</code><code class="p">},</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"</code><code class="si">~s</code><code class="s"> (</code><code class="si">~p</code><code class="s">) says: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">FromUser</code><code class="p">,</code> <code class="nv">FromServer</code><code class="p">,</code> <code class="nv">Text</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">};</code>

<code class="nf">handle_cast</code><code class="p">(_</code><code class="nv">Request</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Unknown request </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">_</code><code class="nv">Request</code><code class="p">),</code>
  <code class="p">{</code><code class="n">noReply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">handle_info</code><code class="p">(</code><code class="nv">Info</code><code class="p">,</code> <code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">io</code><code class="p">:</code><code class="n">format</code><code class="p">(</code><code class="s">"Received unexpected message: </code><code class="si">~p~n</code><code class="s">"</code><code class="p">,</code> <code class="p">[</code><code class="nv">Info</code><code class="p">]),</code>
  <code class="p">{</code><code class="n">noreply</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>

<code class="nf">terminate</code><code class="p">(_</code><code class="nv">Reason</code><code class="p">,</code> <code class="p">_</code><code class="nv">State</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="n">ok</code><code class="p">.</code>

<code class="nf">code_change</code><code class="p">(_</code><code class="nv">OldVsn</code><code class="p">,</code> <code class="nv">State</code><code class="p">,</code> <code class="p">_</code><code class="nv">Extra</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">State</code><code class="p">}.</code>


<code class="c">% internal functions</code>

<code class="c">%% @doc Gets the name of the chat host. This is a really</code>
<code class="c">%% ugly hack; it works by sending itself a call to retrieve</code>
<code class="c">%% the chat node name from the server state.</code>

<code class="nf">get_chat_node</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="n">person</code><code class="p">,</code> <code class="n">get_chat_node</code><code class="p">).</code>

<code class="c">%% @doc Login to a server using a name</code>
<code class="c">%% If you connect, tell the server your user name and node.</code>
<code class="c">%% You don't need a reply from the server for this.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">login</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">term</code><code class="p">()).</code>

<code class="nf">login</code><code class="p">(</code><code class="nv">UserName</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="k">if</code>
    <code class="nb">is_atom</code><code class="p">(</code><code class="nv">UserName</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code>
        <code class="p">{</code><code class="n">login</code><code class="p">,</code> <code class="nb">atom_to_list</code><code class="p">(</code><code class="nv">UserName</code><code class="p">)});</code>
    <code class="nb">is_list</code><code class="p">(</code><code class="nv">UserName</code><code class="p">)</code> <code class="o">-&gt;</code>
      <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code>
        <code class="p">{</code><code class="n">login</code><code class="p">,</code> <code class="nv">UserName</code><code class="p">});</code>
    <code class="n">true</code> <code class="o">-&gt;</code>
      <code class="p">{</code><code class="n">error</code><code class="p">,</code> <code class="s">"User name must be an atom or a list"</code><code class="p">}</code>
  <code class="k">end</code><code class="p">.</code>


<code class="c">%% @doc Log out of the system. The person server will send a From that tells</code>
<code class="c">%% who is logging out; the chatroom server doesn't need to reply.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">logout</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">logout</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code> <code class="n">logout</code><code class="p">),</code>
  <code class="n">ok</code><code class="p">.</code>


<code class="c">%% @doc Send the given Text to the chat room server. No reply needed.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">say</code><code class="p">(</code><code class="n">string</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">atom</code><code class="p">()).</code>

<code class="nf">say</code><code class="p">(</code><code class="nv">Text</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code> <code class="p">{</code><code class="n">say</code><code class="p">,</code> <code class="nv">Text</code><code class="p">}),</code>
  <code class="n">ok</code><code class="p">.</code>

<code class="c">%% @doc Ask chat room server for a list of users.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">users</code><code class="p">()</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">string</code><code class="p">()]).</code>

<code class="nf">users</code><code class="p">()</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="n">get_chat_node</code><code class="p">()},</code> <code class="n">users</code><code class="p">).</code>

<code class="c">%% @doc Ask chat room server for a profile of a given person.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">who</code><code class="p">(</code><code class="n">string</code><code class="p">(),</code> <code class="n">atom</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="p">[</code><code class="n">tuple</code><code class="p">()]).</code>

<code class="nf">who</code><code class="p">(</code><code class="nv">Person</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">({</code><code class="n">chatroom</code><code class="p">,</code> <code class="n">get_chat_node</code><code class="p">()},</code>
    <code class="p">{</code><code class="n">who</code><code class="p">,</code> <code class="nv">Person</code><code class="p">,</code> <code class="nv">ServerRef</code><code class="p">}).</code>

<code class="c">%% @doc Update profile with a key/value pair.</code>

<code class="p">-</code><code class="ni">spec</code><code class="p">(</code><code class="n">set_profile</code><code class="p">(</code><code class="n">atom</code><code class="p">(),</code> <code class="n">term</code><code class="p">())</code> <code class="o">-&gt;</code> <code class="n">term</code><code class="p">()).</code>

<code class="nf">set_profile</code><code class="p">(</code><code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">)</code> <code class="o">-&gt;</code>
  <code class="c">% ask *this* server for the current state</code>
  <code class="nv">NewProfile</code> <code class="o">=</code> <code class="nn">gen_server</code><code class="p">:</code><code class="n">call</code><code class="p">(</code><code class="o">?</code><code class="nv">CLIENT</code><code class="p">,</code> <code class="p">{</code><code class="n">set_profile</code><code class="p">,</code> <code class="nv">Key</code><code class="p">,</code> <code class="nv">Value</code><code class="p">}),</code>
  <code class="p">{</code><code class="n">ok</code><code class="p">,</code> <code class="nv">NewProfile</code><code class="p">}.</code></pre>
</div>
</div></section>