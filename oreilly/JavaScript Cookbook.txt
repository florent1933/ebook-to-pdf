<section class="chapter" data-original-filename="Chapter-5.asciidoc" id="creating_interactive_canvas_svg_apps"><div class="titlepage"><div><div><h1 class="title">Chapter 5. Creating Interactive Canvas and SVG Applications</h1></div></div></div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="introduction-id51">
<div class="titlepage"><div><div><h2 class="title">Introduction</h2></div></div></div>
<p id="the_web_is_a_ri">The Web is a richer place, indeed, with the new and improved innovations ready to use. Our old friends SVG and Canvas are getting new life and generating new interest. JavaScript and CSS provide a malleable palette in which to paint web pages, but the HTML5 <code class="literal">svg</code> and <code class="literal">canvas</code> elements provide the capability to take those pages into new and exciting territory.</p>
<p id="svg_or_scalabl">SVG, or Scalable Vector Graphics, is an XML-based vector graphics language that can be used to create scalable vector graphics within web pages. With HTML5, you can insert the SVG directly in the web page via the <code class="literal">svg</code> element.</p>
<p id="svg_is_not_depe_id1">SVG is not dependent on JavaScript. You can create graphical images using markup, and even animate them using CSS transitions or declarative animation via SMIL (Synchronized Multimedia Integration Language). However, as will be demonstrated in this chapter, the <code class="literal">svg</code> element and JavaScript can be used to create any number of dynamic and interactive effects.</p>
<p id="the_canvas_elem_id1">The <code class="literal">canvas</code> element originated with Apple, and has now become standardized as part of the HTML5 work. Unlike SVG, the <code class="literal">canvas</code> element is totally dependent on JavaScript. We add <code class="literal">canvas</code> elements into our page and then use a context API in order to draw into these elements.</p>
<div class="note" id="the_svg_and_can_id1"><p id="the_svg_and_can_id2">The <code class="literal">svg</code> and <code class="literal">canvas</code> elements are now implemented, in varying degrees, in all of this book’s target browsers and environments.</p></div>
<p id="all_of_the_exam" class="online_only">All of the examples in this chapter are implemented with JS Bin, which means you can test the actual code, not just read about. All JS Bin output is represented by a rectangle about the graphical interface area; most provide input controls for adding data or performing some action.</p>
<div class="sect2" id="see_also-id51">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="the_canvas_elem_id2">The <code class="literal">canvas</code> element is documented in the HTML5 specification at <a class="ulink" href="http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#the-canvas-element" target="_top">HTML5 Canvas spec</a>. The current working draft for the Canvas 2D Context can be found at <a class="ulink" href="http://www.w3.org/html/wg/drafts/2dcontext/html5_canvas/" target="_top">W3C Canvas 2D Context Spec</a>. Keep up with current work on SVG at <a class="ulink" href="http://www.w3.org/Graphics/SVG/" target="_top">SVG spec</a>.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="_creating_a_simple_rectangle_in_a_canvas_element">
<div class="titlepage"><div><div><h2 class="title">Creating a Simple Rectangle in a Canvas Element</h2></div></div></div>
<div class="sect2" id="problem-id51">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_add_id2">You want to add a <code class="literal">canvas</code> element to a web page, and then create a simple rectangle within the element.</p>
</div>
<div class="sect2" id="solution-id51">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="insert_a_canvas_id1">Insert a <code class="literal">canvas</code> element into the web page:</p>
<pre class="screen" id="canvas_width_id1">&lt;canvas width="300" height="300" id="imgcanvas"
style="border: 1px solid black; background-color: white"&gt;
&lt;p&gt;A single rectangle, red with a black border,
sized 100x100 pixels, in upper left corner.&lt;/p&gt;
&lt;/canvas&gt;</pre>
<p id="then_use_the_ca_id1">Then use the Canvas 2D context to draw the rectangle within the <code class="literal">canvas</code> element’s coordinate system:</p>
<pre class="screen" id="var_canvas__do_id1">var canvas = document.getElementById("imgcanvas");

// if canvas element successfully accessed
if (canvas.getContext) {

   // get 2D context
   var ctx = canvas.getContext('2d');

   // ensure area is clear
   ctx.clearRect(0,0,canvas.width, canvas.height);

   // set circle fill and outline colors
   ctx.fillStyle="rgb(255,0,0)";
   ctx.strokeStyle="#000000";

   // fill and outline rectangle
   ctx.fillRect(0,0,100,100);
   ctx.strokeRect(0,0,100,100);

 }</pre>
<p id="the_result_is_a_id1">The result is a simple red square with a black outline and white background, positioned with its left, top edge at the left, top corner of the larger <code class="literal">canvas</code> element.</p>
<div class="sidebar online_only" id="try_it_now_id57">
<div class="titlepage"><div><div><div class="sidebar-title">Try it Now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 390px;" src="http://jsbin.com/omotem/1/"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id51">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_canvas_elem_id3">The <code class="literal">canvas</code> element is inserted into the web page in the location you want the canvas drawing to exist. If you wish, you can provide CSS styling for the element. In the solution, I outlined the canvas element in black to make the container visible. By default, the background of the <code class="literal">canvas</code> area is transparent.</p>
<p id="set_the_width_a">Set the width and height of the <code class="literal">canvas</code> element using the <code class="literal">width</code> and <code class="literal">height</code> attributes. You can also, as shown in the solution, provide fallback content—in this case, a paragraph describing what’s being drawn within the <code class="literal">canvas</code> element.</p>
<p id="the_area_of_the">The area of the <code class="literal">canvas</code> element is a resolution-dependent bitmap. If scripting is enabled, the content reflects the JavaScript function calls drawing into the <code class="literal">canvas</code> element. If the page is printed, the <code class="literal">canvas</code> area reflects the state of the element’s bitmap at the time of the printing. If scripting is disabled, the fallback content of the element is displayed.</p>
<p id="to_draw_into_th">To draw into the <code class="literal">canvas</code> element you first have to get the <code class="literal">canvas</code> element’s context. To access the element’s 2D context, specify <code class="literal">2d</code> when calling the <code class="literal">canvas</code> element’s <code class="literal">getContext()</code> method. To access the element’s 3D context, specify <code class="literal">3d</code>, though be aware that there is limited support for 3D at this time</p>
<p id="before_you_begi">Before you begin drawing, test to see if the <code class="literal">canvas</code> element is supported by checking to see if the <code class="literal">getContext</code> method is available. If it is, access the canvas context:</p>
<pre class="screen" id="var_canvas__do_id2">var canvas = document.getElementById("imgcanvas");

// if canvas element successfully accessed
if (canvas.getContext) {

   // get 2D context
   var ctx = canvas.getContext('2d');

   ...

 }</pre>
<p id="the_d_context_">The 2D Context API has one basic predefined shape, the rectangle. It also has three rectangle methods:</p>
<div class="variablelist" id="fillrect_uses_t"><dl class="variablelist">
<dt><span class="term">
<code class="literal">fillRect</code>
</span></dt>
<dd>
Uses the currently set <code class="literal">fillStyle</code> value to fill the rectangle
</dd>
<dt><span class="term">
<code class="literal">strokeRect</code>
</span></dt>
<dd>
Uses the currently set <code class="literal">strokeStyle</code> value to outline the rectangle
</dd>
<dt><span class="term">
<code class="literal">clearRect</code>
</span></dt>
<dd>
Clears whatever is drawn within the rectangle area
</dd>
</dl></div>
<p id="in_the_solution_id6">In the Solution, the first method called is <code class="literal">clearRect</code>, which clears the area of any previously drawn graphics, but without resetting any previously set styles or transformations. If the <code class="literal">canvas</code> element is drawn into only once, it’s not necessary to use <code class="literal">clearRect</code> because the <code class="literal">canvas</code> area is already clear. However, if your JavaScript is interactive, and the <code class="literal">canvas</code> area is drawn into again and again, any new drawing overlaps the existing drawing.</p>
<p id="to_demonstrate">To demonstrate, modify the code to enclose the JavaScript that draws the box, and remove the call to <code class="literal">clearRect</code>. In addition, change the code to use variables to hold the rectangle origin parameters, and then adjust the values each time the function is called. Lastly, call <code class="literal">setTimeout</code> to call the function multiple times to create an animation effect of a red square moving diagonally across and down the page:</p>
<pre class="screen" id="x___y___f">x = 0;
y = 0;

function drawBox() {
  var canvas =    document.getElementById("imgcanvas");

  // if canvas element successfully accessed
  if (canvas.getContext) {

     // get 2D context
     var ctx = canvas.getContext('2d');

     // set rectangle fill and outline colors
     ctx.fillStyle="rgb(255,0,0)";
     ctx.strokeStyle="#000000";

     // fill and outline rectangle
     ctx.fillRect(x,y,20,20);
     ctx.strokeRect(x,y,20,20);

   }
  x+=20;
  y+=20;

  // animate
  if (x &lt; 300) {
    setTimeout(drawBox, 200);
  }</pre>
<p id="add_a_button_to">Add a button to call the newly created function when clicked:</p>
<pre class="screen" id="button_typeb">&lt;button type="button" onclick="drawBox()"&gt;
    Run Example&lt;/button&gt;</pre>
<p id="contrary_to_wha">Contrary to what you might expect, clicking on the button doesn’t <span class="emphasis"><em>move</em></span> the box down and over on the page—it replicates it, with each succeeding box placed just to the right and bottom of the previous.</p>
<div class="sidebar online_only" id="try_it_now_id58">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/ujokal/2/"> </iframe></div>
</div>
<p id="adding_a_call_t">Adding a call to <code class="literal">clearRect</code> ensures a clean canvas area, regardless of how we change the JavaScript at a later time.</p>
<pre class="screen" id="function_drawbo">function drawBox() {
  var canvas =    document.getElementById("imgcanvas");

  // if canvas element successfully accessed
  if (canvas.getContext) {

     // get 2D context
     var ctx = canvas.getContext('2d');

     // clear the space
     ctx.clearRect(0,0,canvas.width, canvas.height);

     // set rectangle fill and outline colors
     ctx.fillStyle="rgb(255,0,0)";
     ctx.strokeStyle="#000000";

     // fill and outline rectangle
     ctx.fillRect(x,y,20,20);
     ctx.strokeRect(x,y,20,20);

   }
  x+=20;
  y+=20;

  // animate
  if (x &lt; 300) {
    setTimeout(drawBox, 200);
  }
}</pre>
<p id="and_now_we_have">And now we have a moving box, rather than a replicated box.</p>
<div class="sidebar online_only" id="try_it_now_id59">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/elomuc/4/"> </iframe></div>
</div>
<p id="speaking_of_mov">Speaking of moving the rectangle, it’s important to understand the <code class="literal">canvas</code> element’s coordinate system before you begin drawing.</p>
<p id="the_canvas_elem_id4">The <code class="literal">canvas</code> element’s coordinate system is a two-dimensional grid. A coordinate of 0,0 is at the top, left corner of the element’s area. If <span class="emphasis"><em>x</em></span> represents the horizontal position, and <span class="emphasis"><em>y</em></span> the vertical, increasing the value of x moves the origin down the page, while increasing the value of y moves the origin to the right.</p>
<p id="consider_the_so">Consider the solution. Both the <code class="literal">fillRect</code> and <code class="literal">strokeRect</code> methods take the rectangle origin (x,y) in the first two parameters, and the width and height in the third and fourth parameters, respectively. In the solution, the calls to both methods set the top, left corner of the box at 0,0 and the width and height at 100.</p>
<p id="to_reposition_t">To reposition the rectangle, change the first two parameters. To increase the width of the rectangle towards the right, increase the width parameter. However, to move the border of the rectangle to the left, you an specify a negative value for the width. The same apples to the height: an increasing positive value expands the rectangle to the bottom; using an increasing negative value expands the rectangle to the top of the <code class="literal">canvas</code> space.</p>
<p id="if_you_dont_us">If you don’t use numeric values, no error is given; the values are ignored, and the rectangle isn’t drawn.</p>
<p id="test_the_forgiv" class="online_only">Test the forgiving nature of the Canvas methods, first by providing valid numeric values, then nonsensical non-numeric values. If you have your JavaScript console open, you won’t see any errors.</p>
<div class="sidebar online_only" id="try_it_now_id60">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 550px;" src="http://jsbin.com/ijixit/1/"> </iframe></div>
</div>
<p id="of_course_its">Of course, it’s also important to ensure that the rectangle is colored the way you want. There’s two different components when it comes to the rectangle’s color—the rectangle’s fill color and the color of the outline—and you need to set both if you’re planning on using both.</p>
<p id="to_set_the_fill">To set the fill color, call the <code class="literal">fillStyle</code> method, passing in a CSS color, a <code class="literal">CanvasGradient</code>, or a <code class="literal">CanvasPattern</code>. The latter two are more advanced than we want to examine in this introduction, so we’ll just focus on the CSS color:</p>
<pre class="screen" id="ctxfillstyle_id1">ctx.fillStyle="rgb(255,0,0); // solid color red
ctx.fillStyle="rgba(255,0,0,.5); // incorporating transparency
ctx.fillStyle="black";
ctx.fillStyle="#00cc00"; // darker green</pre>
<p id="the_strokestyle">The <code class="literal">strokeStyle</code> is used to define the style for the lines outlining the shape. It also takes a CSS color, <code class="literal">CanvasGradient</code>, or <code class="literal">CanvasPattern</code>:</p>
<pre class="screen" id="ctxstrokestyle">ctx.strokeStyle="rgb(0,0,0); // black outline
ctx.strokeStyle="red";
ctx.strokeStyle="rgba(0,0,255,.1); // faint blue outline
ctx.strokeStyle="#ff00ff"; // magenta</pre>
<p id="as_with_the_ori">As with the origin and width and height parameters, a
nonsensical value is ignored. Not providing a correct
<code class="literal">strokeStyle</code> or <code class="literal">fillStyle</code> value causes the <code class="literal">canvas</code> element to revert to the default, which is black for both.</p>
<p id="the_following_e_id2" class="online_only">The following example takes both a <code class="literal">fillStyle</code> and a
<code class="literal">strokeStyle</code> color. Click the "Edit in jsBin" to modify the example to also take a <code class="literal">lineWidth</code> value, to change the width of the outline.</p>
<div class="sidebar online_only" id="try_it_now_id61">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 480px;" src="http://jsbin.com/ujager/1/"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="manip-simple-rect-svg">
<div class="titlepage"><div><div><h2 class="title">Manipulating a Simple Rectangle in SVG</h2></div></div></div>
<div class="sect2" id="problem-id53">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_be_">You want to be able to directly access a rectangle drawn in SVG and embedded in an HTML5 document and modify its properties.</p>
</div>
<div class="sect2" id="solution-id53">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="you_can_provide">You can provide an identifier for an SVG element as easily as you provide one for any other element in an HTML5 document.</p>
<pre class="screen" id="svg_width_id1">&lt;svg width="300" height="300"
style="border: 1px solid black; background-color: white" id="svgelem"&gt;
  &lt;rect id="rect1" x="0" y="0" width="50"
  height="100" fill="green" stroke="black" /&gt;
&lt;/svg&gt;</pre>
<p id="in_javascript__id2">In JavaScript, access the <code class="literal">rect</code> element directly using <code class="literal">document.getElementById()</code> method and set the element’s attributes however you wish using the DOM (Document Object Model) method <code class="literal">setAttribute</code>.</p>
<p id="the_following_c">The following code snippet:</p>
<pre class="screen" id="var_rect__docu">var rect = document.getElementById('rect1');

rect.setAttribute('width',100);
rect.setAttribute('fill', 'red');</pre>
<p id="results_in_a_sq">Results in a square, red box with a black outline, fitted to the upper, left corner of the <code class="literal">svg</code> element.</p>
<div class="sidebar online_only" id="try_it_now_id62">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/abowod/2/"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id53">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="svg_is_not_depe_id2">SVG is not dependent on JavaScript. If you want a red box in a <code class="literal">svg</code> element within an HTML5 web page, you just create it directly using XML, and the box is drawn as long as the browser supports the <code class="literal">svg</code> element.</p>
<p id="you_can_howeve">You can, however, use JavaScript to create, remove, or manipulate the contents of the SVG element, just as you can create, remove, or manipulate other elements in the page.</p>
<p id="in_the_solution_id7">In the solution, two attributes for the SVG <code class="literal">rect</code> element are modified: <code class="literal">fill</code> and <code class="literal">width</code>. The code uses the <code class="literal">setAttribute</code> to make the changes. This method takes an attribute name and a new value, and changes the attribute on an existing element. Any of the attributes for the element can be modified, including the following attributes specific to the <code class="literal">rect</code> element:</p>
<div class="itemizedlist" id="x_the_xaxis_c_id1"><ul class="itemizedlist">
<li class="listitem">
<code class="literal">x</code>: The x-axis coordinate representing the leftmost corner of the rectangle
</li>
<li class="listitem">
<code class="literal">y</code>: The y-axis coordinate representing the topmost corner of the rectangle
</li>
<li class="listitem">
<code class="literal">width</code>: The width of the rectangle
</li>
<li class="listitem">
<code class="literal">height</code>: The height of the rectangle
</li>
<li class="listitem">
<code class="literal">rx</code>: The x-axis radius of the ellipse used to round the corners of the rectangle
</li>
<li class="listitem">
<code class="literal">ry</code>: The y-axis radius of the ellipse used to round the corners of the rectangle
</li>
</ul></div>
<p id="the_latter_two_">The latter two attributes, <code class="literal">rx</code> and <code class="literal">ry</code> are interesting. SVG supports rounded rectangle corners. If neither attribute is specified, then the corners are squared off, as shown in the solution. If only one of the values is provided, the other is assumed to be equal to the one provided. And if the value set for either is wider than half the width of the rectangle, it’s automatically reset to half the width, no more. In other words, the rectangle is transformed into an ellipse (or a circle if the width and height are the same).</p>
<p id="there_is_limite">There is limited error checking for the attribute. If you set a non-existing attribute, nothing negative happens. No error is thrown. However, if you provide a nonsensical value for an existing attribute, such as providing a value of <span class="emphasis"><em>cat</em></span> for <code class="literal">rx</code>, you will get an error.</p>
<p id="take_the_follow" class="online_only">Take the following SVG example for a spin, providing both valid and invalid values for the parameters. Open your JavaScript console to see the resulting errors if you provide nonsensical values for existing attributes. You’ll also notice the changes are cumulative.</p>
<div class="sidebar online_only" id="try_it_now_id63">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 450px;" src="http://jsbin.com/osisuc/2/"> </iframe></div>
</div>
<p id="one_perk_with_u">One perk with using SVG over Canvas is you can animate a SVG object directly, rather than having to repaint the <code class="literal">canvas</code> area. For instance, to re-create the animated box example demonstrated with Canvas earlier, animating the same box in SVG could be accomplished with the following JavaScript:</p>
<pre class="screen" id="x___y__">x = 20;
y = 20;

function moveBox() {
  var box =    document.getElementById("rect1");

  box.setAttribute("x",x);
  box.setAttribute("y",y);

  x+=20;
  y+=20;

  // animate
  if (x &lt; 300) {
    setTimeout(moveBox, 200);
  }
}</pre>
<p id="were_accessing">We’re accessing and moving an element, not repainting the entire bitmap.</p>
<div class="sidebar online_only" id="try_it_now_id64">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/axafar/1/"> </iframe></div>
</div>
<p id="another_major_d">Another major difference between Canvas and SVG is SVG is resolution independent. What this means is that where a bitmap image created by Canvas degrades if the image is sized larger (resulting in a <span class="emphasis"><em>pixelated</em></span> image), the SVG image won’t. Resolution independence has always been the advantage of vector graphics: they resize from the very small to the very large without loss of quality.</p>
<p id="the_coordinate_">The coordinate system for the <code class="literal">svg</code> element is the same as the coordinate system for the <code class="literal">canvas</code> element: the origin of 0,0 is the topmost, left corner of the element’s grid, with increasing values of <span class="emphasis"><em>x</em></span> moving down, and increasing values of <span class="emphasis"><em>y</em></span> moving right. In SVG, this coordinate system is known as the <span class="emphasis"><em>viewport</em></span>.</p>
<p id="svg_does_howev">SVG does, however, provide a way to map a user defined coordinate system on to the viewport. For instance, the following JavaScript would increase the width and height of the square to 400 pixels each, which would size the square outside of the <code class="literal">svg</code> element’s visible area.</p>
<pre class="screen" id="function_expand_id1">function expandSquare() {
  var rect = document.getElementById("rect1");

  rect.setAttribute("width",400);
  rect.setAttribute("height", 400);
}</pre>
<p id="i_made_the_outl">I made the outline larger by setting <code class="literal">stroke-width</code> to 10 so you can see how the lower bottom and far right of the rectangle are clipped by the <code class="literal">svg</code> element border when the rectangle is expanded.</p>
<div class="sidebar online_only" id="try_it_now_id65">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/osalep/2/"> </iframe></div>
</div>
<p id="however_if_i_i">However, if I incorporate a user coordinate system that maps two units of measurement onto every unit of the coordinate system, the rectangle would fit into the given space. The way to do this is to use the <code class="literal">svg</code> element <code class="literal">viewBox</code> attribute.</p>
<p id="the_viewbox_att">The <code class="literal">viewBox</code> attribute is a set of values—min-x, min-y, width, and height—separated by commas or white space, which specifies a rectangle in the user space that is mapped to the viewport. In this case, we want to ensure all of the rectangle is visible when we expand its size, so we set the <code class="literal">viewBox</code> attribute on the <code class="literal">svg</code> element to a value of <span class="strong"><strong><code class="literal">0,0,600,600</code></strong></span>, making the space more than sufficient to display the entire rectangle.</p>
<pre class="screen" id="function_expand_id2">function expandSquare() {
  var svgelement = document.getElementById("svgelem");

  svgelement.setAttribute("viewBox", "0,0,600,600");

  var rect = document.getElementById("rect1");

  rect.setAttribute("width",400);
  rect.setAttribute("height", 400);
}</pre>
<p id="now_the_entire">Now, the entire rectangle fits into the <code class="literal">svg</code> element, without having to change the rectangle’s dimensions. The use of a <code class="literal">viewBox</code> is typically how you make an SVG image fit into an element within your page or application, even if the dimensions of the elements within the SVG exceed the space you want to provide. This ability is especially important when you’re using SVG you’ve found elsewhere.</p>
<p id="test_out_the_vi" class="online_only">Test out the <code class="literal">viewBox</code> capability more fully by trying out different combinations of min-x, min-y, width, and height of the <code class="literal">svg</code> element.</p>
<div class="sidebar online_only" id="try_it_now_id66">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 500px;" src="http://jsbin.com/olasav/1/"> </iframe></div>
</div>
<div class="note" id="speaking_of_fin_id1"><p id="speaking_of_fin_id2">Speaking of finding SVG to copy elsewhere, a great resource for open source SVG is the <a class="ulink" href="http://openclipart.org/" target="_top">OpenClipArt web site</a>. You can copy the SVG markup directly and use as is or modify for your own purposes.</p></div>
<p id="another_interes">Another interesting aspect of SVG is the ability to manipulate the _aspect ratio_—the ratio of width to height—when you’re using a <code class="literal">viewBox</code>. In the previous example, I used a 1:1 ratio when I added the <code class="literal">viewBox</code>. In the following code snippet, though, the aspect ratio is no longer a 1:1 between width and height—the aspect ratio has changed to 3:4. So what happens to the square?</p>
<pre class="screen" id="svg_width_id2">&lt;svg width="300" height="300"
  viewBox="0,0,600,800"
  style="border: 1px solid black"&gt;
    &lt;rect id="rect1" x="30" y="30"
    width="400" height="400"
    fill="red" stroke="yellow"
    stroke-width="10" /&gt;
  &lt;/svg&gt;</pre>
<p id="absolutely_noth">Absolutely nothing. The square is still a square.</p>
<div class="interactive"><iframe style="width: 100%; height: 350px;" src="http://jsbin.com/awilez/1"> </iframe></div>
<p id="the_reason_why__id3">The reason why the square didn’t suddenly become an elongated rectangle is because of another important SVG attribute, <code class="literal">preserveAspectRatio</code>. The <code class="literal">preserveAspectRatio</code> controls what happens to the aspect ratio of the SVG element contents. Using it, you can decide if you want to preserve the aspect ratio, and if so, in what way.</p>
<p id="there_are_vario">There are various values you can use with preserveAspectRatio. They consist of one or two parameters, the first of which is the <span class="emphasis"><em>align</em></span> parameter:</p>
<div class="itemizedlist" id="none__do_not_f_id1"><ul class="itemizedlist">
<li class="listitem">
<code class="literal">none</code> - Do not force uniform scaling. Scale the graphic content of the given element non-uniformly if necessary such that the element’s bounding box exactly matches the viewport rectangle. (Note: if &lt;align&gt; is none, then the optional &lt;meetOrSlice&gt; value is ignored.)
</li>
<li class="listitem">
<code class="literal">xMinYMin</code> - Force uniform scaling. Align the &lt;min-x&gt; of the element’s ‘viewBox’ with the smallest X value of the viewport.Align the &lt;min-y&gt; of the element’s ‘viewBox’ with the smallest Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMidYMin</code> - Force uniform scaling. Align the midpoint X value of the element’s ‘viewBox’ with the midpoint X value of the viewport.
Align the &lt;min-y&gt; of the element’s ‘viewBox’ with the smallest Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMaxYMin</code> - Force uniform scaling. Align the &lt;min-x&gt;+&lt;width&gt; of the element’s ‘viewBox’ with the maximum X value of the viewport. Align the &lt;min-y&gt; of the element’s ‘viewBox’ with the smallest Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMinYMid</code> - Force uniform scaling. Align the &lt;min-x&gt; of the element’s ‘viewBox’ with the smallest X value of the viewport. Align the midpoint Y value of the element’s ‘viewBox’ with the midpoint Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMidYMid</code> (the default) - Force uniform scaling. Align the midpoint X value of the element’s ‘viewBox’ with the midpoint X value of the viewport.Align the midpoint Y value of the element’s ‘viewBox’ with the midpoint Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMaxYMid</code> - Force uniform scaling. Align the &lt;min-x&gt;+&lt;width&gt; of the element’s ‘viewBox’ with the maximum X value of the viewport.Align the midpoint Y value of the element’s ‘viewBox’ with the midpoint Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMinYMax</code> - Force uniform scaling. Align the &lt;min-x&gt; of the element’s ‘viewBox’ with the smallest X value of the viewport. Align the &lt;min-y&gt;+&lt;height&gt; of the element’s ‘viewBox’ with the maximum Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMidYMax</code> - Force uniform scaling. Align the midpoint X value of the element’s ‘viewBox’ with the midpoint X value of the viewport. Align the &lt;min-y&gt;+&lt;height&gt; of the element’s ‘viewBox’ with the maximum Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMaxYMax</code> - Force uniform scaling. Align the &lt;min-x&gt;+&lt;width&gt; of the element’s ‘viewBox’ with the maximum X value of the viewport. Align the &lt;min-y&gt;+&lt;height&gt; of the element’s ‘viewBox’ with the maximum Y value of the viewport.
</li>
</ul></div>
<p id="an_optional_sec">An optional second parameter, the <span class="emphasis"><em>meetOrSlice</em></span> parameter, can also be specified for <code class="literal">preserveAspectRatio</code>. It’s separated from the align parameter by one or more spaces, and has one of two values:</p>
<div class="itemizedlist" id="meet_the_defau_id1"><ul class="itemizedlist">
<li class="listitem">
<code class="literal">meet</code> (the default) - Scale the graphic such that: aspect ratio is preserved the entire ‘viewBox’ is visible within the viewport the ‘viewBox’ is scaled up as much as possible, while still meeting the other criteria. In this case, if the aspect ratio of the graphic does not match the viewport, some of the viewport will extend beyond the bounds of the ‘viewBox’ (i.e., the area into which the ‘viewBox’ will draw will be smaller than the viewport).
</li>
<li class="listitem">
<code class="literal">slice</code> - Scale the graphic such that: aspect ratio is preserved the entire viewport is covered by the ‘viewBox’ the ‘viewBox’ is scaled down as much as possible, while still meeting the other criteria. In this case, if the aspect ratio of the ‘viewBox’ does not match the viewport, some of the ‘viewBox’ will extend beyond the bounds of the viewport (i.e., the area into which the ‘viewBox’ will draw is larger than the viewport).
</li>
</ul></div>
<p id="when_no_preserv">When no <code class="literal">preserveAspectRatio</code> is provided, a default value of <code class="literal">xMidYMid meet</code> is used. The result of this default value is that the aspect ratio is enforced, the midpoint x, y value of the <code class="literal">viewBox</code> is aligned with the midpoint x,y value of the viewport, all of the <code class="literal">viewBox</code> is visible in the viewport and is scaled as large as possible while still maintaining the same aspect ratio.</p>
<p id="what_all_this_m">What all this means is that the <code class="literal">preserveAspectRatio</code> default value preserves the image aspect ratio in as large and non-disruptive manner as possible.</p>
<p id="most_of_the_tim">Most of the time, the default will suit your needs. However, sometimes you may want your image to scale to fit the viewport completely, or you’re not as concerned about maintaining the aspect ratio. That’s when you’re going to need to try out different <code class="literal">preserveAspectRatio</code> values to find the one that suits your needs.</p>
<p id="to_see_what_hap">To see what happens with various <code class="literal">preserveAspectRatio</code> settings, I created an application that allows the user to select an <span class="emphasis"><em>align</em></span> parameter, and then one of the <span class="emphasis"><em>meetOrSlice</em></span> values. Both are concatenated and used to modify the SVG element. In addition, the <code class="literal">preserveAspectRatio</code> setting used is printed beneath the SVG, for verification purposes.</p>
<p id="the_control_ele">The control elements for the demonstration:</p>
<pre class="screen" id="select_idali">&lt;select id="align"&gt;
  &lt;option value="none"&gt;none&lt;/option&gt;
  &lt;option value="xMinYMin"&gt;xMinYMin&lt;/option&gt;
  &lt;option value="xMidYMin"&gt;xMidYMin&lt;/option&gt;
  &lt;option value="xMaxYMin"&gt;xMaxYMin&lt;/option&gt;
  &lt;option value="xMinYYMid"&gt;xMinYMid&lt;/option&gt;
  &lt;option value="xMidYMid"&gt;xMidYMid&lt;/option&gt;
  &lt;option value="xMaxYMid"&gt;xMaxYMid&lt;/option&gt;
  &lt;option value="xMinYMax"&gt;xMinYMax&lt;/option&gt;
  &lt;option value="xMidYMax"&gt;xMidYMax&lt;/option&gt;
  &lt;option value="xMaxYMax"&gt;xMaxYMax&lt;/option&gt;&lt;/select&gt;
  &lt;br /&gt;

&lt;input type="radio" name="meetOrSlice"
value="meet"&gt;meet&lt;br&gt;
&lt;input type="radio" name="meetOrSlice"
value="slice"&gt;slice&lt;br /&gt;

&lt;button type="button"
  onclick="changeAspect()"&gt;Run Example&lt;/button&gt;</pre>
<p id="the_controlling">The controlling JavaScript:</p>
<pre class="screen" id="function_change">function changeAspect() {

 var mtslice="";
 var align=document.getElementById("align");
 var alignVal = align.options[align.selectedIndex].value;

 if (alignVal != "none") {

     var meetOrSlice =
       document.getElementsByName("meetOrSlice");

    for (var i = 0; i &lt; meetOrSlice.length; i++) {
      if (meetOrSlice[i].checked) {
         mtslice=meetOrSlice[i].value;
         break;
      }
    }

  }

 var preserve = alignVal + " " + mtslice;

 document.getElementById("svgelem").
 setAttribute("preserveAspectRatio",preserve);

 document.getElementById("preserve").innerHTML=
   "&lt;p&gt;Aspect setting: " + preserve + "&lt;/p&gt;";

}</pre>
<p id="finally_the_sv">Finally, the <code class="literal">svg</code> element and the <code class="literal">div</code> element for holding the text of the aspect ratio setting:</p>
<pre class="screen" id="svg_idsvgele_id1">&lt;svg id="svgelem" width="300" height="300"
  viewBox="0,0,600,1200"
  preserveAspectRatio="xMaxYMax meet"
  style="border: 1px solid black; background-color: white"&gt;
    &lt;rect id="rect1" x="30" y="30" width="400"
    height="400" fill="red" stroke="yellow"
    stroke-width="10" /&gt;
&lt;/svg&gt;
&lt;div id="preserve"&gt;&lt;/div&gt;</pre>
<p id="putting_it_alto">Putting it altogether, you can try out the different aspect ratio settings until you get a good idea of how it all fits together.</p>
<p id="start_with_sele" class="online_only">Start with selecting <span class="emphasis"><em>none</em></span> first, to see what the figure looks like when the aspect ratio is <span class="emphasis"><em>not</em></span> preserved.</p>
<div class="sidebar online_only" id="try_it_now_id67">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 550px;" src="http://jsbin.com/equvip/4/"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="insert-circle-canvas">
<div class="titlepage"><div><div><h2 class="title">Inserting a Circle Using Canvas</h2></div></div></div>
<div class="sect2" id="problem-id54">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_cre_id7">You want to create an arbitrarily sized and placed circle in a web page using the <code class="literal">canvas</code> element.</p>
</div>
<div class="sect2" id="solution-id54">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="insert_a_canvas_id2">Insert a <code class="literal">canvas</code> element into the web page:</p>
<pre class="screen" id="canvas_width_id2">&lt;canvas width="300" height="300" id="imgcanvas"
style="border: 1px solid black; background-color: white"&gt;
&lt;p&gt;A simple rectangle&lt;/p&gt;
&lt;/canvas&gt;</pre>
<p id="then_use_the_ca_id2">Then use the Canvas 2D Context to create the circle shape:</p>
<pre class="screen" id="var_canvas__do_id3">var canvas = document.getElementById("imgcanvas");

// if canvas element successfully accessed
if (canvas.getContext) {

   // get 2D context
   var ctx = canvas.getContext('2d');

   // set circle fill and outline colors
   ctx.fillStyle="rgb(255,0,0)";
   ctx.strokeStyle="#000000";

   // begin path
   ctx.beginPath();

   // draw circle
   ctx.arc(150,150,150,0,Math.PI*2,true);

   // close path
   ctx.closePath();

   // fill and outline
   ctx.fill();
   ctx.stroke();

 }</pre>
<div class="sidebar online_only" id="try_it_now_id68">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/jscookbook/11/"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id54">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_canvas_d_c">The <code class="literal">canvas</code> 2d context only supports a built-in rectangle shape. Any other shape is going to require the use of a Canvas <span class="emphasis"><em>path</em></span>.</p>
<p id="a_canvas_path_b">A Canvas path begins and ends with <code class="literal">beginPath()</code> and <code class="literal">endPath()</code>. The actual makeup of the path is drawn with various <code class="literal">canvas</code> context methods, but in this example, we’re focusing only on one, <code class="literal">arc()</code>.</p>
<p id="the_arc_metho">The <code class="literal">arc()</code> method can be used to draw a circle, or parts of the circumference of a circle. It takes, as parameters, an x, y value representing the center of a circle, the radius, the starting angle, ending angle, and a boolean indicating whether to draw the circle in a clockwise direction (<span class="strong"><strong><code class="literal">false</code></strong></span>), or anticlockwise direction (<span class="strong"><strong><code class="literal">true</code></strong></span>).</p>
<p id="to_create_a_cir">To create a circle, use zero (0) as a beginning angle, and <span class="strong"><strong><code class="literal">Math.PI*2</code></strong></span>. as the ending angle. Specify whatever radius and origin suits your needs.</p>
<pre class="screen" id="ctxbeginpath">ctx.beginPath();
ctx.arc(x,y,radius,0,Math.PI*2,true);
ctx.closePath();</pre>
<p id="once_the_path_i">Once the path is defined, it needs to be drawn. You can outline the circle using the <code class="literal">stroke()</code> method, and fill an enclosed path with <code class="literal">fill()</code>. The following JavaScript:</p>
<pre class="screen" id="ctxfillstyle_id2">ctx.fillStyle="rgb(255,0,0)";
ctx.strokeStyle="#000000";

ctx.beginPath();

ctx.arc(x,y,radius,0,Math.PI*2,true);

ctx.closePath();

ctx.fill();
ctx.stroke();</pre>
<p id="creates_a_red_c">Creates a red circle with black border centered in the <code class="literal">canvas</code> element’s space.</p>
<p id="to_get_a_better_id1" class="online_only">To get a better idea of how <code class="literal">arc()</code> works, modify the y and y coordinate of the origin and the arc radius in the following example to see what the impact each has on the finished drawing. Note that any part of the circle that does not fit into the <code class="literal">canvas</code> element is visibly clipped at the element’s borders.</p>
<div class="sidebar online_only" id="try_it_now_id69">
<div class="titlepage"><div><div><div class="sidebar-title">Try it Now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 550px;" src="http://jsbin.com/iyiwex/1/"> </iframe></div>
</div>
<div class="tip" id="canvas_and_accessibility">
<h3 class="title">Canvas and Accessibility</h3>
<p id="its_important_">It’s important to provide fallback content not only if JavaScript is not enabled, but also for accessibility purposes.</p>
<p id="current_work_is">Current work is underway with the W3C to provide more in-depth accessibility information with the <code class="literal">canvas</code> element. Until implemented, though, you shouldn’t use the <code class="literal">canvas</code> element for important information (unless you provide a fallback), or for site navigation or other critical site use.</p>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="creating-svg-circle">
<div class="titlepage"><div><div><h2 class="title">Creating a Circle in SVG</h2></div></div></div>
<div class="sect2" id="problem-id55">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_dyn">You want to dynamically create an arbitrarily sized circle in a web page using SVG, rather than statically creating the circle.</p>
</div>
<div class="sect2" id="solution-id55">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_documentcr">Use <code class="literal">document.createElementNS()</code> to create the new circle, <code class="literal">setAttribute()</code> to set each attribute you want to set, and then <code class="literal">appendChild()</code> to add the newly created circle to the existing <code class="literal">svg</code> element in the web page.</p>
<pre class="screen" id="var_svgelem__d">var svgelem = document.getElementById('svgelem');

// create circle
// note use of namespace
var circle =
  document.createElementNS("http://www.w3.org/2000/svg", "circle");

circle.setAttribute("cx", 150);
circle.setAttribute("cy", 150);
circle.setAttribute("r",  150);
circle.setAttribute("fill", "red");
circle.setAttribute("stroke", "black");

svgelem.appendChild(circle);</pre>
</div>
<div class="sect2" id="discussion-id55">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="creating_a_circ">Creating a circle in SVG is no different than creating a <code class="literal">div</code> element with text, or rows in an HTML table. You create the new element, you assign values to its attributes, and then you append the new element to an existing web page element.</p>
<p id="the_one_differe">The one difference, and it is significant, is that with <code class="literal">svg</code>, you have to use the namespace version of the DOM methods to create the internal SVG elements, as only the <code class="literal">svg</code> element is within the HTML5 namespace—not the SVG elements, themselves.</p>
<pre class="screen" id="var_circle__do">var circle =
  document.createElementNS("http://www.w3.org/2000/svg", "circle");</pre>
<p id="once_youve_cre">Once you’ve created the new element, then you can use the non-namespace specific DOM methods to finish up your task. You can assign values to its attributes using <code class="literal">setAttribute()</code>:</p>
<pre class="screen" id="circlesetattri">circle.setAttribute("cy", 150);</pre>
<p id="you_can_append_">You can append the new element to its parent element with <code class="literal">appendChild()</code>:</p>
<pre class="screen" id="svgelemappendc">svgelem.appendChild(circle);</pre>
<p id="the_result_is_a_id2">The result is a red circle with black border identical in appearance to the one created using Canvas, earlier in this chapter.</p>
<div class="interactive"><iframe style="width: 100%; height: 350px;" src="http://jsbin.com/agugot/4"> </iframe></div>
<p id="to_get_a_better_id2">To get a better idea of how creating circles works, create an application that takes parameters for circles and adds them to the same <code class="literal">svg</code> element. Each circle overlaps earlier circles, as they are added to the web page.</p>
<p id="the_input_contr">The input controls:</p>
<pre class="screen" id="labelcx_la">&lt;label&gt;cx: &lt;/label&gt;&lt;input type="text" value="150" id="cx" /&gt;
&lt;br /&gt;
&lt;label&gt;cy: &lt;/label&gt;&lt;input type="text" value="150" id="cy" /&gt;
&lt;br /&gt;
&lt;label&gt;radius: &lt;/label&gt;&lt;input type="text" value="150" id="r" /&gt;
&lt;br /&gt;
&lt;label&gt;fill: &lt;/label&gt;&lt;input type="text" value="red" id="fill" /&gt;
&lt;br /&gt;
&lt;label&gt;stroke: &lt;/label&gt;&lt;input type="text" value="black"
id="stroke" /&gt;
&lt;br /&gt;
&lt;button type="button" onclick="drawCircle()"&gt;Run Example&lt;/button&gt;</pre>
<p id="the_parent_svg_">The parent <code class="literal">svg</code> element:</p>
<pre class="screen" id="svg_idsvgele_id2">&lt;svg id="svgelem" width="300" height="300"
  style="border: 1px solid black; background-color: white"&gt;
  &lt;/svg&gt;</pre>
<p id="and_the_javascr">And the JavaScript that controls it all:</p>
<pre class="screen" id="function_drawci">function drawCircle() {

  var svgelem = document.getElementById('svgelem');

  // get attributes
  var cx = document.getElementById('cx').value;
  var cy = document.getElementById('cy').value;
  var r = document.getElementById('r').value;
  var fill = document.getElementById('fill').value;
  var stroke = document.getElementById('stroke').value;

  // create circle
  // note use of namespace
  var circle =
  document.createElementNS("http://www.w3.org/2000/svg", "circle");

  circle.setAttribute('cx', cx);
  circle.setAttribute('cy', cy);
  circle.setAttribute('r',  r);
  circle.setAttribute('fill', fill);
  circle.setAttribute('stroke', stroke);

  svgelem.appendChild(circle);
}</pre>
<p id="there_is_no_way">There is no way to clear the display space in SVG as there is with Canvas. Canvas is a bitmap environment, while SVG is vector-based. The only way to clear the <code class="literal">svg</code> element space would be to remove all existing element using the DOM.</p>
<p id="try_differing_s" class="online_only">Try differing sizes of circles, positioned all throughout the <code class="literal">svg</code> element space to see how the new elements overlap.</p>
<div class="sidebar online_only" id="try_it_now_id70">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 550px;" src="http://jsbin.com/acujob/1/"> </iframe></div>
</div>
<p id="of_course_an_a">Of course, an advantage to SVG being vector-based, not bitmap, is that it’s very easy to animate individual components of the SVG space (demonstrated earlier), as well as attach events to each element. The only way to catch events for Canvas <span class="emphasis"><em>elements</em></span>, such as capturing mouse clicks for a Canvas circle, is to capture the mouse click for the <code class="literal">canvas</code> element, and extrapolate its position relative to whatever objects are in the work space.</p>
<div class="note" id="microsoft_was_l_id1"><p id="microsoft_was_l_id2">Microsoft was late to the game when it comes to both Canvas and SVG, but has been making up for lost time. One of the better discussions on the relative advantages to each graphics approach—Canvas or SVG—can be found at the IEBlog, in an article titled <a class="ulink" href="http://blogs.msdn.com/b/ie/archive/2011/04/22/thoughts-on-when-to-use-canvas-and-svg.aspx" target="_top">Thoughts on when to use Canvas and SVG</a>.</p></div>
</div>
</div></section><section class="chapter" data-original-filename="Chapter-1.asciidoc" id="strings_reg_exp"><div class="titlepage"><div><div><h1 class="title">Chapter 1. Working with Strings and Regular Expressions</h1></div></div></div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="introduction-id00001">
<div class="titlepage"><div><div><h2 class="title">Introduction to Strings as Object and Literal</h2></div></div></div>
<p id="the_javascript_">The JavaScript string is the most fundamental data type in JavaScript. Though you may get numeric values from web page forms, the values are retrieved as strings, which you then have to convert into numeric values.</p>
<p id="strings_are_als">Strings are also used as parameters when invoking server-side application calls through Ajax, as well as forming the basic serialization format of every JavaScript object. One of the methods that all JavaScript objects share is <code class="literal">toString</code>, which returns a string containing the serialized format of the object.</p>
<p id="a_javascript_st">A JavaScript string can be both a <span class="emphasis"><em>primitive</em></span> data type or a String object. As a primitive type, it joins with four other JavaScript primitive types: number, Boolean (true or false), <code class="literal">null</code> (no value), and <code class="literal">undefined</code> (unknown). In addition, as a primitive data type, strings are also JavaScript <span class="emphasis"><em>literals</em></span>: a collection that includes numbers (as either floating point or integer), the literal format for arrays, objects, and regular expressions, as well as numbers and Booleans.</p>
<p id="string_literals">String literals are created just by quoting some text in single or double quotes. It doesn’t matter what type of quote you use, though you may want to adjust what you use based on the string content. If the string contains a single quote, you’ll want to use double quotes:</p>
<pre class="screen" id="var_str__this_id1">var str = "This isn't a String object";</pre>
<p id="or_you_can_use_">Or you can use single quotes, and escape the contained single quote:</p>
<pre class="screen" id="var_str__this_id2">var str = 'This isn\'t a String object":</pre>
<div class="sidebar online_only" id="try_it_now_id1">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="it_can_get_mess">It can get messy if you accidentally forget to escape a quote within a quoted string.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ifekof/1/embed?javascript"> </iframe></div>
</div>
<p id="you_create_a_st">You create a String object using the <code class="literal">new</code> operator and the String constructor:</p>
<pre class="screen" id="var_str__this_id3">var str = "this is a string literal";

var strObj = new String("this is a string object");</pre>
<p id="if_you_use_tool">If you use tools such as JSLint, you will get a warning when you use the String constructor.</p>
<div class="sidebar online_only" id="try_it_now_id2">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="note_the_warnin">Note the warning message in the JavaScript panel. JS Bin uses JSLint, hence the warning.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ayinob/1/embed?javascript,console"> </iframe></div>
</div>
<p id="the_reason_why__id1">The reason why is that string literals and objects are not the same thing, but are often treated the same. However, if you try to use <span class="emphasis"><em>strict equality</em></span> with the two different types, the equality expression will fail because the data types differ. Still, it is through the String object that we have access to various functions.</p>
<p id="when_we_invoke_">When we invoke a function on a string literal, what’s really happening is that the literal is wrapped in an object, the function call is processed, and then the temporary String object is discarded. From a performance perspective, then, it makes more sense to use String objects if we know we’re going to use String functions.</p>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="concatenating_two_or_more_variables">
<div class="titlepage"><div><div><h2 class="title">Concatenating Two or More Variables</h2></div></div></div>
<div class="sect2" id="problem-id00003">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_con">You want to concatenate two or more variables into a single string.</p>
</div>
<div class="sect2" id="solution-id00004">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="concatenate_the">Concatenate the variables using the addition (<code class="literal">+</code>) operator:</p>
<pre class="screen" id="var_string___id1">var string1 = "This is a ";
var string2 = "number: ";
var number1 = 5;

// creates a new string with "This is a number: 5"
var stringResult = string1 + string2 + number1;</pre>
</div>
<div class="sect2" id="discussion-id00005">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_addition_op">The addition operator (<code class="literal">+</code>) is typically used to add numbers together:</p>
<pre class="screen" id="var_newvalue__">var newValue = 1 + 3; // result is 4</pre>
<p id="in_javascript__id1">In JavaScript, though, the addition operator is <span class="emphasis"><em>overloaded</em></span>, which means it can be used for multiple data types, including strings. When used with strings, the results are <span class="emphasis"><em>concatenated</em></span>.</p>
<p id="you_can_add_two">You can add two strings:</p>
<pre class="screen" id="var_string__s">var string3 = string1 + string2;</pre>
<p id="or_you_can_add_">or you can add multiple strings:</p>
<pre class="screen" id="var_string___id2">var string1 = "This";
var string2 = "is";
var string3 = "a";
var string4 = "test";
var stringResult = string1 + " " + string2 + " " +
string3 + " " + string4; // result is "This is a test"</pre>
<p id="you_can_also_co_id1">You can also concatenate variables of different data types into a string, as long as one of the variables (or values) is a string. For instance, the following code snippet adds the numbers numerically:</p>
<pre class="screen" id="var_result____id1">var result = 4 + 5 + 3; // 12</pre>
<p id="but_adding_in_a">But adding in a string changes everything:</p>
<pre class="screen" id="var_result__">var result = "" + 5 + 4 + 3; // string with "543"</pre>
<p id="as_in_real_esta">As in real estate, though, location is everything. If the string is concatenated after the numbers, the results can be surprising:</p>
<pre class="screen" id="var_result____id2">var result = 5 + 4 + 3; // string with "12"</pre>
<p id="if_the__operat">If the <code class="literal">+</code> operator is used with numeric values, it adds the values. It’s only when it encounters the different data type (the string) is the result converted into a string. Based on this information, what do you think the following result would contain?</p>
<pre class="screen" id="var_result____id3">var result = 5 + 4 + "" + 3;</pre>
<div class="sidebar online_only" id="try_it_now_id3">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="see_for_yoursel">See for yourself what the result would be. Add in a <code class="literal">console.log</code> call with the final result and click the Run button.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/etuzib/1/embed?javascript,console"> </iframe></div>
</div>
<p id="the_string_coer">The string coercion works with other data types, such as booleans, and dates:</p>
<pre class="screen" id="var_dt__new_da_id1">var dt = new Date(); // creates date object with current date and time

var result = "Today's date is " + dt; // string with text and date</pre>
<p id="the_reason_why__id2">The reason why this form of concatenation works is that all standard JavaScript objects inherit a method, <code class="literal">toString</code> that returns a string representation of the object’s contents. When "adding" the string to the object, the <code class="literal">toString</code> method on the object is invoked and the results concatenated to the string.</p>
<div class="sidebar online_only" id="try_it_now_id4">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/esovew/1/embed?javascript,console"> </iframe></div>
</div>
<p id="there_is_a_shor">There is a shortcut to concatenating strings, and that’s the JavaScript <span class="emphasis"><em>shorthand assignment operator</em></span> (<code class="literal">+=</code>). The following code snippet, which uses this operator:</p>
<pre class="screen" id="var_oldvalue___id1">var oldValue = "apples";
oldValue += " and oranges"; // string now has "apples and oranges"</pre>
<p id="is_equivalent_t">is equivalent to:</p>
<pre class="screen" id="var_oldvalue___id2">var oldValue = "apples";
oldValue = oldValue + " and oranges";</pre>
<p id="the_shorthand_a">The shorthand assignment operator works with strings by concatenating the string on the right side of the operator to the end of the string on the left.</p>
<p id="there_is_a_buil">There is a built-in <code class="literal">String</code> method that can concatenate multiple strings: <code class="literal">concat</code>. It takes one or more string parameters, each of which are appended to the end of the string object:</p>
<pre class="screen" id="returns_thi">// returns "This is a string"
var nwStrng = "".concat("This ","is ","a ","string");</pre>
<p id="the_concat_meth">The <code class="literal">concat</code> method can be a simpler way to generate a string from multiple values, such as generating a string from several form fields. However, the use of the addition operator is the more commonly used approach.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="conditionally_comparing_strings">
<div class="titlepage"><div><div><h2 class="title">Conditionally Comparing Strings</h2></div></div></div>
<div class="sect2" id="problem-id00009">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_com">You want to compare two strings to see if they’re the same.</p>
</div>
<div class="sect2" id="solution-id00010">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_equalit">Use the <span class="emphasis"><em>equality</em></span> operator (<code class="literal">==</code>) within a conditional test:</p>
<pre class="screen" id="var_strname__p_id1">var strName = prompt("What's your name?", "");

if (strName == "Shelley") {
   alert("Your name is Shelley! Good for you!");
} else {
   alert("Your name isn't Shelley. Bummer.");
}</pre>
<p id="if_you_want_to_">If you want to ensure that two variables are of the same type as well as having the same content, use the <span class="emphasis"><em>strict equality</em></span> operator (<code class="literal">===</code>):</p>
<pre class="screen" id="true_only_if">// true only if both variables are string literal
// or string objects, and the string is exactly the same
if (someString === anotherString) {
   ...
}</pre>
</div>
<div class="sect2" id="discussion-id00011">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="two_strings_can">Two strings can be compared using the equality operator (<code class="literal">==</code>). When used within a conditional statement, a block of code is run if the test evaluates to true (the strings are equal):</p>
<pre class="screen" id="if_strname___id1">if (strName == "Shelley") {
   alert("Your name is Shelley! Good for you!");
}</pre>
<p id="if_the_strings_">If the strings are not equal, the first statement following the conditional statement block is processed. If an <span class="emphasis"><em>if…else</em></span> conditional statement is used, the block of code following the <code class="literal">else</code> keyword is the one that’s processed:</p>
<pre class="screen" id="if_strname___id2">if (strName == "Shelley") {
   ...
} else {
   alert("Your name isn't Shelley. Bummer.");
}</pre>
<p id="there_are_facto">There are factors that can influence the success of the string comparison. For instance, strings have <span class="emphasis"><em>case</em></span>, and can consist of uppercase characters, lowercase characters, or a combination of both. Unless case is an issue, you’ll most likely want to convert the string to all lowercase or uppercase, using the built-in <code class="literal">String</code> methods <code class="literal">toLowerCase</code> and <code class="literal">toUpperCase</code>, before making the comparison, as shown in the following code:</p>
<pre class="screen" id="var_strname__p_id2">var strName = prompt("What's your name?", "");

if (strName.toUpperCase () == "SHELLEY") {
   alert("Your name is Shelley! Good for you!");
} else {
   alert("Your name isn't Shelley. Bummer.");
}</pre>
<p id="note_that_the_t">Note that the <code class="literal">toUpperCase</code> method (and <code class="literal">toLowerCase</code>) do not take any parameters.</p>
<p id="in__i_discusse">In <a class="xref" href="ch01.html#concatenating_two_or_more_variables" title="Concatenating Two or More Variables">“Concatenating Two or More Variables”</a>, I discussed that data type conversion occurs automatically when concatenating different data types with a string. This same type of data type conversion also occurs with the equality operator if one value is a string. In the following, the number 10.00 is converted into the string <span class="emphasis"><em>10</em></span>, and then used in the comparison:</p>
<pre class="screen" id="var_numval__">var numVal = 10.00;
if (numVal == "10") alert ("The value is ten"); succeeds</pre>
<p id="there_may_be_ti">There may be times, though, when you don’t want automatic data conversion to occur—when you want the comparison to fail if the values are of different data types. For instance, if one value is a string literal and the other is a <code class="literal">String</code> object, you might want the comparison to fail because the two variables are of different data types, regardless of their perspective values. In this case, you’ll want to use a different equality operator, the <span class="emphasis"><em>strict equality</em></span> operator (<code class="literal">===</code>):</p>
<pre class="screen" id="var_strobject__id1">var  strObject = new  String("Boston");
var  strLiteral  =  "Boston";

if (strObject  ==  strLiteral) // this comparison succeeds

...

if (strObject === strLiteral) // fails - different data types</pre>
<p id="the_comparison_">The comparison fails if the two variables being compared are different data types, even though their primitive string values are the same.</p>
<p id="sometimes_you_">Sometimes, you might want to specifically test that two strings are <span class="emphasis"><em>not</em></span> alike, rather than whether they are alike. The operators to use then are the <span class="emphasis"><em>inequality</em></span> operator (<code class="literal">!=</code>) and <span class="emphasis"><em>strict inequality</em></span> operator (<code class="literal">!==</code>). Unlike the equality operators, the comparison only succeeds if the two values are not equal:</p>
<pre class="screen" id="var_strnone__">var strnOne  =  "one";
var strnTwo  =  "two";
if (strnOne != strnTwo) // true</pre>
<p id="the_strict_ineq">The strict inequality operator returns true if the strings are not the same value or the data type of the two <span class="emphasis"><em>operands</em></span> (values on either side of the operator) is different:</p>
<pre class="screen" id="var_strobject__id2">var strObject = new String("Boston");
var strLiteral = "Boston";
if (strObject !== strLiteral) // true, data types differ</pre>
<p id="comparison_oper">Comparison operators work numerically with numbers, but lexically with strings. For instance, the value <span class="emphasis"><em>dog</em></span> would be lexically greater than <span class="emphasis"><em>cat</em></span>, because the letter <span class="emphasis"><em>d</em></span> in <span class="emphasis"><em>dog</em></span> occurs later in the alphabet than the letter <span class="emphasis"><em>c</em></span> in <span class="emphasis"><em>cat</em></span>:</p>
<pre class="screen" id="var_sone__cat_id1">var sOne = "cat";
var sTwo = "dog"
if (sOne &gt; sTwo // false, because "cat" is lexically less than "dog"</pre>
<p id="if_two_string_l">If two string literals only vary based on case, the uppercase characters are lexically greater than the lowercase letter:</p>
<pre class="screen" id="var_sone__cat_id2">var sOne  = "Cat";
var sTwo  = "cat";
if (sOne &gt;=  sTwo) // true, because 'C' is lexically greater than 'c'</pre>
<p id="there_is_no_str">There is no <span class="emphasis"><em>strict greater than</em></span> or <span class="emphasis"><em>strict less than</em></span> operators, so it makes no difference if the data type of the operands differs:</p>
<pre class="screen" id="var_sone__new_">var sOne = new String("cat");
var sTwo = "cat";
if (sOne &lt;= sTwo) // same literal, so true</pre>
<p id="if_youre_compa">If you’re comparing strings that contain numbers, you’ll most likely want to convert the values to numbers first. The reason why is that lexically, a value such as "12" is greater than "111", but numerically, the number 12 is less than 111.</p>
<pre class="screen" id="var_a___v">var a = '12';
var b = '111';

if (a &gt; b) {
  console.log('greater');
} else {
  console.log('lesser');
}

if (parseInt(a,10) &gt; parseInt(b,10)) {
  console.log('greater');
} else {
  console.log('lesser');
}</pre>
<p id="by_not_converti">By not converting the strings to numbers, you might get unexpected results. Of course, by converting the strings to numbers, you might get unexpected results, too. That’s just part of the fun with developing in JavaScript.</p>
<div class="sidebar online_only" id="try_it_now_id5">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ezuxov/1/embed?javascript,console"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="finding_a_substring_in_a_string">
<div class="titlepage"><div><div><h2 class="title">Finding a Substring in a String</h2></div></div></div>
<div class="sect2" id="problem-id00013">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_fin_id1">You want to find out if a substring (a specific sequence of characters) exists in a string.</p>
</div>
<div class="sect2" id="solution-id00014">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_string__id1">Use the <code class="literal">String</code> object’s built-in <code class="literal">indexOf</code> method to find the position of the substring, if it exists:</p>
<pre class="screen" id="var_testvalue__id1">var testValue = "This is the Cookbook's test string";
var subsValue = "Cookbook";

var iValue = testValue.indexOf(subsValue); // returns 12

if (iValue != -1) // succeeds, because substring exists</pre>
</div>
<div class="sect2" id="discussion-id00015">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_string_inde">The <code class="literal">String indexOf</code> method returns a number representing the <span class="emphasis"><em>index</em></span>, or position of the first character of the substring, with 0 being the index position of the first character in the string.</p>
<p id="to_test_if_the_">To test if the substring doesn’t exist, you can compare the returned value to –1, which is the value returned if the substring isn’t found:</p>
<pre class="screen" id="if_ivalue__">if (iValue != -1) // true if substring found</pre>
<p id="the_indexof_met_id1">The <code class="literal">indexOf</code> method takes two parameters: the substring, and an optional second parameter, an index value of where to begin a search:</p>
<pre class="screen" id="var_tststring_">var tstString = "This apple is my apple";
var iValue = tstString.indexOf("apple", 10); // returns 17, index of second substring</pre>
<div class="sidebar online_only" id="try_it_now_id6">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ufiyiw/2/embed?javascript,live,console"> </iframe></div>
</div>
<p id="the_indexof_met_id2">The <code class="literal">indexOf</code> method works from left to right, but sometimes you might want to find the index of a substring by searching within the string from right to left. There’s another <code class="literal">String</code> method, <code class="literal">lastIndexOf</code>, which returns the index position of the last occurrence of a substring within a string:</p>
<pre class="screen" id="var_txtstring_">var txtString = "This apple is my apple";
var iValue = tstString.lastIndexOf("apple"); // returns 17</pre>
<p id="like_indexof_l">Like <code class="literal">indexOf</code>, <code class="literal">lastIndexOf</code> also takes an optional second parameter, which is an index value of where to start the search, counted from the right:</p>
<pre class="screen" id="this_apple_is_">"This apple is my apple".lastIndexOf("apple"); // returns 17
"This apple is my apple".lastIndexOf("apple",12); // returns 5
"This apple is my apple".lastIndexOf("apple", 3); // returns -1</pre>
<p id="notice_that_the_id1">Notice that the value returned from <code class="literal">lastIndexOf</code> changes based on the starting position, as counted from the string’s right.</p>
<div class="note" id="ch01note02"><p id="its_odd_to_see">It’s odd to see a <code class="literal">String</code> method called directly on quoted text, but in JavaScript, there’s no difference in calling the method on a string literal, directly, or on a string variable—at least, not from the perspective of the developer. There is a difference, of course, to the JavaScript engine.</p></div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="breaking_a_keyword_string_into_separate">
<div class="titlepage"><div><div><h2 class="title">Breaking a Keyword String into Separate Keywords</h2></div></div></div>
<div class="sect2" id="problem-id00024">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_have_a_stri">You have a string with keywords, separated by commas. You want to break the string into an array of separate keywords, and then print the keywords out with a keyword label.</p>
</div>
<div class="sect2" id="solution-id00025">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_string__id2">Use the <code class="literal">String split</code> method to split the string on the commas. Loop through the array, printing out the separate values. <a class="xref" href="ch01.html#demonstrating_using_of_string_split_to_g" title="Example 1-1. Demonstrating use of String split to get keyword list">Example 1-1</a> shows a complete web page demonstrating this approach. The keywords are provided by the web page reader, via a prompt window, and are then processed and printed out to the web page.</p>
<div class="example" id="demonstrating_using_of_string_split_to_g">
<div class="example-title">Example 1-1. Demonstrating use of String split to get keyword list</div>
<div class="example-contents">
<pre class="screen" id="doctype_html_id1">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Example 1-1&lt;/title&gt;
&lt;script type="text/javascript"&gt;

window.onload = function() {

   // get keyword list
    var keywordList = prompt("Enter keywords, separated by commas","");

   // use split to create array of keywords
   var  arrayList = keywordList.split(",");

   // build result HTML
   var resultString = "";
   for (var i = 0; i &lt; arrayList.length; i++) {
     resultString+="keyword: " + arrayList[i] + "&lt;br /&gt;";
   }

   // print out to page
   var  blk = document.getElementById("result");
   blk.innerHTML = resultString;
}

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id="result"&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<div class="sidebar online_only" id="try_it_now_id7">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ekanoj/1/"> </iframe></div>
</div>
</div>
</div>
</div>
<div class="sect2" id="discussion-id00026">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_string_spli">The <code class="literal">String split</code> method takes two parameters: a required parameter with the character representing the separator for the split method; the second parameter (optional) is a number representing a count of the number of splits to make. In <a class="xref" href="ch01.html#demonstrating_using_of_string_split_to_g" title="Example 1-1. Demonstrating use of String split to get keyword list">Example 1-1</a>, the separator is a comma (,), and no second parameter is provided. An example of using the second parameter is the following, where the use of the second parameter would generate an array with only two entries:</p>
<pre class="screen" id="var_strlist__">var strList = "keyword1,keyword2,keyword3,keyword4";
var arrayList = strList.split(",",2); // results in two element array</pre>
<p id="not_specifying_">Not specifying the second parameter will split on every occurrence of the separator found:</p>
<pre class="screen" id="var_arraylist__id1">var arrayList = strList.split(","); // four element array</pre>
<p id="heres_an_inter">Here’s an interesting use of <code class="literal">split</code>: if you want to split a string on every character, specify the empty string (<code class="literal">''</code>) or (<code class="literal">""</code>) as the separator:</p>
<pre class="screen" id="var_arraylist__id2">var arrayList = strList.split("");</pre>
<p id="you_can_also_us_id1">You can also use a regular expression as the parameter to split, though this can be a little tricky. For instance, to find the same sentence list as returned from the example code in the solution, you could use a couple of regular expressions:</p>
<pre class="screen" id="var_sentence__">var sentence = "This is one sentence. This is a sentence with a list of items:
cherries, oranges, apples, bananas.";
var val = sentence.split(/:/);
alert(val[1].split(/\./)[0]);</pre>
<p id="the_regular_exp_id1">The regular expression looks for a colon first, which is then used for the first split. The second split uses a regular expression on the resulting value from the first split, to look for the period. The list is then in the first array element of this result.</p>
<p id="tricky_and_a_l">Tricky, and a little hard to get your head around, but using regular expressions with <code class="literal">split</code> could be a handy option when nothing else works.</p>
<div class="sidebar online_only" id="try_it_now_id8">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="modify_the_stri">Modify the string and regular expression to try out different combinations.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/etociv/1/embed?javascript,console"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="inserting_special_characters">
<div class="titlepage"><div><div><h2 class="title">Inserting Special Characters</h2></div></div></div>
<div class="sect2" id="problem-id00028">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_ins_id1">You want to insert a special character, such as a line feed, into a string.</p>
</div>
<div class="sect2" id="solution-id00029">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_one_of_the_">Use one of the <span class="emphasis"><em>escape sequences</em></span> in the string. For instance, to add the copyright symbol into a block of text to be added to the page, use the escape sequence <code class="literal">\u00A9</code>:</p>
<pre class="screen" id="var_resultstrin">var resultString = "&lt;p&gt;This page \u00A9 Shelley Powers &lt;/p&gt;";

// print out to page
 var blk = document.getElementById("result");
 blk.innerHTML = resultString;</pre>
<p id="the_result_is_t">The result is the copyright character (©) we’re so familiar with.</p>
<div class="sidebar online_only" id="try_it_now_id9">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="replace_the_exi">Replace the existing sequence that provides a copyright symbol with others from the table given in the <a class="ulink" href="http://www.w3.org/TR/html5/syntax.html#named-character-references" target="_top">W3C HTML5 Specification</a>.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/axesar/2/embed?javascript,live"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00030">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_escape_sequ">The escape sequences in JavaScript all begin with the <span class="emphasis"><em>backslash character</em></span>, (\). This character lets the application processing the string know that what follows is a sequence of characters that need special handling.</p>
<p id="lists_the_other"><a class="xref" href="ch01.html#escape_sequences" title="Table 1-1. Escape sequences">Table 1-1</a> lists the other escape sequences.</p>
<div class="table" id="escape_sequences">
<div class="table-title">Table 1-1. Escape sequences</div>
<div class="table-contents"><table style="border-collapse: collapse;">
<colgroup>
<col class="col_1">
<col class="col_2">
</colgroup>
<thead><tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Sequence</td>
<td style="border-bottom: 0.5pt solid ; ">Character</td>
</tr></thead>
<tbody>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id1">\'</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="single_quote">Single quote</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id2">\"</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="double_quote">Double quote</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="backslash">\|Backslash</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="b_id1">\b</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="backspace">Backspace</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="f">\f</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="form_feed">Form feed</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="n_id1">\n</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="newline">Newline</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="r">\r</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="carriage_return">Carriage return</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="t_id1">\t</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="horizontal_tab">Horizontal tab</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="ddd_">_<code class="literal">ddd</code>_</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="octal_sequence_">Octal sequence (3 digits: <span class="emphasis"><em><code class="literal">ddd</code></em></span>)</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="x_dd_">\x_<code class="literal">dd</code>_</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; "><p id="hexadecimal_seq">Hexadecimal sequence (2 digits: <span class="emphasis"><em><code class="literal">dd</code></em></span>)</p></td>
<td><p id="u_dddd_">\u_<code class="literal">dddd</code>_</p></td>
</tr>
</tbody>
</table></div>
</div>
<p id="the_last_three_">The last three escape sequences in <a class="xref" href="ch01.html#escape_sequences" title="Table 1-1. Escape sequences">Table 1-1</a> are patterns, where providing different values will result in differing escape sequences.</p>
<p id="the_first_sever">The first several escape sequences listed in <a class="xref" href="ch01.html#escape_sequences" title="Table 1-1. Escape sequences">Table 1-1</a> can also be represented as a <span class="emphasis"><em>Unicode escape sequence</em></span>. For instance, the horizontal tab (<code class="literal">\t</code>), can also be represented as the Unicode escape sequence, <code class="literal">\u0009</code>. Of course, if the user agent disregards the special character, as browsers do with the horizontal tab, the use is moot.</p>
<p id="one_of_the_most">One of the most common uses of escape sequences is to include double or single quotes within strings delimited by the same character:</p>
<pre class="screen" id="var_newstring_">var newString = 'You can\'t use single quotes in a string surrounded by single
quotes';</pre>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="trimming_whitespace_from_the_ends_of_a_s">
<div class="titlepage"><div><div><h2 class="title">Trimming Whitespace from the Ends of a String</h2></div></div></div>
<div class="sect2" id="problem-id00035">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_tri_id1">You want to trim the whitespace around a string that you’ve accessed from a form element.</p>
</div>
<div class="sect2" id="solution-id00036">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_string__id3">Use the <code class="literal">String</code> <code class="literal">trim</code> method. In the following code snippet, text from a <code class="literal">textarea</code> element are split based on new line character (<code class="literal">\n</code>), and the resulting lines are trimmed for trailing and leading whitespace before being concatenated into a new string.</p>
<pre class="screen" id="var_txtbox__do">var txtBox = document.getElementById("test");
var lines = txtBox.value.split("\n");
var resultString = "";

for (var i = 0; i &lt; lines.length; i++) {
   var strng = lines[i].trim();
   resultString += strng + "-";
}</pre>
<div class="sidebar online_only" id="try_it_now_id10">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ejuhok/1/"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00037">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="prior_to_the_re">Prior to the release of ECMAScript 5, you had to use regular expressions and the <code class="literal">String replace</code> method to trim the unwanted whitespace from around a string. Now, trimming a string is as simple as calling the <code class="literal">trim</code> method.</p>
<p id="where_things_ca">Where things can get complicated is if you want to trim only the leading or following white space. Here is where the browsers differ.</p>
<p id="microsoft_suppo">Microsoft supports <code class="literal">ltrim</code> and <code class="literal">rtrim</code> for trimming white space from the left or right of the string, while other browsers support <code class="literal">trimLeft</code> and <code class="literal">trimRight</code>. There is no standardization in ECMAScript on trimming white space from the left or the right, only.</p>
<p id="the_best_approa">The best approach for left or right trimming only is to define the methods directly, making use of regular expressions. What you name them is up to you. You can define the custom methods directly on the String object, using the <code class="literal">prototype</code>, though you need to be aware that using the same name as one already defined for the object in the browser will override the standard implementation:</p>
<pre class="screen" id="stringprototyp">String.prototype.ltrim = function() {
    return this.replace(/^\s+/,"");
}
String.prototype.rtrim = function() {
        return this.replace(/\s+$/,"");
}</pre>
<p id="or_you_can_crea">Or you can create stand alone functions:</p>
<pre class="screen" id="function_trimle">function trimLeft(str) {
   return str.replace(/^\s+/,"");
}

function trimRight(str) {
   return str.replace(/\s+$/,"");
}</pre>
<p id="speaking_of_the">Speaking of the use of regular expressions, I cover these in the last sections of this chapter.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="_introduction_to_regular_expressions_and_the_regexp_object">
<div class="titlepage"><div><div><h2 class="title">Introduction to Regular Expressions and the RegExp Object</h2></div></div></div>
<p id="regular_express_id1">Regular expressions are search patterns that can be used to find text that matches a given pattern. For instance, we can look for a substring <span class="strong"><strong>Cookbook</strong></span> within a longer string using the <code class="literal">indexOf</code> method:</p>
<pre class="screen" id="var_testvalue__id2">var testValue = "This is the Cookbook's test string";
var subsValue = "Cookbook";

var iValue = testValue.indexOf(subsValue); // returns value of 12, index of substring</pre>
<p id="this_code_snipp">This code snippet works because we are looking for an exact match, which is all that <code class="literal">indexOf</code> supports.</p>
<p id="what_if_we_want">What if we want a more general search? For instance, we want to search for the words <span class="emphasis"><em>Cook</em></span> and <span class="emphasis"><em>Book</em></span>, in strings such as <span class="emphasis"><em>Joe’s Cooking Book</em></span> or <span class="emphasis"><em>JavaScript Cookbook</em></span>?</p>
<p id="when_were_look">When we’re looking for strings that match a pattern rather than an exact substring, we need to use regular expressions.</p>
<p id="javascript_prov">JavaScript provides for regular expression literals, delimited with backslashes:</p>
<pre class="screen" id="var_re__regul">var re = /regular expression/;</pre>
<p id="the_regular_exp_id2">The regular expression pattern is contained between opening and closing forward slashes. Note that this pattern is <span class="emphasis"><em>not</em></span> a string: you do not want to use single or double quotes around the pattern, unless the quotes themselves are part of the pattern to match.</p>
<p id="regular_express_id2">Regular expressions are made up of characters, either alone or in combination with special characters, that provide for more complex matching. For instance, the following is a regular expression for a pattern that matches against a string that contains the word <span class="emphasis"><em><code class="literal">Cook</code></em></span> and the word <span class="emphasis"><em><code class="literal">Book</code></em></span> in that order, and separated by one or more whitespace characters:</p>
<pre class="screen" id="var_re__cook">var re = /Cook\s+Book/;</pre>
<p id="the_special_cha">The special characters in this example are the backslash character (<code class="literal">\</code>), which has two purposes: either it’s used with a regular character, to designate that it’s a special character; or it’s used with a special character, such as the plus sign (<code class="literal">+</code>), to designate that the character should be treated literally. In this case, the backslash is used with <code class="literal">s</code>, which transforms the letter s to a special character designating a whitespace character, such as a space, tab, line feed, or form feed. The <code class="literal">\s</code> special character is followed by the plus sign, <code class="literal">\s+</code>, which is a signal to match the preceding character (in this example, a whitespace character) one or more times. This regular expression would work with the following:</p>
<pre class="screen" id="cook_book_id1">Cook Book</pre>
<p id="it_would_also_w">It would also work with the following:</p>
<pre class="screen" id="cook_book_id2">Cook     Book</pre>
<p id="it_would_not_wo">It would not work with:</p>
<pre class="screen" id="cookbook">CookBook</pre>
<p id="it_doesnt_matt">It doesn’t matter how much whitespace is between <span class="strong"><strong>Cook</strong></span> and <span class="strong"><strong>Book</strong></span>, because of the use of <code class="literal">\s+</code>. However, the use of the plus sign does require at least one whitespace character.</p>
<p id="shows_the_most_"><a class="xref" href="ch01.html#regular_expression_special_characters" title="Table 1-2. Regular expression special characters">Table 1-2</a> shows the most commonly used special characters in JavaScript applications.</p>
<div class="table" id="regular_expression_special_characters">
<div class="table-title">Table 1-2. Regular expression special characters</div>
<div class="table-contents"><table style="border-collapse: collapse;">
<colgroup>
<col class="col_1">
<col class="col_2">
<col class="col_3">
</colgroup>
<thead><tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Character</td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Matches</td>
<td style="border-bottom: 0.5pt solid ; ">Example</td>
</tr></thead>
<tbody>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id3">^</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_beginni">Matches beginning of input</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="this_matches">/^This/ matches <span class="emphasis"><em>This is…</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id4">$</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_end_of_">Matches end of input</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="end_matches_">/end?/ matches <span class="emphasis"><em>This is the end</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id5">*</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_zero_or_id1">Matches zero or more times</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="se_matches_s">/se*/ matches <span class="emphasis"><em>seeee</em></span> as well as <span class="emphasis"><em>se</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id6">?</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_zero_or_id2">Matches zero or one time</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="ap_matches_a_id1">/ap?/ matches <span class="emphasis"><em>apple</em></span> and <span class="emphasis"><em>and</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id7">+</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_one_or_">Matches one or more times</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="ap_matches_a_id2">/ap+/ matches <span class="emphasis"><em>apple</em></span> but not <span class="emphasis"><em>and</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id8"></p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_exactly">Matches exactly <span class="emphasis"><em>n</em></span> times</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="apie"><span class="emphasis"><em>apie</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="n_id2">{n,}</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_n_or_mo">Matches <span class="emphasis"><em>n</em></span> or more times</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="ap_matche">/ap{2,}/ matches all (p)s in <span class="emphasis"><em>apple</em></span> and <span class="emphasis"><em>appple</em></span> but not <span class="emphasis"><em>apie</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="nm">{n,m}</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_at_leas">Matches at least <span class="emphasis"><em>n</em></span>, at most <span class="emphasis"><em>m</em></span> times</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="ap_match">/ap{2,4}/ matches four (p)s in <span class="emphasis"><em>apppppple</em></span>;</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id9">.</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="any_character_e">Any character except newline</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="ae_matches_a">/a.e/ matches <span class="emphasis"><em>ape</em></span> and <span class="emphasis"><em>axe</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id10">[…]</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="any_character_w">Any character within brackets</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="apxe_matche">/a[px]e/ matches <span class="emphasis"><em>ape</em></span> and <span class="emphasis"><em>axe</em></span> but not <span class="emphasis"><em>ale</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id11">[^…]</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="any_character_b">Any character but those within brackets</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="apx_matche">/a[^px]/ matches <span class="emphasis"><em>ale</em></span> but not <span class="emphasis"><em>axe</em></span> or <span class="emphasis"><em>ape</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="b_id2">\b</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_on_word">Matches on word boundary</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="bno_matches__id1">/\bno/ matches the first <span class="emphasis"><em>no</em></span> in <span class="emphasis"><em>nono</em></span>;</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="b_id3">\B</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_on_nonw">Matches on nonword boundary</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="bno_matches__id2">/\Bno/ matches the second
<span class="emphasis"><em>no</em></span> in <span class="emphasis"><em>nono</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="d_id1">\d</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="digits_from__t">Digits from 0 to 9</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="simpara_id12"></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="d_id2">\D</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="any_nondigit_ch">Any nondigit character</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="d_match">/\D{2,4}/ matches <span class="emphasis"><em>Now</em></span> in <span class="emphasis"><em>Now in 123</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="w_id1">\w</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_word_ch">Matches word character (letters, digits, underscores)</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="w_matches_j_">/\w/ matches <span class="emphasis"><em>j</em></span> in <span class="emphasis"><em>javascript</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="w_id2">\W</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_any_non">Matches any nonword character (not letters, digits, or underscores)</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="w_matches__">\/W/ matches <span class="emphasis"><em>%</em></span> in <span class="emphasis"><em>100%</em></span></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="n_id3">\n</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="matches_a_line_">Matches a line feed</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="simpara_id13"></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="s_id1">\s</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="a_single_whites">A single whitespace character</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="simpara_id14"></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="s_id2">\S</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="a_single_charac">A single character that is not whitespace</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="simpara_id15"></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="t_id2">\t</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="a_tab">A tab</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="simpara_id16"></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; "><p id="x">(x)</p></td>
<td style="border-right: 0.5pt solid ; "><p id="capturing_paren">Capturing parentheses</p></td>
<td><p id="remembers_the_m">Remembers the matched characters</p></td>
</tr>
</tbody>
</table></div>
</div>
<p id="javascript_also_id1">JavaScript also supports a regular expression object, <code class="literal">RegExp</code>, as well as the literal. You pass the regular expression, in quotes, to the <code class="literal">RegExp</code> constructor:</p>
<pre class="screen" id="var_re__new_re">var re = new RegExp("Shelley\s+Powers");</pre>
<p id="when_to_use_whi">When to use which? The regular expression literal is compiled when script is evaluated, so you should use a regular expression literal when you know the expression won’t change—the compiled version is more efficient. Use the constructor when the expression changes or is provided at runtime.</p>
<div class="note" id="ch02note01"><p id="regular_express_id3">Regular expressions are powerful but can be tricky. This chapter is more an introduction to how regular expressions work in JavaScript than to regular expressions in general. If you want to learn more about regular expressions, I recommend the excellent <span class="emphasis"><em>Regular Expressions Cookbook</em></span> by Jan Goyvaerts and Steven Levithan (O’Reilly).</p></div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="testing_whether_a_substring_exists">
<div class="titlepage"><div><div><h2 class="title">Testing Whether a Substring Exists</h2></div></div></div>
<div class="sect2" id="problem-id00045">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_tes_id1">You want to test whether a string is contained in another string.</p>
</div>
<div class="sect2" id="solution-id00046">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_a_javascrip">Use a JavaScript regular expression to define a search pattern, and then use the <code class="literal">RegExp</code> <code class="literal">test</code> method to check for the pattern against the string to be searched. In the following, we want to match with any string that has the two words, <span class="emphasis"><em><code class="literal">Cook</code></em></span> and <span class="emphasis"><em><code class="literal">Book</code></em></span>, in that order:</p>
<pre class="screen" id="var_cookbookstr_id1">var cookbookString = [];

cookbookString[0] = "Joe's Cooking Book";
cookbookString[1] = "Sam's Cookbook";
cookbookString[2] = "JavaScript CookBook";
cookbookString[3] = "JavaScript BookCook";

// search pattern
var pattern = /Cook.*Book/;
for (var i = 0; i &lt; cookbookString.length; i++)
  console.log(cookbookString[i] + " " + pattern.test(cookbookString[i]));</pre>
<p id="the_first_and_t">The first and third strings have a positive match, while the second and fourth do not.</p>
<div class="sidebar online_only" id="try_it_now_id11">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ubusup/1/embed?javascript,console"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00047">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_regexp_test">The <code class="literal">RegExp test</code> method takes two parameters: the string to test, and an optional modifier. It applies the regular expression against the string and returns true if there’s a match, false if there is no match.</p>
<p id="in_the_example_id1">In the example, the pattern is the word <span class="emphasis"><em><code class="literal">Cook</code></em></span> appearing somewhere in the string, and the word <span class="emphasis"><em><code class="literal">Book</code></em></span> appearing anywhere in the string after <span class="emphasis"><em><code class="literal">Cook</code></em></span>. There can be any number of characters between the two words, including no characters at all, as designated in the pattern by the two regular expression characters: the decimal point (<code class="literal">.</code>), and the asterisk (<code class="literal">\*</code>).</p>
<p id="the_decimal_in_">The decimal in regular expressions is a special character that matches any character except the newline character. In the example pattern, the decimal is followed by the asterisk, which matches the preceding character zero or more times. Combined, they generate a pattern matching zero or more of any character, except newline.</p>
<p id="in_the_example_id2">In the example, the first and third string match, because they both match the pattern of <span class="emphasis"><em><code class="literal">Cook</code></em></span> and <span class="emphasis"><em><code class="literal">Book</code></em></span> with anything in between. The fourth does not, because the <span class="emphasis"><em><code class="literal">Book</code></em></span> comes before <span class="emphasis"><em><code class="literal">Cook</code></em></span> in the string. The second also doesn’t match, because the first letter of <span class="emphasis"><em><code class="literal">book</code></em></span> is lowercase rather than uppercase, and the matching pattern is case-dependent.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="testing_for_case-insensitive_substring_m">
<div class="titlepage"><div><div><h2 class="title">Testing for Case-Insensitive Substring Matches</h2></div></div></div>
<div class="sect2" id="problem-id00048">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_tes_id2">You want to test whether a string is contained in another string, but you don’t care about the case of the characters in either string.</p>
</div>
<div class="sect2" id="solution-id00049">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="when_creating_t">When creating the regular expression, use the ignore case flag (<code class="literal">i</code>):</p>
<pre class="screen" id="var_cookbookstr_id2">var cookbookString = new Array();

cookbookString[0] = "Joe's cooking Book";
cookbookString[1] = "Sam's Cookbook";
cookbookString[2] = "JavaScript CookBook";
cookbookString[3] = "JavaScript cookbook";

// search pattern
var pattern = /Cook.*Book/i;
for (var i = 0; i &lt; cookbookString.length; i++) {
  console.log(cookbookString[i] + " " + pattern.test(cookbookString[i],i));
}</pre>
<p id="all_four_string">All four strings match the pattern.</p>
<div class="sidebar online_only" id="try_it_now_id12">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/uqedik/1/embed?javascript,console"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00050">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_solution_us">The solution uses a regular expression flag (<code class="literal">i</code>) to modify the constraints on the pattern-matching. In this case, the flag removes the constraint that the pattern-matching has to match by case. Using this flag, values of <span class="emphasis"><em><code class="literal">book</code></em></span> and <span class="emphasis"><em><code class="literal">Book</code></em></span> would both match.</p>
<p id="there_are_only_">There are only a few regular expression flags, as shown in <a class="xref" href="ch01.html#regular_expression_flags" title="Table 1-3. Regular expression flags">Table 1-3</a>. They can be used with regular expression literals:</p>
<pre class="screen" id="var_pattern__">var pattern = /Cook.*Book/i; // the 'i' is the ignore flag</pre>
<p id="they_can_also_b">They can also be used when creating a <code class="literal">RegExp</code> object, via an optional second parameter:</p>
<pre class="screen" id="var_pattern__n">var pattern = new RegExp("Cook.*Book","i");</pre>
<div class="table" id="regular_expression_flags">
<div class="table-title">Table 1-3. Regular expression flags</div>
<div class="table-contents"><table style="border-collapse: collapse;">
<colgroup>
<col class="col_1">
<col class="col_2">
</colgroup>
<thead><tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Flag</td>
<td style="border-bottom: 0.5pt solid ; ">Meaning</td>
</tr></thead>
<tbody>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="g"><code class="literal">g</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="global_match_m">Global match: matches across an entire string, rather than stopping at first match</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="i"><code class="literal">i</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="ignores_case">Ignores case</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; "><p id="m"><code class="literal">m</code></p></td>
<td><p id="applies_begin_a">Applies begin and end line special characters (^ and $, respectively) to each line in a multiline string</p></td>
</tr>
</tbody>
</table></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="finding_and_highlighting_all_instances_o">
<div class="titlepage"><div><div><h2 class="title">Finding and Highlighting All Instances of a Pattern</h2></div></div></div>
<div class="sect2" id="problem-id00055">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_fin_id2">You want to find all instances of a pattern within a string.</p>
</div>
<div class="sect2" id="solution-id00056">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_regexp_">Use the <code class="literal">RegExp</code> <code class="literal">exec</code> method and the global flag (<code class="literal">g</code>) in a loop to locate all instances of a pattern, such as any word that begins with <span class="emphasis"><em><code class="literal">t</code></em></span> and ends with <span class="emphasis"><em><code class="literal">e</code></em></span>, with any number of characters in between:</p>
<pre class="screen" id="var_searchstrin_id1">var searchString = "Now is the time and this is the time and
that is the time and we all have the time and no
one has the whatever";
var pattern = /t\w*e/g;
var matchArray;

var str = "&lt;p&gt;";
while((matchArray = pattern.exec(searchString)) !== null) {
  str+="at " + matchArray.index + " we found " + matchArray[0] + "&lt;br /&gt;";
}
str+="&lt;/p&gt;";
document.getElementById("results").innerHTML=str;</pre>
<div class="sidebar online_only" id="try_it_now_id13">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="try_modifying_t">Try modifying the pattern, to see what results.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/eyifaj/1/embed?javascript,live"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00057">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_regexp_exec">The <code class="literal">RegExp exec</code> method executes the regular expression, returning <code class="literal">null</code> if a match is not found or an array of information if a match is found. Included in the returned array is the actual matched value, the index in the string where the match is found, any parenthetical substring matches, and the original string.</p>
<div class="variablelist" id="index_the_index"><dl class="variablelist">
<dt><span class="term">
<code class="literal">index</code>
</span></dt>
<dd>
The index of the located match
</dd>
<dt><span class="term">
<code class="literal">input</code>
</span></dt>
<dd>
The original input string
</dd>
</dl></div>
<p id="or_access"><code class="literal">\[0\]</code> or accessing array
          directly:: The matched value</p>
<div class="variablelist" id="n_p"><dl class="variablelist">
<dt><span class="term">
<code class="literal">\[1\],…,\[n\]</code>
</span></dt>
<dd>
Parenthetical substring matches
</dd>
</dl></div>
<p id="in_the_solution_id1">In the solution, the index where the match was found is printed out in addition to the matched value.</p>
<p id="the_solution_al">The solution also uses the global flag (<code class="literal">g</code>). This triggers the <code class="literal">RegExp</code> object to preserve the location of each match, and to begin the search after the previously discovered match. When used in a loop, we can find all instances where the pattern matches the string. In the solution, the following are printed out:</p>
<pre class="screen" id="at__we_found_t">at 7 we found the
at 11 we found time
at 28 we found the
at 32 we found time
at 49 we found the
at 53 we found time
at 74 we found the
at 78 we found time
at 98 we found the
at 105 we found teve</pre>
<p id="both_time_and_t">Both <span class="emphasis"><em><code class="literal">time</code></em></span> and <span class="emphasis"><em><code class="literal">the</code></em></span> match the pattern, but so does <span class="emphasis"><em><code class="literal">teve</code></em></span> from <span class="emphasis"><em><code class="literal">whatever</code></em></span>.</p>
<p id="lets_look_at_t">Let’s look at the nature of global searching in action. In <a class="xref" href="ch01.html#using_exec_and_global_flag_to_search_and" title="Example 1-2. Using exec and global flag to search and highlight all matches in a text string">Example 1-2</a>, a web page is created with a <code class="literal">textarea</code> and an input text box for accessing both a search string and a pattern. The pattern is used to create a <code class="literal">RegExp</code> object, which is then applied against the string. A result string is built, consisting of both the unmatched text and the matched text, except the matched text is surrounded by a <code class="literal">span</code> element, with a CSS class used to highlight the text. The resulting string is then inserted into the page, using the <code class="literal">innerHTML</code> for a <code class="literal">div</code> element.</p>
<div class="example" id="using_exec_and_global_flag_to_search_and">
<div class="example-title">Example 1-2. Using exec and global flag to search and highlight all matches in a text string</div>
<div class="example-contents"><pre class="screen" id="doctype_html_id2">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Searching for strings&lt;/title&gt;
&lt;style type="text/css"&gt;
.found
{
   background-color: #ff0;
}
&lt;/style&gt;
&lt;script type="text/javascript"&gt;

function doSearch() {
   // get pattern
   var pattern = document.getElementById("pattern").value;
   var re = new RegExp(pattern,"g");

   // get string
   var searchString = document.getElementById("incoming").value;

   var matchArray;
   var resultString = "&lt;pre&gt;";
   var first=0; var last=0;

   // find each match
   while((matchArray = re.exec(searchString)) !== null) {
     last = matchArray.index;
     // get all of string up to match, concatenate
     resultString += searchString.substring(first, last);

     // add matched, with class
     resultString += "&lt;span class='found'&gt;" + matchArray[0] + "&lt;/span&gt;";
     first = re.lastIndex;
   }

   // finish off string
   resultString += searchString.substring(first,searchString.length);
   resultString += "&lt;/pre&gt;";

   // insert into page
   document.getElementById("searchResult").innerHTML = resultString;
}

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;textarea id="incoming" cols="150" rows="10"&gt;
&lt;/textarea&gt;
&lt;p&gt;
Search pattern: &lt;input id="pattern" type="text" /&gt;&lt;/p&gt;
&lt;button type="button" onclick="doSearch()"&gt;Search for pattern&lt;/button&gt;
&lt;div id="searchResult"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div>
</div>
<p id="shows_the_appli"><a class="xref" href="ch01.html#application_finding_and_highlighting_all" title="Figure 1-1. Application finding and highlighting all matched strings">Figure 1-1</a> shows the application in action on William Wordsworth’s poem, <span class="emphasis"><em>The Kitten and the Falling Leaves,</em></span> after a search for the following pattern:</p>
<pre class="screen" id="leafve">lea(f|ve)</pre>
<p id="all_instances_o">All instances of <span class="emphasis"><em><code class="literal">leaves</code></em></span> are highlighted.</p>
<div class="figure" id="application_finding_and_highlighting_all">
<div class="figure-contents"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000001681/images/figure1-4.png" alt="Application finding and highlighting all matched strings"></div></div>
<div class="figure-title">Figure 1-1. Application finding and highlighting all matched strings</div>
</div>
<p id="the_bar__is_">The bar (<code class="literal">|</code>) is a conditional test, and will match a word based on the value on either side of the bar. So a word like <code class="literal">leaf</code> matches, as well as a word like <code class="literal">leave</code>, but not a word like <code class="literal">leap</code>.</p>
<div class="sidebar online_only" id="try_it_now_id14">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="try_the_example">Try the example, and then vary both the incoming text and the search pattern.</p>
<div class="interactive"><iframe style="width: 100%; height: 600px;" src="http://jsbin.com/icohur/1/"> </iframe></div>
</div>
<p id="you_can_access__id1">You can access the last index found through the RegExp’s <code class="literal">lastIndex</code> property. The <code class="literal">lastIndex</code> property is handy if you want to track both the first and last matches.</p>
</div>
<div class="sect2" id="see_also-id00058">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="describes_anoth"><a class="xref" href="ch01.html#replacing_patterns_with_new_strings" title="Replacing Patterns with New Strings">“Replacing Patterns with New Strings”</a> describes another way to do a standard find-and-replace behavior.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="replacing_patterns_with_new_strings">
<div class="titlepage"><div><div><h2 class="title">Replacing Patterns with New Strings</h2></div></div></div>
<div class="sect2" id="problem-id00059">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_rep">You want to replace all matched substrings with a new substring.</p>
</div>
<div class="sect2" id="solution-id00060">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_string__id4">Use the <code class="literal">String</code> object’s <code class="literal">replace</code> method, with a regular expression:</p>
<pre class="screen" id="var_searchstrin_id2">var searchString = "Now is the time, this is the time";
var re = /t\w{2}e/g;
var replacement = searchString.replace(re, "place");
console.log(replacement); // Now is the place, this is the place</pre>
<div class="sidebar online_only" id="try_it_now_id15">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/emunul/1/embed?javascript,console"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00061">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="in_in__we_used">In <a class="xref" href="ch01.html#using_exec_and_global_flag_to_search_and" title="Example 1-2. Using exec and global flag to search and highlight all matches in a text string">Example 1-2</a> in <a class="xref" href="ch01.html#finding_and_highlighting_all_instances_o" title="Finding and Highlighting All Instances of a Pattern">“Finding and Highlighting All Instances of a Pattern”</a>, we used the <code class="literal">RegExp</code> global flag (<code class="literal">g</code>) in order to track each occurrence of the regular expression. Each match was highlighted using a <code class="literal">span</code> element and CSS.</p>
<p id="a_global_search">A global search is also handy for a typical find-and-replace behavior. Using the global flag (<code class="literal">g</code>) with the regular expression in combination with the <code class="literal">String replace</code> method will replace all instances of the matched text with the replacement string.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-1.asciidoc" id="searching_for_special_characters">
<div class="titlepage"><div><div><h2 class="title">Searching for Special Characters</h2></div></div></div>
<div class="sect2" id="problem-id00072">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="we_need_to_sear">We need to search for regular expression special characters themselves.</p>
</div>
<div class="sect2" id="solution-id00073">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_backsla">Use the backslash to escape the pattern-matching character:</p>
<pre class="screen" id="var_re__d">var re = /\\d/;
var pattern = "\\d{4}";
var pattern2 = pattern.replace(re,"\\D");</pre>
<div class="sidebar online_only" id="try_it_now_id16">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/udacen/1/embed?javascript,console"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00074">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="in_the_solution_id2">In the solution, a regular expression is created that’s equivalent to the special character, <code class="literal">\d</code>, used to match on any number. The pattern is, itself, escaped, in the string that needs to be searched. The number special character is then replaced with the special character that searches for anything but a number, <code class="literal">\D</code>.</p>
<p id="sounds_a_little">Sounds a little convoluted, so I’ll demonstrate with a longer application. <a class="xref" href="ch01.html#regular_expression_matching_on_regular_e" title="Example 1-3. Regular expression matching on regular expression characters">Example 1-3</a> shows a small application that first searches for a sequence of four numbers in a string, and replaces them with four asterisks (<code class="literal">***\*</code>). Next, the application will modify the search pattern, by replacing the <code class="literal">\d</code> with <code class="literal">\D</code>, and then running it against the same string.</p>
<div class="example" id="regular_expression_matching_on_regular_e">
<div class="example-title">Example 1-3. Regular expression matching on regular expression characters</div>
<div class="example-contents"><pre class="screen" id="doctype_html_id3">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Replacement Insanity&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;content&lt;/p&gt;
&lt;script&gt;

  // search for \d
  var re = /\\d/;
  var pattern = "\\d{4}";
  var str = "I want 1111 to find 3334 certain 5343 things 8484";
  var re2 = new RegExp(pattern,"g");
  var str1 = str.replace(re2,"****");
  console.log(str1);
  var pattern2 = pattern.replace(re,"\\D");
  var re3 = new RegExp(pattern2,"g");
  var str2 = str.replace(re3, "****");
  console.log(str2);

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div>
</div>
<p id="here_is_the_ori">Here is the original string:</p>
<pre class="screen" id="i_want__to__id1">I want 1111 to find 3334 certain 5343 things 8484</pre>
<p id="the_first_strin">The first string printed out is the original string with the numbers converted into asterisks:</p>
<pre class="screen" id="i_want__to__id2">I want **** to find **** certain **** things ****</pre>
<p id="the_second_stri">The second string printed out is the same string, but after blocks of four non-sequential numeric characters have been converted into asterisks:</p>
<pre class="screen" id="nt_">****nt 1111******** 3334******** 5343********8484</pre>
<p id="though_this_exa">Though this example is short, it demonstrates some of the challenges when you want to search on regular expression characters themselves. Not all characters or white space have been converted, because of the requirement for four sequential non-numberic characters.</p>
<div class="sidebar online_only" id="try_it_now_id17">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/orerib/1/embed?javascript,console"> </iframe></div>
</div>
</div>
</div></section><section class="chapter" data-original-filename="Chapter-2.asciidoc" id="dates_numbers_math"><div class="titlepage"><div><div><h1 class="title">Chapter 2. Dates, Numbers, Timers, and Math</h1></div></div></div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="introduction-id00075">
<div class="titlepage"><div><div><h2 class="title">Introduction</h2></div></div></div>
<p id="javascript_incl">JavaScript includes support for dates, numbers, and various mathematical operations. It also includes support for timers, which are essential for animations and other timed tasks.</p>
<p id="like_the_string_id1">Like the <code class="literal">String</code>, numbers can be both a literal and an object via the <code class="literal">Number</code> object. The <code class="literal">Date</code> object, though, has no literal representation—all dates have to be created using the <code class="literal">Date</code> constructor.</p>
<p id="the_math_object_id1">The <code class="literal">Math</code> object is unique in that there is only one <code class="literal">Math</code> object, and we access static methods and properties off this one object. And timers are actually not defined in ECMAScript, but are, instead, defined within the Web API section of the HTML5 specification.</p>
<p id="its_all_a_bit_">It’s all a bit chaotic, but it comes together in the end.</p>
<div class="sect2" id="number_object_and_number_literal">
<div class="titlepage"><div><div><h3 class="title">The Number Object and Number Literal</h3></div></div></div>
<p id="numbers_in_java">Numbers in JavaScript are floating point, though there may not be a decimal component present. If no decimal is present, they act as if they’re integers:</p>
<pre class="screen" id="var_somevalue_">var someValue = 10; // treated as integer 10, in base 10</pre>
<p id="numbers_can_be_">Numbers can be defined in the range of –2<sup>53</sup> to 2<sup>53</sup>. Most numbers in JavaScript are literal values, assigned as values to variables, and used in various computations:</p>
<pre class="screen" id="var_mynum__">var myNum = 3.18;
var newNum = myNum * someValue;</pre>
<p id="you_can_also_co_id2">You can also construct a <code class="literal">Number</code> using a constructor method:</p>
<pre class="screen" id="var_newnum__ne">var newNum = new Number(23);</pre>
<p id="you_can_assign_">You can assign a literal number to a variable, but when you access a <code class="literal">Number</code> method on the variable, a <code class="literal">Number</code> object is created to wrap the literal value, which is discarded when the method is finished.</p>
<p id="the_number_obje">The <code class="literal">Number</code> object’s methods provide various display operations, such as providing an exponential notation:</p>
<pre class="screen" id="var_tst__">var tst = .0004532;
alert(tst.toExponential()); // outputs 4.532e-4</pre>
<p id="in_addition_th">In addition, there are several static <code class="literal">Number</code> properties, which can only be accessed via the <code class="literal">Number</code> object directly:</p>
<pre class="screen" id="alertnumberma">alert(Number.MAX_VALUE); // outputs 1.7976931348623157e+308</pre>
<p id="theres_a_speci">There’s a special <code class="literal">Number</code> static property, <code class="literal">NaN</code>, which is equivalent to the global <code class="literal">NaN</code>, and stands for <span class="emphasis"><em>Not a Number</em></span>. Anytime you try to use a value in a number operation that can’t be parsed as a number, you’ll get a <code class="literal">NaN</code> error:</p>
<pre class="screen" id="alertparseint">alert(parseInt("3.5")); // outputs 3
alert(parseInt("three point five")); // outputs NaN</pre>
</div>
<div class="sect2" id="date_object">
<div class="titlepage"><div><div><h3 class="title">The Date Object</h3></div></div></div>
<p id="the_date_object">The <code class="literal">Date</code> object contains a number representing the date and time, rather than a string representation. The numeric value for the <code class="literal">Date</code> object is the number of seconds since January 01, 1970 UTC. Leap seconds are ignored.</p>
<p id="strings_used_to">Strings used to create dates are parsed and converted into this numeric value. Both UTC (Coordinated Time Universal or Greenwich Mean Time) and ISO 8601 parsing are supported. You can create a date using a variety of techniques (see <a class="xref" href="ch02.html#printing_out_todayapostrophes_date" title="Printing Out Today’s Date">“Printing Out Today’s Date”</a> for a discussion of different approaches), and modify the date using an extensive number of methods.</p>
<p id="you_can_also_ac">You can also access every aspect of a date: year, month, day of week, time, and so on, using specialized <code class="literal">get</code> and <code class="literal">set</code> methods, described in Tables <a class="xref" href="ch02.html#date_object_get_methods" title="Table 2-1. Date object get methods">Table 2-1</a> and <a class="xref" href="ch02.html#date_object_set_methods" title="Table 2-2. Date object set methods">Table 2-2</a>.</p>
<div class="table" id="date_object_get_methods">
<div class="table-title">Table 2-1. Date object get methods</div>
<div class="table-contents"><table style="border-collapse: collapse;">
<colgroup>
<col class="col_1">
<col class="col_2">
</colgroup>
<thead><tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Method</td>
<td style="border-bottom: 0.5pt solid ; ">Purpose</td>
</tr></thead>
<tbody>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getdate"><code class="literal">getDate</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_day_of__id1">Returns day of the month (0–31)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getday"><code class="literal">getDay</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_day_of__id2">Returns day of the week (0–6)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getfullyear"><code class="literal">getFullYear</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_digit_id1">Returns 4-digit full year</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="gethours"><code class="literal">getHours</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_local_h">Returns local hour (0–23)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getmilliseconds"><code class="literal">getMilliseconds</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_local_m_id1">Returns local milliseconds (0–999)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getminutes"><code class="literal">getMinutes</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_local_m_id2">Returns local minute (0–59)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getmonth"><code class="literal">getMonth</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_local_m_id3">Returns local month (0–11)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getseconds"><code class="literal">getSeconds</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_local_s">Returns local second (0–59)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="gettime"><code class="literal">getTime</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_number_">Returns number of seconds since January 1, 1970 00:00:00 UTC</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="gettimezoneoffs"><code class="literal">getTimezoneOffset</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_time_zo">Returns time zone from UTC</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getutcdate"><code class="literal">getUTCDate</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_day_of__id3">Returns day of month in UTC time (0–31) method (Date)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getutcday"><code class="literal">getUTCDay</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_day_of__id4">Returns day of the week in UTC time (0–6)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getutcfullyear"><code class="literal">getUTCFullYear</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_digit_id2">Returns 4-digit UTC year</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getutchours"><code class="literal">getUTCHours</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_utc_hou">Returns UTC hours (0–23)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getutcmilliseco"><code class="literal">getUTCMilliseconds</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_utc_mil">Returns UTC milliseconds (0–999)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getutcminutes"><code class="literal">getUTCMinutes</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_utc_min">Returns UTC minutes (0–59)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="getutcmonth"><code class="literal">getUTCMonth</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_utc_mon">Returns UTC month (0–11)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; "><p id="getutcseconds"><code class="literal">getUTCSeconds</code></p></td>
<td><p id="returns_utc_sec">Returns UTC seconds (0–59)</p></td>
</tr>
</tbody>
</table></div>
</div>
<div class="table" id="date_object_set_methods">
<div class="table-title">Table 2-2. Date object set methods</div>
<div class="table-contents"><table style="border-collapse: collapse;">
<colgroup>
<col class="col_1">
<col class="col_2">
</colgroup>
<thead><tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Method</td>
<td style="border-bottom: 0.5pt solid ; ">Purpose</td>
</tr></thead>
<tbody>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setdate"><code class="literal">setDate</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_day_of">Sets the day of month (1–31)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setfullyear"><code class="literal">setFullYear</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_digit_fu">Sets 4-digit full year</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="sethours"><code class="literal">setHours</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_hour_">Sets the hour (0–23)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setmilliseconds"><code class="literal">setMilliseconds</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_dates_id1">Sets the date’s milliseconds (0–999)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setminutes"><code class="literal">setMinutes</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_dates_id2">Sets the date’s minutes (0–59)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setmonth"><code class="literal">setMonth</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_month__id1">Sets the month (0–11)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setseconds"><code class="literal">setSeconds</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_second_id1">Sets the seconds (0–59)</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="settime"><code class="literal">setTime</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_dates_id3">Sets the date’s time as milliseconds since January 1, 1970 00:00:00 UTC</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setutcdate"><code class="literal">setUTCDate</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_dates_id4">Sets the date’s day of month in UTC</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setutcfullyear"><code class="literal">setUTCFullYear</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_full_y">Sets the full year in UTC</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setutchours"><code class="literal">setUTCHours</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_dates_id5">Sets the date’s hours in UTC</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setutcmilliseco"><code class="literal">setUTCMilliseconds</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_dates_id6">Sets the date’s milliseconds in UTC</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setutcminutes"><code class="literal">setUTCMinutes</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_dates_id7">Sets the date’s minutes in UTC</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="setutcmonth"><code class="literal">setUTCMonth</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="sets_the_month__id2">Sets the month in UTC</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; "><p id="setutcseconds"><code class="literal">setUTCSeconds</code></p></td>
<td><p id="sets_the_second_id2">Sets the seconds in UTC</p></td>
</tr>
</tbody>
</table></div>
</div>
<p id="you_can_also_ca">You can also calculate a future date by adding a number of days or weeks to any given date.</p>
</div>
<div class="sect2" id="math_object">
<div class="titlepage"><div><div><h3 class="title">The Math Object</h3></div></div></div>
<p id="unlike_the_numb">Unlike the <code class="literal">Number</code> object, the <code class="literal">Math</code> object does not have a constructor. All of the object’s functionality, its properties and methods, are static. If you try to instantiate a <code class="literal">Math</code> object:</p>
<pre class="screen" id="var_newmath__n">var newMath = new Math();</pre>
<p id="youll_get_an_e">You’ll get an error. Rather than create a new <code class="literal">Math</code> instance, access properties and methods directly on the object instead:</p>
<pre class="screen" id="var_topvalue__">var topValue = Math.max(firstValue, secondValue); // returns larger number</pre>
<p id="the_math_object_id2">The <code class="literal">Math</code> object has a considerable number of properties and methods, including several trigonometric methods. The precision of the methods is at the same level of precision that we would find using a language like C.</p>
<p id="provides_a_list"><a class="xref" href="ch02.html#math_object_static_properties" title="Table 2-3. Math object static properties">Table 2-3</a> provides a listing of the <code class="literal">Math</code> properties, and <a class="xref" href="ch02.html#math_object_static_methods" title="Table 2-4. Math object static methods">Table 2-4</a> contains a listing of the <code class="literal">Math</code> methods.</p>
<div class="table" id="math_object_static_properties">
<div class="table-title">Table 2-3. Math object static properties</div>
<div class="table-contents"><table style="border-collapse: collapse;">
<colgroup>
<col class="col_1">
<col class="col_2">
</colgroup>
<thead><tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Property</td>
<td style="border-bottom: 0.5pt solid ; ">Purpose</td>
</tr></thead>
<tbody>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="e">E</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="the_number_valu">The number value for e, the base of natural logarithms</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="ln_id1">LN2</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="natural_logarit_id1">Natural logarithm of 2</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="ln_id2">LN10</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="natural_logarit_id2">Natural logarithm of 10</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="loge_id1">LOG2E</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="base__logarith">Base 2 logarithm of e, and the reciprocal of LN2</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="loge_id2">LOG10E</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="base__logarit">Base 10 logarithm of e, and the reciprocal of LN10</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="pi">PI</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="the_number_for_">The number for π</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="sqrt_">SQRT1_2</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="square_root_of__id1">Square root of 1/2, reciprocal of SQRT2</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; "><p id="sqrt">SQRT2</p></td>
<td><p id="square_root_of__id2">Square root of 2</p></td>
</tr>
</tbody>
</table></div>
</div>
<div class="table" id="math_object_static_methods">
<div class="table-title">Table 2-4. Math object static methods</div>
<div class="table-contents"><table style="border-collapse: collapse;">
<colgroup>
<col class="col_1">
<col class="col_2">
</colgroup>
<thead><tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; ">Method</td>
<td style="border-bottom: 0.5pt solid ; ">Purpose</td>
</tr></thead>
<tbody>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="abs_x"><code class="literal">abs
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_absolut">Returns absolute value of <code class="literal">x</code>; if <code class="literal">x</code> is NaN, returns NaN</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="acos_x"><code class="literal">acos
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_arc_cos">Returns arc cosine of <code class="literal">x</code>; if <code class="literal">x</code> is greater than 1 or less than 0, returns NaN</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="asin_x"><code class="literal">asin
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_arc_sin">Returns arc sine of <code class="literal">x</code>; if <code class="literal">x</code> is greater than 1 or less than –1, returns NaN</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="atan_x"><code class="literal">atan
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_the_arc_id1">Returns the arc tangent of <code class="literal">x</code></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="atan_x_y"><code class="literal">atan2
              (x,
              y)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_the_arc_id2">Returns the arc tangent of the quotient of <code class="literal">x</code>, <code class="literal">y</code></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="ceil_x"><code class="literal">ceil
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_the_sma">Returns the smallest integer equal to or greater than <code class="literal">x</code></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="cos_x"><code class="literal">cos
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_the_cos">Returns the cosine of <code class="literal">x</code></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="exp_x"><code class="literal">exp
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_ex_wher">Returns E<sup>x</sup> where E is the base of natural logarithms</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="floor_x"><code class="literal">floor
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_the_lar">Returns the largest integer equal to or less than <code class="literal">x</code></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="log_x"><code class="literal">log
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_logarit">Returns logarithm of <code class="literal">x</code></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="max_x_x_"><code class="literal">max
              (x1,
              x2, …,
              xn)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_largest">Returns largest of given arguments</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="min_x_x_"><code class="literal">min
              (x1,
              x2, …,
              xn)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_smalles">Returns smallest of given arguments</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="pow_xy"><code class="literal">pow
              (x,y)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_result_">Returns result of raising <code class="literal">x</code> to power of <code class="literal">y</code></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="random_"><code class="literal">random
              ()</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_random_">Returns random number greater than or equal to 0, and less than 1</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="round_x"><code class="literal">round
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="rounds_number_t">Rounds number to closest integer</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="sin_x"><code class="literal">sin
              (x)</code></p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="returns_the_sin">Returns the sine of <code class="literal">x</code></p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; "><p id="sqrt_x"><code class="literal">sqrt
              (x)</code></p></td>
<td><p id="returns_the_squ">Returns the square root of <code class="literal">x</code></p></td>
</tr>
</tbody>
</table></div>
</div>
</div>
<div class="sect2" id="javascript_timers">
<div class="titlepage"><div><div><h3 class="title">JavaScript Timers</h3></div></div></div>
<p id="javascript_also_id2">JavaScript also provides another way to work with time, through the use of recurring or one-time-only timers. I’ve always thought these should be a component of the <code class="literal">Date</code> object, but they’re actually <code class="literal">Window</code> object methods: <code class="literal">setInterval</code> and <code class="literal">setTimeout</code>.</p>
<p id="the_difference_">The difference between the two is that <code class="literal">setInterval</code> creates a recurring timer that re-fires until canceled, while <code class="literal">setTimeout</code> creates a one-time-only timer. Both take a timer value, in milliseconds, as well as an expression to evaluate when the timer fires.</p>
<p id="numbers_and_num">Numbers and numeric operations in JavaScript are managed by two different JavaScript objects: <code class="literal">Number</code> and <code class="literal">Math</code>.</p>
<p id="like_the_string_id2">Like the <code class="literal">String</code> and <code class="literal">RegExp</code> objects discussed in earlier chapters, numbers can be both a literal value and an object. No surprises there, but the <code class="literal">Math</code> object is different: it has no constructor, and all properties and methods are accessed directly from the object.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="printing_out_todayapostrophes_date">
<div class="titlepage"><div><div><h2 class="title">Printing Out Today’s Date</h2></div></div></div>
<div class="sect2" id="problem-id00076">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_pri_id1">You want to print out the current date and time to a web page.</p>
</div>
<div class="sect2" id="solution-id00077">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="create_a_new_da">Create a new <code class="literal">Date</code> object, without any parameters, and output its value to the web page:</p>
<pre class="screen" id="var_dtelem__do">var dtElem = document.getElementById("date");
var dt = new Date();
dtElem.innerHTML = "&lt;p&gt;" + dt + "&lt;/p&gt;";</pre>
<p id="the_result_is_s">The result is similar to:</p>
<pre class="screen" id="tue_jul__">Tue Jul 02 2013 11:13:28 GMT-0500 (Central Daylight Time)</pre>
<div class="sidebar online_only" id="try_it_now_id18">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/elitod/1/embed?javascript,live"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00078">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="when_you_constr">When you construct a new <code class="literal">Date</code> object, you can pass various parameters to the constructor to create a specific date:</p>
<pre class="screen" id="var_dt__new_da_id2">var dt = new Date(milliseconds); // milliseconds since 1 January 1970 00:00:00 UTC
var dt2 = new Date(dateString); // string representing a valid date
var dt3 = new Date(year,month,date[,hour,minute,second,millisecond]);</pre>
<p id="if_you_dont_sp">If you don’t specify the time parameters of a date, they’re set to zero by default. If you don’t provide any form of a date string to the <code class="literal">Date</code> constructor, the <code class="literal">Date</code> object is set to the local date and time of the computer used to access the web page.</p>
<p id="you_can_access__id2">You can access components of the date using a variety of <code class="literal">Date</code> methods. You can directly print the entire date, as shown in the solution. If you prefer a different format, you can access the individual components of the <code class="literal">Date</code>, using methods such as <code class="literal">getMonth</code>, <code class="literal">getFullYear</code>, <code class="literal">getTime</code>, <code class="literal">getDate</code>, and then build the date string:</p>
<pre class="screen" id="var_dt__new_da_id3">var dt = new Date();
var month = dt.getMonth();
month++;
var day = dt.getDate();
var yr = dt.getFullYear();
dtElem.innerHTML = "&lt;p&gt;" + month + "/" + day + "/" + yr;</pre>
<p id="the_above_outpu">The above outputs the following string to the page:</p>
<pre class="screen" id="screen">7/2/2013</pre>
<div class="sidebar online_only" id="try_it_now_id19">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="try_out_various">Try out various <code class="literal">Date</code> methods by modifying the JavaScript.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/elowog/1/embed?javascript,live"> </iframe></div>
</div>
<p id="the_month_is_a_">The month is a zero-based integer, which is why I had to increment the month value in the example to get the actual numeric month value. To get the month name, you’ll most likely want to use an array:</p>
<pre class="screen" id="var_months__">var months = ['January','February','March','April','May','June','July','August',
'September','October','November','December'];
var month = dt.getMonth();
var monthString = months[month];</pre>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="printing_out_the_utc_date_and_time">
<div class="titlepage"><div><div><h2 class="title">Printing Out the UTC Date and Time</h2></div></div></div>
<div class="sect2" id="problem-id00079">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_pri_id2">You want to print out the current UTC (universal time) date and time, rather than the local time.</p>
</div>
<div class="sect2" id="solution-id00080">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_utc_jav">Use the UTC JavaScript methods in order to access the current date and time as universal time:</p>
<pre class="screen" id="var_dateelement">var dateElement = document.getElementById("date");
var today = new Date();
var utcDate = today.toUTCString();
dateElement.innerHTML = "&lt;p&gt;local datetime: " + today + "&lt;br /&gt; UTC datetime: " +
utcDate + "&lt;/p&gt;";</pre>
<div class="sidebar online_only" id="try_it_now_id20">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/uwezuk/1/embed?live,javascript"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00081">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_date_toutcs">The <code class="literal">Date toUTCString</code> method returns the date/time string formatted in universal convention. This not only returns the UTC equivalent of the <code class="literal">local</code> <code class="literal">datetime</code>, it also returns it the UTC format, which varies just slightly from the <code class="literal">datetime</code> for the local time. The printout from the solution would be:</p>
<pre class="screen" id="local_datetime">local datetime: Tue Jul 02 2013 11:58:06 GMT-0500 (Central Daylight Time)
UTC datetime: Tue, 02 Jul 2013 16:58:06 GMT</pre>
<p id="there_are_a_cou">There are a couple of differences between the two date printouts. First of all, the time zone designation differs, which we would expect. I’m currently in Central Daylight Time (CDT), which is five hours behind universal time (UTC/GMT). In addition, the day of week in the UTC string is followed by a comma, which doesn’t occur with the local time printout.</p>
<p id="rather_than_the">Rather than the entire date string, you can access the UTC equivalent of the month, day, year, and time using the relevant <code class="literal">Date</code> methods. Instead of <code class="literal">getMonth</code>, use <code class="literal">getUTCMonth</code>, and so on. Using these <code class="literal">getUTC</code> methods with the local date, you could build a printout string identical to that given with the local time, or to match any other formatting.</p>
<div class="sidebar" id="iso__formatting">
<div class="titlepage"><div><div><div class="sidebar-title">ISO 8601 Formatting</div></div></div></div>
<p id="beginning_with_">Beginning with ECMAScript 5, you can also access an ISO 8601 Extended format version of the date with <code class="literal">toISOString</code>.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/uwezuk/3/embed?javascript,live"> </iframe></div>
</div>
</div>
<div class="sect2" id="see_also-id00082">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="the_get_methods">The <code class="literal">get</code> methods are detailed in <a class="xref" href="ch02.html#date_object_get_methods" title="Table 2-1. Date object get methods">Table 2-1</a> and the <code class="literal">set</code> methods are detailed in <a class="xref" href="ch02.html#date_object_set_methods" title="Table 2-2. Date object set methods">Table 2-2</a>.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="creating_a_specific_date">
<div class="titlepage"><div><div><h2 class="title">Creating a Specific Date</h2></div></div></div>
<div class="sect2" id="problem-id00090">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_cre_id1">You want to create a <code class="literal">Date</code> object given a month, day, and year.</p>
</div>
<div class="sect2" id="solution-id00091">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="construct_a_dat">Construct a <code class="literal">Date</code> object, passing in the month, day, and year as parameters:</p>
<pre class="screen" id="var_month__">var month = 10; // Month 10, in zero based system, is November
var day = 18;
var year = 1984;
var dt = new Date(year,month,day); // time is set to zero by default
console.log(dt.toString()); // verify date</pre>
<div class="sidebar online_only" id="try_it_now_id21">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="change_the_date">Change the date values to see a new date.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/esulin/1/embed?javascript,console"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00092">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_month_day">The month, day, and year are integer values passed into the <code class="literal">Date</code> constructor. Because the time values were not given, they’re set to zero by default.</p>
<p id="in_the_solution_id3">In the solution, a November date is wanted, which is typically written out as 11. However, months with the <code class="literal">Date</code> object are zero-based, which means that November would be designated, numerically, as 10.</p>
<p id="the_tostring_me">The <code class="literal">toString</code> method is called on the date once created, to verify the accuracy of the setting.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="creating_a_timeout">
<div class="titlepage"><div><div><h2 class="title">Creating a Timeout</h2></div></div></div>
<div class="sect2" id="problem-id00099">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_tri_id2">You want to trigger a timeout based on an event.</p>
</div>
<div class="sect2" id="solution-id00100">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_window">Use the <code class="literal">window.setTimeout</code> method to create a one-time-only timer:</p>
<pre class="screen" id="function_somefu_id1">function someFunction {
  setTimeout("console.log('timeout!')",3000);
}</pre>
</div>
<div class="sect2" id="discussion-id00101">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="though_settimeo">Though <code class="literal">setTimeout</code> is a <code class="literal">window</code> object method, it’s defined globally so you don’t need to specify <code class="literal">window.setTimeout</code>, only <code class="literal">setTimeout</code></p>
<p id="the_settimeout_">The <code class="literal">setTimeout</code> method takes a minimum of two parameters: the expression to process, and the time (in milliseconds) when the expression is evaluated. In the solution, the expression is code, contained in a text string, that’s processed three seconds after the <code class="literal">setTimeout</code> function is run.</p>
<p id="the_first_param_id1">The first parameter can also be the name of a function:</p>
<pre class="screen" id="settimeoutfunc_id1">setTimeout(functionName, 2000);</pre>
<p id="if_you_use_some">If you use something like JSLint, you’ll get a warning about the use of a string rather than a function name as the first paramter:</p>
<div class="blockquote"><table style="border: 0; " class="blockquote">
<tr>
<td style="width: 10%; vertical-align: top; "> </td>
<td style="width: 80%; vertical-align: top; "><p id="implied_eval_is">Implied eval is evil. Pass a function instead of a string.</p></td>
<td style="width: 10%; vertical-align: top; "> </td>
</tr>
<tr>
<td style="width: 10%; vertical-align: top; "> </td>
<td style="text-align: right; vertical-align: top; " colspan="2">--<span class="attribution">
JSLint
</span>
</td>
</tr>
</table></div>
<p id="when_passing_a_">When passing a string, the JavaScript engine does have to do extra work, evaluating the string and then processing the code. If you control the string, there is no inherent <span class="strong"><strong>evil</strong></span> in the use of a string, and creating a function that wraps the call to <code class="literal">console.log</code> is overkill. However, if you have a complex bit of code to process, you’re better off using a function. You definitely don’t want to pass a string that the user can manipulate.</p>
<div class="sidebar online_only" id="try_it_now_id22">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="js_bin_uses_js_">JS Bin uses JS Lint. Notice the warning about using a string rather than function in the call to <code class="literal">setTimeout</code>.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/onifuz/1/embed?live,javascript,console"> </iframe></div>
</div>
<p id="you_can_also_cr">You can also create an expression that’s a combination of function and parameters by providing optional parameters after the time:</p>
<pre class="screen" id="settimeoutfunc_id2">setTimeout(functionName, 2000, param1, param2, ..., param(n));</pre>
<p id="you_can_cancel_">You can cancel a timeout, using the <code class="literal">clearTimeout</code> method:</p>
<pre class="screen" id="var_timer__se">var timer1 = setTimeout(functionName, 2000);
...
window.clearTimeout(timer1);</pre>
<p id="theres_no_abso">There’s no absolute guarantee that the timer event fires when it is supposed to fire. Timers run on the same execution thread as all other User Interface (UI) events, such as mouse-clicks. All events are queued and blocked, including the timer event, until its turn. So, if you have several events in the queue ahead of the timer, the actual time could differ. Probably not enough to be noticeable to your application users, but a delay can happen.</p>
</div>
<div class="sect2" id="see_also-id00102">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="john_resig_offe">John Resig offers an excellent discussion on how timers work, and especially the issues associated with event queues and single threads of execution, at <a class="ulink" href="http://ejohn.org/blog/how-javascript-timers-work/" target="_top">http://ejohn.org/blog/how-javascript-timers-work/</a>.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="creating_recurring_timers">
<div class="titlepage"><div><div><h2 class="title">Creating Recurring Timers</h2></div></div></div>
<div class="sect2" id="problem-id00103">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_need_to_run">You need to run the same function several times at regular intervals.</p>
</div>
<div class="sect2" id="solution-id00104">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_setinterval">Use <code class="literal">setInterval</code> to create a recurring timer:</p>
<pre class="screen" id="var_x___seti">var x = 0;
setInterval(moveElement,1000);

function moveElement() {
   x+=10;
  var left = x + "px";
  document.getElementById("redbox").style.left=left;
}</pre>
</div>
<div class="sect2" id="discussion-id00105">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="dynamic_animati">Dynamic animations in a web page, SVG, or Canvas, are dependent on the <code class="literal">setTimeout</code> and <code class="literal">setInterval</code> methods. In particular, any flashing, moving, or following type of animation is dependent on a timer calling a method at specified intervals.</p>
<div class="note" id="nowadays_javas_id1"><p id="nowadays_javas_id2">Nowadays, JavaScript isn’t the only way to animate web page content. CSS3 and SVG declarative animations can also provide sophisticated animated effects. However, since this is a book on JavaScript, we’ll pay them nevermind.</p></div>
<p id="the_setinterval">The <code class="literal">setInterval</code> method requires two parameters: the code or function to process, and the delay between timer events. The first parameter can be a function name:</p>
<pre class="screen" id="setintervalfun_id1">setInterval(functionName,3000);</pre>
<p id="the_first_param_id2">The first parameter can also be a function call with parameters in a text string:</p>
<pre class="screen" id="setinterval_a">setInterval ("alert('hello')", 3000);</pre>
<p id="the_second_para">The second parameter is the time, in milliseconds, of the timer delay. Unlike <code class="literal">setTimeout</code>, discussed in <a class="xref" href="ch02.html#creating_a_timeout" title="Creating a Timeout">“Creating a Timeout”</a>, the <code class="literal">setInterval</code> timer will continue to cycle until the JavaScript application (the web page) is unloaded, or until the <code class="literal">clearInterval</code> method is called:</p>
<pre class="screen" id="var_intervalid_">var intervalid = setInterval(functionName, 3000);
...
clearInterval(intervalid);</pre>
<div class="sidebar online_only" id="try_it_now_id23">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/umicox/3/embed?javascript,live"> </iframe></div>
</div>
<p id="if_the_first_pa">If the first parameter is a function name, you can pass parameters, optionally, following the timer delay:</p>
<pre class="screen" id="setintervalfun_id2">setInterval(functionName, 2000, param1, param2, ..., paramn);</pre>
<p id="being_able_to_p">Being able to pass parameters to the function is handy if you’re creating an animation and generating the parameters dynamically. You can also use a <span class="emphasis"><em>function closure</em></span> with the timer.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="keeping_an_incremental_counter">
<div class="titlepage"><div><div><h2 class="title">Keeping an Incremental Counter</h2></div></div></div>
<div class="sect2" id="problem-id00111">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_mai">You want to maintain an incremental counter in code.</p>
</div>
<div class="sect2" id="solution-id00112">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="define_a_number">Define a number variable, either locally or globally, or as part of an object’s properties, and increment the variable’s value with each iteration of code:</p>
<pre class="screen" id="var_globalcount">var globalCounter = 0;
function nextTest() {
   globalCounter++;
   ...
}</pre>
<div class="sidebar online_only" id="try_it_now_id24">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/abusur/1/embed?live,javascript"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00113">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_simplest_wa">The simplest way to increase or decrease a number is using the increment (<code class="literal">++</code>) and decrement (<code class="literal">--</code>) operators, respectively. They’re equivalent to:</p>
<pre class="screen" id="numvalue__numv">numValue = numValue + 1; // equivalent to numValue++
numValue = numValue - 1; // equivalent to numValue--</pre>
<p id="both_operators_">Both operators can be used prefix or postfix, which means the operators can be placed before or after the operand. How they’re positioned is significant. If the operator is placed before the operand, the operand’s value is adjusted first, before the operand is used:</p>
<pre class="screen" id="var_numvalue___id1">var numValue = 1;
var numValue2 = ++numValue; // numValue and numValue2 are both 2</pre>
<p id="if_the_operator">If the operator is postfix (placed after the operand), the operand is used first, and then its value is adjusted:</p>
<pre class="screen" id="var_numvalue___id2">var numValue = 1;
var numValue2 = numValue++; // numValue is 2 and numValue2 is 1</pre>
<p id="the_point_at_wh">The point at which the counter is incremented depends on its use. If it’s needed in a loop, the value is incremented in the loop:</p>
<pre class="screen" id="var_counter___id1">var counter = 0;
while (counter &lt;= 10) {
   ...
   counter++;
}</pre>
<p id="if_the_counter_">If the counter is needed more globally, it can be declared as a <span class="emphasis"><em>global variable</em></span>, but use with caution. A global variable is one that’s declared outside of a function. It can easily conflict with any other global variables that might exist in the application or other libraries you use:</p>
<pre class="screen" id="var_counter___id2">var counter = 0;
function someFunction() {
   counter++;
}</pre>
<p id="another_approac">Another approach is to add the counter as property to an object, persisting as long as the object, and accessible by all object methods.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="creating_a_random_number_generator">
<div class="titlepage"><div><div><h2 class="title">Creating a Random Number Generator</h2></div></div></div>
<div class="sect2" id="problem-id00119">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_need_to_gen">You need to generate a random number, between 0 and 255.</p>
</div>
<div class="sect2" id="solution-id00120">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_a_combinati">Use a combination of JavaScript <code class="literal">Math</code> methods: <code class="literal">random</code> to generate a random value between 0 and 1, which is then multiplied by 255, and <code class="literal">floor</code> to truncate the number.</p>
<pre class="screen" id="var_randomnumbe_id1">var randomNumber = Math.floor(Math.random() * 255);</pre>
<div class="sidebar online_only" id="try_it_now_id25">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ekicav/1/embed?live,javascript"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00121">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_random_meth">The <code class="literal">random</code> method generates a random number between 0 and 1. To increase the range, multiply the result by the upper end of the range of values you want. If you need a random number with a higher lower end, such as a number between 5 and 10, multiply the value from <code class="literal">random</code> by a number equal to the upper range, minus the lower range, minus 1, and then add the lower range to the result:</p>
<pre class="screen" id="var_randomnumbe_id2">var randomNumber = Math.floor(Math.random() * 6) + 5;</pre>
<p id="the_floor_metho">The <code class="literal">floor</code> method rounds down the floating-point value to the nearest integer.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="randomly_generating_colors">
<div class="titlepage"><div><div><h2 class="title">Randomly Generating Colors</h2></div></div></div>
<div class="sect2" id="problem-id00122">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_need_to_ran">You need to randomly generate a web color.</p>
</div>
<div class="sect2" id="solution-id00123">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_math_ob">Use the <code class="literal">Math</code> object to randomly generate each RGB (Red-Green-Blue) value:</p>
<pre class="screen" id="function_random">function randomVal(val) {
  return Math.floor(Math.random() * val);
}

function randomColor() {
   return "rgb(" + randomVal(255) + "," + randomVal(255) + "," +
randomVal(255) + ")";
}</pre>
</div>
<div class="sect2" id="discussion-id00124">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="web_color_can_b">Web color can be expressed in hexadecimal notation, color name, or as an RGB value. With the RGB value, each color is represented as a number between 0 and 255. The example demonstrates one technique to generate a color: using one function to randomly generate the number, and a second to return an RGB formatted string that calls the random number generating function.</p>
<div class="sidebar online_only" id="try_it_now_id26">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="click_the_butto">Click the button several times, examine the results.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ugipod/1/embed?javascript,live"> </iframe></div>
</div>
</div>
<div class="sect2" id="see_also-id00125">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="see_about_conve">See <a class="xref" href="ch02.html#keeping_an_incremental_counter" title="Keeping an Incremental Counter">“Keeping an Incremental Counter”</a> about converting between decimal and hexadecimal notation, and <a class="xref" href="ch02.html#creating_a_random_number_generator" title="Creating a Random Number Generator">“Creating a Random Number Generator”</a> for how to randomly generate numbers.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="converting_between_degrees_and_radians">
<div class="titlepage"><div><div><h2 class="title">Converting Between Degrees and Radians</h2></div></div></div>
<div class="sect2" id="problem-id00133">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_have_an_ang">You have an angle in degrees. To use the value in the <code class="literal">Math</code> object’s trigonometric functions, you need to convert the degrees to radians.</p>
</div>
<div class="sect2" id="solution-id00134">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="to_convert_degr">To convert degrees to radians, multiply the value by (<code class="literal">Math.PI</code> / 180):</p>
<pre class="screen" id="var_radians__d">var radians = degrees * (Math.PI / 180);</pre>
<p id="to_convert_radi">To convert radians to degrees, multiply the value by (180 / <code class="literal">Math.PI</code>):</p>
<pre class="screen" id="var_degrees__r">var degrees = radians * (180 / Math.PI);</pre>
</div>
<div class="sect2" id="discussion-id00135">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="all_math_trigon">All <code class="literal">Math</code> trigonometric methods (<code class="literal">sin</code>, <code class="literal">cos</code>, <code class="literal">tin</code>, <code class="literal">asin</code>, <code class="literal">acos</code>, <code class="literal">atan</code>, and <code class="literal">atan2</code>), take values in radians, and return radians as a result. Yet it’s not unusual for people to provide values in degrees rather than radians, as degrees are the more familiar unit of measure. The functionality provided in the solution provides the conversion between the two units.</p>
<div class="sidebar online_only" id="try_it_now_id27">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ohaqiq/1/embed?live,javascript"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-2.asciidoc" id="find_the_radius_and_center_of_a_circle_t">
<div class="titlepage"><div><div><h2 class="title">Find the Radius and Center of a Circle to Fit Within a Page Element</h2></div></div></div>
<div class="sect2" id="problem-id00136">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="given_the_width">Given the width and height of a page element, you need to find the radius of the largest circle that fits within that page element, and its center point.</p>
</div>
<div class="sect2" id="solution-id00137">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="find_the_smalle">Find the smaller of the width and height; divide this by 2 to find the radius:</p>
<pre class="screen" id="var_circleradiu">var circleRadius = Math.min(elementWidth, elementHeight) / 2;</pre>
<p id="given_the_page_">Given the page element’s width and height, find the center by dividing both by 2:</p>
<pre class="screen" id="var_x__element">var x = elementWidth / 2;
var y = elementHeight / 2;</pre>
</div>
<div class="sect2" id="discussion-id00138">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="working_with_gr">Working with graphics requires us to do things such as finding the center of an element, or finding the radius of the largest circle that will fit into a rectangle (or largest rectangle that can fit in a circle).</p>
<p id="demonstrates_bo"><a class="xref" href="ch02.html#fitting_an_svg_circle_into_a_div_element" title="Example 2-1. Fitting a SVG circle into a div element">Example 2-1</a> demonstrates both of the solution calculations, modifying an SVG circle contained within an XHTML document so that the circle fits within the <code class="literal">div</code> element that surrounds it.</p>
<div class="example" id="fitting_an_svg_circle_into_a_div_element">
<div class="example-title">Example 2-1. Fitting a SVG circle into a div element</div>
<div class="example-contents"><pre class="screen" id="doctype_html_id4">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Using Math method to fit a circle&lt;/title&gt;
&lt;style type="text/css"&gt;
#elem
{
   width: 400px;
   height: 200px;
   border: 1px solid #000;
}
&lt;/style&gt;
&lt;script type="text/javascript"&gt;

function compStyle(elemId,property) {
   var elem = document.getElementById(elemId);
   var style =
   (window.getComputedStyle) ?
   window.getComputedStyle(elem,null).getPropertyValue(property) :
   null;
   return style;
}
window.onload=function() {
  var height = parseInt(compStyle("elem","height"),10);
  var width = parseInt(compStyle("elem","width"),10);

  var x = width / 2;
  var y = height / 2;

  var circleRadius = Math.min(width,height) / 2;

  var circ = document.getElementById("circ");
  circ.setAttribute("r",circleRadius);
  circ.setAttribute("cx",x);
  circ.setAttribute("cy",y);
}

&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;div id="elem"&gt;
   &lt;svg xmlns="http://www.w3.org/2000/svg" width="600" height="600"&gt;
      &lt;circle id="circ" width="10" height="10" r="10" fill="red" /&gt;
   &lt;/svg&gt;

&lt;/div&gt;
&lt;/body&gt;</pre></div>
</div>
<p id="there_are_techn">There are techniques in SVG that can accomplish the same purpose using the SVG element’s <code class="literal">viewPort</code> setting, but even with these techniques, at some point in time you’ll need to polish your basic geometry skills if you want to work with graphics. However, as the example demonstrates, most of the math you’ll need is relatively basic.</p>
<div class="sidebar online_only" id="try_it_now_id28">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="modify_the_cont">Modify the container element’s width and height in the CSS and rerun the example to see the circle resize. If you resize the element beyond the SVG container’s size, it will be clipped.</p>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/ijimec/2/embed?css,live"> </iframe></div>
</div>
</div>
<div class="sect2" id="see_also-id00139">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="finding_a_circl">Finding a circle’s radius and the center point of an element is important when working with both SVG and Canvas, covered in Chapter 5.</p>
</div>
</div></section><section class="chapter" data-original-filename="Chapter-3.asciidoc" id="working_with_arrays_and_functions"><div class="titlepage"><div><div><h1 class="title">Chapter 3. Working with Arrays and Functions</h1></div></div></div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="introduction-id00144">
<div class="titlepage"><div><div><h2 class="title">Introduction</h2></div></div></div>
<p id="an_array_is_an_">An array is an ordered collection of elements. In JavaScript, an array can be created using formal object notation, or it can be initialized using literal notation, as demonstrated in the following code:</p>
<pre class="screen" id="var_arrobject_">var arrObject = new Array("val1", "val2"); // array as object
var arrLiteral = ["val1", "val2"]; // array literal</pre>
<p id="to_the_develope">To the developer, there is no difference: you can invoke an <code class="literal">Array</code> method on both a literal and an object. However, to the JavaScript engine, an array literal has to be <span class="emphasis"><em>reinterpreted</em></span> each time it’s accessed, especially when used in a function call. Array literals can, however, replace the need for temporary variables, especially when sending values to a function.</p>
<p id="speaking_of_whi">Speaking of which, JavaScript functions provide a way to encapsulate a block of code in order to reuse the code several times. They’re typically created using the <code class="literal">function</code> statement and syntax similar to the following:</p>
<pre class="screen" id="function_functi_id1">function functionname(arg1, arg2, ..., argn) {
   function body
}</pre>
<p id="javascript_supp">JavaScript supports a <code class="literal">Function</code> object, which can be constructed the same as a <code class="literal">String</code> or <code class="literal">Number</code>, using the <code class="literal">new</code> operator:</p>
<pre class="screen" id="var_fn__new_fu">var fn = new Function (arg1, arg2, ..., argn, functionbody);</pre>
<p id="however_using_">However, using this syntax is not as efficient as using the <code class="literal">function</code> statement, because using a function constructor requires that the function be parsed each time it’s called. Functions defined with the <code class="literal">function</code> statement are parsed once, when the code is loaded.</p>
<p id="there_are_three_id1">There are three basic kinds of functions:</p>
<div class="variablelist" id="declarative_fun"><dl class="variablelist">
<dt><span class="term">
Declarative function
</span></dt>
<dd>
A declarative function is a statement triggered by the use of the function keyword, and parsed when the JavaScript application is first loaded.
</dd>
<dt><span class="term">
Anonymous function or function constructor
</span></dt>
<dd>
An anonymous function is constructed using the new operator and referencing the <code class="literal">Function</code> object. It’s anonymous because it isn’t given a name, and access to the function occurs through a variable or another object property. It’s parsed each time it’s accessed.
</dd>
<dt><span class="term">
Function literal or function expression
</span></dt>
<dd>
As with other JavaScript objects, functions can be both object and literal. A literal function is a function expression, including parameter and body, which is used in place—such as in an argument to another function. Like a declarative function, it’s also parsed only once, when the JavaScript application is loaded. Like the function created as an object, it can also be anonymous.
</dd>
</dl></div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="looping_through_an_array">
<div class="titlepage"><div><div><h2 class="title">Looping Through an Array</h2></div></div></div>
<div class="sect2" id="problem-id00145">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_eas">You want to easily access all elements of an array.</p>
</div>
<div class="sect2" id="solution-id00146">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="the_most_common_id1">The most common approach to accessing an array is to use a <code class="literal">for</code> loop:</p>
<pre class="screen" id="var_mammals__n">var mammals = new Array("cat","dog","human","whale","seal");
var animalString = "";
for (var i = 0; i &lt; mammals. length; i++) {
   animalString += mammals[i] + " ";
}
console.log(animalString);</pre>
<div class="sidebar online_only" id="try_it_now_id29">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/itokex/1/embed?javascript,console"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00147">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="a_for_loop_can_">A <code class="literal">for</code> loop can be used to access every element of an array. The array begins at zero, and the array property <code class="literal">length</code> is used to set the loop end.</p>
<p id="sometimes_thou">Sometimes, though, you don’t want to access <span class="emphasis"><em>every</em></span> element of the array. For instance, you might want to traverse an array until you find either a specific element, or any element that meets (or doesn’t meet) a certain criteria. In these cases, you’ll want to use a <code class="literal">while</code> loop and test the array elements:</p>
<pre class="screen" id="var_numarray__">var numArray = new Array(1,4,66,123,240,444,555);
var i = 0;

while (numArray[i] &lt; 100) {
     console.log (numArray[i++] &gt; 50);
}</pre>
<p id="notice_that_the_id2">Notice that the index counter, <code class="literal">i</code>, is incremented as it’s used to access an array element. The use of <code class="literal">i++</code> means that the existing value of <code class="literal">i</code> is accessed first, and then the variable is incremented.</p>
<div class="sidebar online_only" id="try_it_now_id30">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/upeboq/1/embed?javascript,console"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="creating_a_multidimensional_array">
<div class="titlepage"><div><div><h2 class="title">Creating a Multidimensional Array</h2></div></div></div>
<div class="sect2" id="problem-id00148">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_cre_id2">You want to create a multidimensional array (an array of arrays).</p>
</div>
<div class="sect2" id="solution-id00149">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="create_an_array">Create an array in which each element is also an array. For example, to create an array with three elements, each of which is also an array of three elements containing, respectively, string, number, and array literals, you can use the JavaScript in <a class="xref" href="ch03.html#code_snippet_showing_how_to_create_a_mul" title="Example 3-1. Creating a multidimensional array">Example 3-1</a>.</p>
<div class="example" id="code_snippet_showing_how_to_create_a_mul">
<div class="example-title">Example 3-1. Creating a multidimensional array</div>
<div class="example-contents">
<pre class="screen" id="set_array_le">// set array length
var arrayLength = 3;

// create array
var multiArray = new Array(arrayLength);
for (var i = 0; i &lt; multiArray.length; i++) {
  multiArray[i] = new Array(arrayLength);
}

// add items to first array index
multiArray[0][0] = "apple";
multiArray[0][1] = "banana";
multiArray[0][2] = "cherry";

// second
multiArray[1][0] = 2;
multiArray[1][1] = 56;
multiArray[1][2] = 83;

// third
multiArray[2][0] = ['test','again'];
multiArray[2][1] = ['Java','script'];
multiArray[2][2] = ['read','books'];

console.log(multiArray); // printed out in first index order
console.log(multiArray[2]); // prints out subarray
console.log(multiArray[2][2][0]); // individual item</pre>
<p id="as_the_example_">As the example also demonstrates, JavaScript array elements don’t have to be the same data type, and may, themselves, be objects, such as another array.</p>
<div class="sidebar online_only" id="try_it_now_id31">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/atulod/1/embed?javascript,console"> </iframe></div>
</div>
</div>
</div>
</div>
<div class="sect2" id="discussion-id00150">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="multidimensiona_id1">Multidimensional arrays in JavaScript are managed by creating a new array as an element within an existing array. The new array can be created as an <code class="literal">Array</code> element, or as an array literal.</p>
<p id="in__an_array_">In <a class="xref" href="ch03.html#code_snippet_showing_how_to_create_a_mul" title="Example 3-1. Creating a multidimensional array">Example 3-1</a>, an array, <span class="emphasis"><em><code class="literal">multiArray</code></em></span>, is created as an <code class="literal">Array</code> object with three members. Each of those three elements is also created as <code class="literal">Array</code> objects with three members. The array data is then set, with the first array member containing string literals, the second containing number literals, and the third containing array literals—themselves containing two array members, each with a string literal.</p>
<p id="to_access_the_a">To access the array elements, use the square bracket notation, with each set of brackets used to address each level of the array. In the following code, the array contents are output, after being converted to a string first, if necessary:</p>
<pre class="screen" id="alertmultiarra">alert(multiArray[2]); // prints out test,again,Java,script,read,books
alert(multiArray[2][2]); // prints out read,books
alert(multiArray[2][2][1]); // prints out books</pre>
<p id="multidimensiona_id2">Multidimensional arrays are typically used to hold the data from a table structure, but how the structure is maintained is up to the developer. For instance, the developer can support an array structure in which the outer index reflects the columns, and the inner reflects the rows. As an example, <a class="xref" href="ch03.html#simple_table_with_five_columns_and_three" title="Table 3-1. Simple table with five columns and three rows and sample data">Table 3-1</a> shows a simple five-column, three-row table containing a set of numbers.</p>
<div class="table" id="simple_table_with_five_columns_and_three">
<div class="table-title">Table 3-1. Simple table with five columns and three rows and sample data</div>
<div class="table-contents"><table style="border-collapse: collapse;">
<colgroup>
<col class="col_1">
<col class="col_2">
<col class="col_3">
<col class="col_4">
<col class="col_5">
</colgroup>
<tbody>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id17">45.89</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id18">4</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id19">34</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id20">9998.99</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="simpara_id21">56</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id22">3</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id23">23</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id24">99</p></td>
<td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><p id="simpara_id25">43</p></td>
<td style="border-bottom: 0.5pt solid ; "><p id="simpara_id26">2</p></td>
</tr>
<tr>
<td style="border-right: 0.5pt solid ; "><p id="simpara_id27">1</p></td>
<td style="border-right: 0.5pt solid ; "><p id="simpara_id28">1</p></td>
<td style="border-right: 0.5pt solid ; "><p id="simpara_id29">0</p></td>
<td style="border-right: 0.5pt solid ; "><p id="simpara_id30">43</p></td>
<td><p id="simpara_id31">67</p></td>
</tr>
</tbody>
</table></div>
</div>
<p id="to_create_this_">To create this in JavaScript using a multidimensional array, use the following code:</p>
<pre class="screen" id="var_table__new">var table = new Array(5);

table[0] = [45.89, 4, 34, 9998.99, 56]; // first row
table[1] = [3, 23, 99, 43, 2]; // second row
table[2] = [1, 1, 0, 43, 67]; // third row</pre>
<p id="of_course_this">Of course, this doesn’t take into account column and row headers. To add in the headers, just treat them as array data, making sure to incorporate them into the proper place in the array to reflect the table structure.</p>
<div class="note" id="ch05note01"><p id="in_a_multidevel">In a multideveloper environment, it’s essential that there is agreement among the developers about whether table structure data is stored column-centric or row-centric.</p></div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="creating_a_string_from_an_array">
<div class="titlepage"><div><div><h2 class="title">Creating a String from an Array</h2></div></div></div>
<div class="sect2" id="problem-id00151">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_cre_id3">You want to create a single string from an array.</p>
</div>
<div class="sect2" id="solution-id00152">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_array_o_id1">Use the <code class="literal">Array</code> object’s built-in <code class="literal">join</code> method to join the array elements into a string:</p>
<pre class="screen" id="var_fruitarray__id1">var fruitArray = ['apple','peach','lemon','lime'];
var resultString = fruitArray.join('-'); // apple-peach-lemon-lime</pre>
</div>
<div class="sect2" id="discussion-id00153">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_array_join_">The <code class="literal">Array join</code> method takes one optional parameter, a delimiter used to separate the array element contents when joined—in this case, the dash (<code class="literal">-</code>). It returns a string with all of the array elements concatenated. If the array contains anything other than strings, the values are converted to a string equivalent:</p>
<pre class="screen" id="var_numberarray_id1">var numberArray = [1,2,3,4,5]; // array literal containing number elements
var resultString = numberArray.join('+'); // returns string with 1+2+3+4+5</pre>
<p id="if_the_array_el_id1">If the array element isn’t a string, it’s converted to a string before concatenation:</p>
<pre class="screen" id="var_objarray__">var objArray = [['a','b','c'],13,'apple', new Date()];
resultString = objArray.join('***');</pre>
<p id="if_the_delimite">If the delimiter parameter isn’t provided, a comma is inserted between array element values by default:</p>
<pre class="screen" id="var_numberarray_id2">var numberArray = [1,2,3,4,5];
var resultString = numberArray.join(); // returns string with 1,2,3,4,5</pre>
<div class="sidebar online_only" id="try_it_now_id32">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="modify_the_arra">Modify the array contents and re-run the example to see the results.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/omirid/1/embed?javascript,console"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="sorting_an_array">
<div class="titlepage"><div><div><h2 class="title">Sorting an Array</h2></div></div></div>
<div class="sect2" id="problem-id00154">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_sor">You want to sort an array.</p>
</div>
<div class="sect2" id="solution-id00155">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_array_o_id2">Use the <code class="literal">Array</code> object’s <code class="literal">sort</code> method:</p>
<pre class="screen" id="var_fruitarray__id2">var fruitArray = ['strawberry','apple','orange','banana','lime'];
console.log(fruitArray.sort()); // returns apple,banana,lime,
                             orange,strawberry</pre>
</div>
<div class="sect2" id="discussion-id00156">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_array_objec">The <code class="literal">Array</code> object’s <code class="literal">sort</code> method sorts the array elements alphabetically if no optional compare function parameter is provided. To facilitate the sort, all data types are converted to their string equivalent before sorting:</p>
<pre class="screen" id="var_numberarray_id3">var numberArray = [4,13,2,31,5];
console.log(numberArray.sort()); // returns  13,2,31,4,5</pre>
<p id="though_the_arra">Though the array members in this example are numbers, they’re sorted in lexicographical (dictionary) order, not numerically. To do an actual numeric sort, use a custom sort function:</p>
<pre class="screen" id="function_compar">function compareNumbers(a,b) {
   return a - b;
}
var numArray = [13,2,31,4,5];
console.log(numArray.sort(compareNumbers)); // prints 2,4,5,13,31</pre>
<div class="sidebar online_only" id="try_it_now_id33">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="modify_the_numb">Modify the numbers in the array in the JavaScript and re-run the example to see the results.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/iqoxez/1/embed?javascript,console"> </iframe></div>
</div>
<p id="the_function_su">The function subtracts the second parameter value from the first, and if the first is less than the second, a negative value is returned; otherwise, the value is positive. If the return value is less than zero, the sort index for the second parameter is set higher than the first parameter. If the value is greater than zero, the sort index for the first parameter is set higher than the other. If the value is exactly zero, the sort index for the two is unchanged.</p>
<p id="if_the_array_el_id2">If the array elements contain strings that could be converted to numbers, then the <span class="emphasis"><em><code class="literal">compareNumbers</code></em></span> sort function still works, as string-to-number conversion is handled transparently:</p>
<pre class="screen" id="var_numberarray_id4">var numberArray=["34","4","5"];
console.log(numberArray.sort(compareNumbers)); // prints 4,5,34</pre>
<p id="the_sort_method">The <code class="literal">sort</code> method sorts the elements in an ascending order. If you want to do a reverse sort, use the <code class="literal">sort</code> method to sort the elements, and then use the <code class="literal">reverse</code> method to reverse the array member order:</p>
<pre class="screen" id="var_numberarray_id5">var numberArray = [4,5,1,3,2];
numberArray.sort();
numberArray.reverse(); // array now has 5,4,3,2,1</pre>
<div class="sidebar online_only" id="try_it_now_id34">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="replace_the_arr">Replace the array elements and try out the <code class="literal">sort</code> and <code class="literal">reverse</code> functions.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/itezew/1/embed?javascript,console"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="create_a_new_array_as_subset_of_an_exist">
<div class="titlepage"><div><div><h2 class="title">Create a New Array as a Subset of an Existing Array</h2></div></div></div>
<div class="sect2" id="problem-id00163">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_cre_id4">You want to create a new array from a segment of an existing array. If the array elements are objects, you want to keep both arrays in sync.</p>
</div>
<div class="sect2" id="solution-id00164">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_array_o_id3">Use the <code class="literal">Array</code> object <code class="literal">slice</code> method to create a new array based on elements within a given range:</p>
<pre class="screen" id="var_origarray__id1">var origArray = new Array(4);
origArray[0] = new Array("one","two");
origArray[1] = new Array("three","four");
origArray[2] = new Array("five","six");
origArray[3] = new Array("seven","eight");

// create new array using slice
var newArray = origArray.slice(1,3);</pre>
</div>
<div class="sect2" id="discussion-id00165">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_array_slice">The <code class="literal">Array slice</code> method is a simple way of building a new array from a consecutive sequence of elements in another array. The parameters are the beginning and ending index for the sequence of elements to copy. A negative value for either index indicates that <code class="literal">slice</code> should work from the end of the array.</p>
<p id="if_the_copied_e">If the copied elements are literal values, such as strings, numbers, and Booleans, they’re copied _by value_—changing the value in the old array has no impact on the same values in the new array, and vice versa.</p>
<p id="when_objects_ar">When objects are copied, though, they’re copied <span class="emphasis"><em>by reference</em></span>, whether they’re copied via <code class="literal">slice</code> or by direct variable assignment:</p>
<pre class="screen" id="var_first__new">var first = new Array("one","two","three");
var second = first; // copied by reference
second[1] = "apple"; // first and second arrays now have "one","apple","three"</pre>
<p id="the_code_that_f">The code that follows demonstrates the object syncing when used with slice. A section of one array is used to create a new array with <code class="literal">slice</code>. The elements in the first array are <code class="literal">Array</code> objects. In the code, when the value of one of the objects in the first array is changed, the change is reflected in the new array. Conversely, when a value is changed in the new array, the change is reflected in the original array:</p>
<pre class="screen" id="var_origarray__id2">var origArray = new Array(4);
origArray[0] = new Array("one","two");
origArray[1] = new Array("three","four");
origArray[2] = new Array("five","six");
origArray[3] = new Array("seven","eight");

var newArray = origArray.slice(1,3);
alert(newArray); // prints out three,four,five,six

// modify original
origArray[1][0] = "octopus";

// print out new
console.log(newArray); // prints out octopus,four,five,six

// modify new
newArray[1][1] = "kitten";

// print out one, two, octopus, four, five, kitten,
// seven, eight
console.log(origArray);</pre>
<div class="sidebar online_only" id="try_it_now_id35">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/oyemas/1/embed?javascript,console"> </iframe></div>
</div>
<p id="another_handy_u">Another handy use for <code class="literal">slice</code> is to convert the function arguments property into a proper array:</p>
<pre class="screen" id="var_args__arra">var args = Array.prototype.slice.call(arguments);</pre>
<p id="using_slice_to_">Using <code class="literal">slice</code> to create a subset of an array is a way of quickly copying a subset of an array and, if the values are objects, ensure both arrays are in sync.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="searching_through_an_array">
<div class="titlepage"><div><div><h2 class="title">Searching Through an Array</h2></div></div></div>
<div class="sect2" id="problem-id00166">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_sea">You want to search an array for a specific value and get the array element index if found.</p>
</div>
<div class="sect2" id="solution-id00167">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_array_o_id4">Use the <code class="literal">Array</code> object methods <code class="literal">indexOf</code> and <code class="literal">lastIndexOf</code>:</p>
<pre class="screen" id="var_animals__n_id1">var animals = new Array("dog","cat","seal","elephant","walrus","lion");
console.log(animals.indexOf("elephant")); // outputs 3</pre>
<div class="sidebar online_only" id="try_it_now_id36">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/owucuf/1/embed?javascript,console"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00168">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="though_support_">Though support for both <code class="literal">indexOf</code> and <code class="literal">lastIndexOf</code> has existed in browsers for some time, it’s only been formalized with the release of ECMAScript 5. Both methods take a search value, which is then compared to every element in the array. If the value is found, both return an index representing the array element. If the value is not found, –1 is returned. The <code class="literal">indexOf</code> method returns the first one found, the <code class="literal">lastIndexOf</code> returns the last one found:</p>
<pre class="screen" id="var_animals__n_id2">var animals = new Array("dog","cat","seal","walrus","lion", "cat");

console.log(animals.indexOf("cat")); // prints 1
console.log(animals.lastIndexOf("cat")); // prints 5</pre>
<p id="both_methods_ca">Both methods can take a starting index, setting where the search is going to start:</p>
<pre class="screen" id="var_animals__n_id3">var animals = new Array("dog","cat","seal","walrus","lion", "cat");

console.log(animals.indexOf("cat",2)); // prints 5
console.log(animals.lastIndexOf("cat",4)); // prints 1</pre>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="creating_a_block_of_reusable_code">
<div class="titlepage"><div><div><h2 class="title">Creating a Block of Reusable Code</h2></div></div></div>
<div class="sect2" id="problem-id00197">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_cre_id5">You want to create a block of code that you can use several times.</p>
</div>
<div class="sect2" id="solution-id00198">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="create_a_simple">Create a simple, named, parameter-less function using the <code class="literal">function</code> statement:</p>
<pre class="screen" id="function_simple">function simpleFunction() {
   console.log("Hello, function!");
};

simpleFunction();</pre>
</div>
<div class="sect2" id="discussion-id00199">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="a_function_crea">A function created using the <code class="literal">function</code> keyword and given a name is known as both a <span class="emphasis"><em>declarative function</em></span> and a <span class="emphasis"><em>static function</em></span>. The basic structure is:</p>
<pre class="screen" id="function_functi_id2">function functionName() {
   // JavaScript statements
}</pre>
<p id="this_type_of_fu">This type of function is parsed when the page containing the JavaScript application is loaded, and the parsed results are used whenever the function name is referenced. It’s an efficient way of reusing the same code.</p>
<p id="any_name_that_w">Any name that would be valid for a variable would work for a function. Variable names can be any combination of characters, numbers, and underscores, as long as the variable name starts with a character or underscore and case-sensitivity is preserved.</p>
<p id="however_functi">However, functions typically perform some action, and best practices suggest that the function name should be descriptive. For instance, a function that sums the numbers in an HTML table might be named <span class="emphasis"><em><code class="literal">sumTableValues</code></em></span>.</p>
<div class="sidebar online_only" id="try_it_now_id37">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="what_would_a_fu">What would a function look like that concatenated the elements of a three-member array and wrote the output as a paragraph to a <code class="literal">div</code> element? Click on the JavaScript option to see if your implementation matches the solution.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/uvoqek/1/embed?live"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="passing_single_data_values_to_and_from_a">
<div class="titlepage"><div><div><h2 class="title">Passing Single Data Values to and from a Function</h2></div></div></div>
<div class="sect2" id="problem-id00200">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_need_to_pas_id1">You need to pass data values into a named function and get a result back.</p>
</div>
<div class="sect2" id="solution-id00201">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="provide_argumen">Provide arguments for the incoming data, and return the result:</p>
<pre class="screen" id="function_makehe_id1">function makeHello(strName) {
   return ("Hello " + strName);
}

window.onload=function() {
   var name = prompt("What's your name?","");
   var greeting = makeHello(name);
   alert(greeting);
}</pre>
</div>
<div class="sect2" id="discussion-id00202">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="function_argume_id1">Function arguments are a way to pass data to a function. The arguments are separated by commas and included in the parentheses following the function name:</p>
<pre class="screen" id="var_firstname_">var firstName = "Some":
var lastName = "Person";

makeHello(firstName, lastName);</pre>
<p id="the_function_th">The function then processes the arguments, as needed:</p>
<pre class="screen" id="function_makehe_id2">function makeHello(firstName, lastName) {
    alert("Hello " + firstName + " " + lastName);
}</pre>
<p id="data_is_returne">Data is returned from the function to the calling program using the <code class="literal">return</code> statement:</p>
<pre class="screen" id="function_makehe_id3">function makeHello(firstName, lastName) {
   return "Hello " + firstName + " " + lastName;
}</pre>
<p id="you_can_pass_se">You can pass several arguments to the function, but only one return value. If you want to return more than one value, you can pass more complex objects, such as an array, to and from a function.</p>
<p id="unless_youre_s">Unless you’re sure about the type of data coming from the user, you’ll want to also test the data first. For instance, if you want to ensure that a value passed to the function is a number, you could do the following:</p>
<pre class="screen" id="function_somefu_id2">function someFunc(num) {
   if (typeof num == "number") {
      ...
   }
}</pre>
<p id="you_also_dont_">You also don’t have to provide a one-to-one mapping between the value passed to the object, and the number of function parameters. Accessible from within a function is an <code class="literal">arguments</code> object that contains all of the arguments passed to the function. It’s not a true array, but you can use array index notation to access the argument, and it does provide a length property for the number of arguments:</p>
<pre class="screen" id="function_sumnum">function sumNums() {
  var sum = 0;
  for (var i = 0; i &lt; arguments.length; i++) {
     var num = parseFloat(arguments[i]);
     if (!isNaN(num)) {
        sum+=num;
     }
   }
   return sum;
}

var sum = sumNums(4.55, 3.0,1, "apple", 56.33);</pre>
<div class="sidebar online_only" id="try_it_now_id38">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="the_following_e_id1">The following example is a bit of a cheat, because I’m using more advanced <code class="literal">function</code> functionality in the code. I’m using the <code class="literal">function</code> object’s <code class="literal">apply</code> method to take an array (or array-like object) of values, and treat its members as if as they’re passed as single values to the function.</p>
<p id="type_in_various">Type in various types of data values, separated by spaces, and see what happens to the result.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ojucep/2/embed?javascript,live"> </iframe></div>
</div>
</div>
<div class="sect2" id="see_also-id00203">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="demonstrates_pa"><a class="xref" href="ch03.html#passing_complex_data_objects_to_a_functi" title="Passing Complex Data Objects to a Function">“Passing Complex Data Objects to a Function”</a> demonstrates passing more complex objects as arguments.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="passing_complex_data_objects_to_a_functi">
<div class="titlepage"><div><div><h2 class="title">Passing Complex Data Objects to a Function</h2></div></div></div>
<div class="sect2" id="problem-id00204">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_need_to_pas_id2">You need to pass more complex data to a function.</p>
</div>
<div class="sect2" id="solution-id00205">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="you_can_use_obj">You can use objects, such as arrays, as function arguments:</p>
<pre class="screen" id="function_makehe_id4">function makeHello(name) {
   name[name.length] = "Hello " + name[0] + " " + name[1];
}
var name = new Array('Ima','Reader');
makeHello(name);
alert(name[2]); // displays "Hello Ima Reader"</pre>
</div>
<div class="sect2" id="discussion-id00206">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="function_argume_id2">Function arguments in JavaScript can be simple scalar values, such strings or numbers, or they can be complex objects, such as arrays. Arrays are a simple way to pass many values to a function without having to create separate parameters for each. It’s also a way to pass an unknown number of values to a function, such as an array of numbers to be summed:</p>
<pre class="screen" id="function_addnum">function addNumbers(nums) {
   var total = 0;
   for (var i = 0; i &lt; nums.length; i++) {
      total+=nums[i];
   }
   return total;
}</pre>
<p id="a_complex_objec">A complex object is treated differently than a scalar argument in a function. In the solution, an array is passed to the <span class="emphasis"><em><code class="literal">makeHello</code></em></span> function, but isn’t returned from the function. However, the generated value added to the array in the function is still accessible to the calling program, because objects are passed into functions <span class="emphasis"><em>by reference</em></span>.</p>
<p id="scalar_argument">Scalar arguments are passed <span class="emphasis"><em>by value</em></span>, which means that a copy of the argument is made for processing in the function and changes to the argument in the function won’t be reflected back to the calling program. Objects, though, are passed by reference: any changes to them in the function are reflected in the calling program.</p>
<p id="demonstrates_th"><a class="xref" href="ch03.html#functional_differences_between_scalar_an" title="Example 3-2. Functional differences between scalar and array arguments">Example 3-2</a> demonstrates the differences between scalar and complex objects when used as function arguments. The function takes two parameters, a string literal and an array. Both are modified in the function, and the contents of both are printed after the function returns control to the calling program.</p>
<div class="example" id="functional_differences_between_scalar_an">
<div class="example-title">Example 3-2. Functional differences between scalar and array arguments</div>
<div class="example-contents"><pre class="screen" id="doctype_html_id5">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=utf-8 /&gt;
&lt;title&gt;Arguments passed by reference&lt;/title&gt;

&lt;style id="jsbin-css"&gt;
body {
  margin-top: 50px;
}
button {
        background-color: #3994b6;
        padding: 10px;
        -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
        border-radius: 5px;
        color: #FFF;
        text-align: center;
        text-decoration: none;
        font-size: 12px;
        font-weight: bold;
        width: auto;
  display: block;
  margin-bottom: 5px;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;p&gt;Arguments, separated by spaces:&lt;/p&gt;
  &lt;input type="text" id="args" /&gt;
  &lt;button type="button" onclick="grabArgs()"&gt;
  Concatenate Strings&lt;/button&gt;
  &lt;div id="result"&gt;&lt;/div&gt;
&lt;script&gt;
function concatenateString(strings, separator) {
  var result=strings.join(separator);

  // assign result to separator
  separator = result;

  // and array
  strings[strings.length]=result;
}

function grabArgs() {

  var sep = "*";
  var items = document.getElementById("args").value.split(" ");
  concatenateString(items,sep);

  document.getElementById("result").innerHTML =
    "&lt;p&gt;" + items + "&lt;br /&gt;" + sep + "&lt;/p&gt;";
}
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div>
</div>
<p id="the_result_show">The result shows that the array is impacted by the changes within the function, while the simple string argument (<span class="emphasis"><em>+separator+</em></span>) does not reflect the change.</p>
<div class="sidebar online_only" id="try_it_now_id39">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/avigef/1/embed?live,javascript"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="creating_a_dynamic_runtime_function">
<div class="titlepage"><div><div><h2 class="title">Creating a Dynamic Runtime Function</h2></div></div></div>
<div class="sect2" id="problem-id00207">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_need_to_cre">You need to create a function, but you won’t know its structure until runtime.</p>
</div>
<div class="sect2" id="solution-id00208">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_an_anonymou">Use an anonymous function, created using the <code class="literal">Function</code> object constructor:</p>
<pre class="screen" id="two_paramete">// two parameters and one function body string
var functionName = new Function (x, y, functionBody);
functionName(varA, varB); // two parameters are processed by function</pre>
</div>
<div class="sect2" id="discussion-id00209">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="functions_creat">Functions created using the new <code class="literal">Function</code> object constructor are called <span class="emphasis"><em>anonymous</em></span> functions because they’re not given a function name when they’re created. Instead, they’re assigned to a variable. You then use the variable as you would a function call.</p>
<p id="anonymous_funct_id1">Anonymous functions are parsed at runtime, which makes them inefficient for general purposes. However, they allow us to define both parameters and function body at runtime, which is handy if you’re not sure what the function body is going to be until runtime.</p>
<p id="to_demonstrate_">To demonstrate an anonymous function, I’m going to borrow an example from another of my books, <span class="emphasis"><em>Learning JavaScript</em></span> (O’Reilly), replicated in <a class="xref" href="ch03.html#demonstration_of_using_an_anonymous_func" title="Example 3-3. Using an anonymous function">Example 3-3</a>. This JavaScript application prompts the web page reader to provide a function that takes two parameters, as well as the value of the parameters. The application then uses these values to create the function and invoke it.</p>
<div class="example" id="demonstration_of_using_an_anonymous_func">
<div class="example-title">Example 3-3. Using an anonymous function</div>
<div class="example-contents"><pre class="screen" id="doctype_html_id6">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Anonymous Function&lt;/title&gt;
&lt;script&gt;

window.onload=function() {

  var func = prompt("Enter function body:","");
  var x = prompt("Enter value for x:","");
  var y = prompt("Enter value for y:","");

  var newFun = new Function("x","y",func);
  var result = newFun(x,y);

}

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div>
</div>
<p id="when_prompted_f">When prompted for the function body, use something simple such:</p>
<pre class="screen" id="alertx____">alert(x + " " + y)</pre>
<p id="if_you_pass_in_">If you pass in <span class="emphasis"><em><code class="literal">Hello</code></em></span> and <span class="emphasis"><em><code class="literal">World</code></em></span> for the next two prompts, the result is an alert message with <span class="emphasis"><em>Hello World</em></span>.</p>
<div class="sidebar online_only" id="try_it_now_id40">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="i_created_the_e">I created the example in JS Bin, but without the prompts. Modify the JavaScript to create your own function and parameters, or try the example, as is.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ejowax/1/embed?javascript,live"> </iframe></div>
</div>
<p id="the_function_re">The function return value is assigned a variable, just in case the dynamic function body returns a value. If no value is returned, then the returned value is undefined.</p>
<p id="of_course_usin">Of course, using an anonymous function like this isn’t the safest thing to do, because you can’t control what the person enters as function body. And it’s not particularly useful either.</p>
<p id="anonymous_funct_id2">Anonymous functions can be useful when passing functions as arguments, or assigning them to object properties. However, in most of these cases a literal function is preferred over a function object, because function literals are parsed once, when the application is loaded.</p>
</div>
<div class="sect2" id="see_also-id00210">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="literal_functio">Literal functions are covered in <a class="xref" href="ch03.html#passing_a_function_as_argument_to_anothe" title="Passing a Function As an Argument to Another Function">“Passing a Function As an Argument to Another Function”</a>.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-3.asciidoc" id="passing_a_function_as_argument_to_anothe">
<div class="titlepage"><div><div><h2 class="title">Passing a Function As an Argument to Another Function</h2></div></div></div>
<div class="sect2" id="problem-id00211">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_pas">You want to pass a function as an argument to another function.</p>
</div>
<div class="sect2" id="solution-id00212">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="for_implementin">For implementing a solution matching the following:</p>
<pre class="screen" id="function_otherf">function otherFunction(x,y,z) {
  x(y,z);
}</pre>
<p id="use_a_literal_f">use a <span class="emphasis"><em>literal function</em></span>:</p>
<pre class="screen" id="var_param__fun_id1">var param = function(arg1, arg2) { alert(arg1 + " " + arg2); };
otherFunction(param, "Hello", "World");</pre>
<p id="or_a_function_e">or a <span class="emphasis"><em>function expression</em></span> as a function argument:</p>
<pre class="screen" id="otherfunctionf">otherFunction(function(arg1,arg2) { alert(arg1 + ' ' + arg2); }, "Hello","World");</pre>
</div>
<div class="sect2" id="discussion-id00213">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_function_ke">The <code class="literal">function</code> keyword is an operator as well as a statement, and can be used to create a function as an expression. Functions created this way are called <span class="emphasis"><em>function expressions</em></span>, <span class="emphasis"><em>function literals</em></span>, and <span class="emphasis"><em>anonymous functions</em></span>, though <span class="emphasis"><em>anonymous functions</em></span> is an overloaded term since it applies to functions as objects, as well as functions as expressions.</p>
<div class="sidebar online_only" id="try_it_now_id41">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="a_common_use_of">A common use of an anonymous function is as an event handler function, as the following live example in JS Bin demonstrates. The <code class="literal">addEventListener</code> method takes the event type as first parameter and the event handler anonymous function as second parameter.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/uwipoh/embed?live,javascript"> </iframe></div>
</div>
<p id="a_function_name">A function name can be provided with literal functions, but it’s only accessible within the function:</p>
<pre class="screen" id="var_param__fun_id2">var param = function inner() { return typeof inner; }
console.log(param()); // prints out "function"</pre>
<p id="this_functional">This functionality may not seem useful, but it’s essential if you want to implement recursion, callback functionality, pass a function to an event handler or timer, and a host of other necessary functionalities.</p>
<p id="you_can_pass_a_">You can pass a function as an argument to another function as a named variable, or even directly within the argument list, as shown in the solution. Unlike functions constructed as objects, function literals are parsed when the page is loaded, rather than each time they’re accessed.</p>
</div>
</div></section><section class="chapter" data-original-filename="Chapter-4.asciidoc" id="accessing_page_elements"><div class="titlepage"><div><div><h1 class="title">Chapter 4. Manipulating Page Elements</h1></div></div></div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="introduction-id00388">
<div class="titlepage"><div><div><h2 class="title">Introduction</h2></div></div></div>
<p id="a_web_document_">A web document is organized like an upside-down tree, with the topmost element at the root and all other elements branching out, beneath. As you can see when the HTML elements of a web page are printed out, with each child nested under its parent, the top-level element is the <code class="literal">html</code> element, followed by the <code class="literal">head</code> and <code class="literal">body</code> elements. In the web page associated with the following print out, the <code class="literal">head</code> element contains <code class="literal">title</code> and <code class="literal">style</code> elements, while the body contains a couple of <code class="literal">div</code> elements and a <code class="literal">script</code> block. The first <code class="literal">div</code> element contains two paragraphs (<code class="literal">p</code>) and an unordered list (<code class="literal">ul</code>), which, itself, contains two list items (<code class="literal">li</code>). The other <code class="literal">div</code> element contains a paragraph with a <code class="literal">span</code>.</p>
<div class="interactive"><iframe style="width: 100%; height: 350px;" src="http://jsbin.com/epimuw/4/"> </iframe></div>
<p id="each_of_these_e">Each of these elements, or <span class="emphasis"><em>nodes</em></span> as they’re called in the Document Object Model (DOM), can be directly or indirectly accessed, created, modified, or removed. The functionality is provided through JavaScript (ECMAScript) <span class="emphasis"><em>bindings</em></span>—APIs that provide the basic DOM functionality.</p>
<div class="sect2" id="see_also-id00389">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="the_best_place_">The best place to find a summary of the different DOM specifications is via the <a class="ulink" href="http://www.w3.org/DOM/DOMTR" target="_top">W3C DOM Technical Reports page</a>. Mozilla also provides a nice <a class="ulink" href="https://developer.mozilla.org/En/DOM_Levels" target="_top">DOM summary</a>, as does the <a class="ulink" href="http://en.wikipedia.org/wiki/Document_Object_Model" target="_top">Wikipedia entry on the DOM</a>.</p>
<p id="the_ecmascript_">The ECMAScript binding for DOM Level 1 is at <a class="ulink" href="http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html" target="_top">http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html</a>. DOM Level 2’s ECMAScript binding is at <a class="ulink" href="http://www.w3.org/TR/DOM-Level-2-Core/ecma-script-binding.html" target="_top">http://www.w3.org/TR/DOM-Level-2-Core/ecma-script-binding.html</a>. The binding for DOM Level 3 is at <a class="ulink" href="http://www.w3.org/TR/DOM-Level-3-Core/ecma-script-binding.html" target="_top">http://www.w3.org/TR/DOM-Level-3-Core/ecma-script-binding.html</a>.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="access_a_given_element_and_find_its_pare">
<div class="titlepage"><div><div><h2 class="title">Access a Given Element and Find Its Parent and Child Elements</h2></div></div></div>
<div class="sect2" id="problem-id00390">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_acc_id1">You want to access a specific web page element, and find its parent and child elements.</p>
</div>
<div class="sect2" id="solution-id00391">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="give_the_elemen">Give the element a unique identifier, and use the <code class="literal">document.getElementById</code> method:</p>
<pre class="screen" id="div_iddemodi_id1">&lt;div id="demodiv"&gt;

...
var demodiv = document.getElementById("demodiv");</pre>
<p id="find_its_parent">Find its parent via the <code class="literal">parentNode</code> property:</p>
<pre class="screen" id="var_parent__de_id1">var parent = demodiv.parentNode;</pre>
<p id="find_its_childr">Find its children via the <code class="literal">childNodes</code> property:</p>
<pre class="screen" id="var_children__">var children = demodiv.childNodes;</pre>
</div>
<div class="sect2" id="discussion-id00392">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_most_common_id2">The most commonly used DOM method is <code class="literal">getElementById</code>. It takes one parameter: a case-sensitive string with the element’s identifier. It returns an <code class="literal">element</code> object if an element with the identifier exists; otherwise, it returns null.</p>
<p id="the_returned_el">The returned <code class="literal">element</code> object has a set of properties, including several inherited from the <code class="literal">node</code> object. The <code class="literal">node</code> properties and methods are primarily focused on the node’s relationship to the document tree that contains it. For instance, to find the parent node for the element, access its <code class="literal">parentNode</code> property:</p>
<pre class="screen" id="var_parent__de_id2">var parent = demodiv.parentNode; // parent node</pre>
<p id="whats_returned">What’s returned is an <code class="literal">element</code> object referencing the target element’s parent node. If you want to find out what children an element has, you can traverse a collection of them through the <code class="literal">childNodes</code> property, after first checking to ensure it does have children nodes with the <code class="literal">hasChildNodes</code> method:</p>
<pre class="screen" id="if_demodivhas">if (demodiv.hasChildNodes()) {
   var children = demodiv.childNodes;
   for (var i = 0; i &lt; children.length; i++) {
      outputString+=" has child " + children[i].nodeName + "&lt;br /&gt;";
   }
}</pre>
<p id="you_can_find_ou">You can find out the type of element for each node through the <code class="literal">nodeName</code> property:</p>
<pre class="screen" id="var_type__pare">var type = parent.nodeName; // BODY</pre>
<p id="when_accessing_">When accessing the children of an element, you might be surprised at what appears as a child node. For instance, whitespace before and after an element is, itself, a child node, with a <code class="literal">nodeName</code> of <code class="literal">#text</code>. For the following <code class="literal">div</code> element:</p>
<pre class="screen" id="div_iddemodi_id2">&lt;div id="demodiv" class="demo"&gt;
&lt;p&gt;Some text&lt;/p&gt;
&lt;p&gt;Some more text&lt;/p&gt;
&lt;/div&gt;</pre>
<p id="the_demodiv_ele">The <code class="literal">demodiv</code> element (node) has five children, not two:</p>
<pre class="screen" id="has_child_text">has child #text
has child P
has child #text
has child P
has child #text</pre>
<p id="in_addition_if">In addition, if the web page document has an HTML comment (delimited by &lt;!-- and -→), a <code class="literal">#comment</code> node is created.</p>
<p id="the_dom_tree_pr">The DOM tree printout at the beginning of the chapter listed all the HTML elements in the web page, but it’s actually not complete. What’s missing is the text, and a single comment. Incorporating these nodes in the tree displays a fuller, albeit busier, tree.</p>
<div class="sidebar online_only" id="try_it_now_id42">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="right_click_on_">Right click on the example and view the frame source to see the actual document elements.</p>
<div class="interactive"><iframe style="width: 100%; height: 920px;" src="http://jsbin.com/izulel/2/"> </iframe></div>
</div>
<p id="you_can_simplif">You can simplify the tree by removing non-existential material. Rather than add line breaks and spaces to your HTML document:</p>
<pre class="screen" id="div_pthis_i">&lt;div&gt;
  &lt;p&gt;This is text&lt;/p&gt;
  &lt;p&gt;This is more text&lt;/p&gt;
&lt;/div&gt;</pre>
<p id="strip_out_this_">Strip out this extraneous material, which has only been added for human readability:</p>
<pre class="screen" id="divpthis_is">&lt;div&gt;&lt;p&gt;This is text&lt;/p&gt;&lt;p&gt;This is more text&lt;/p&gt;&lt;/div&gt;</pre>
<p id="now_the_only_">Now, the only <code class="literal">#text</code> nodes are the ones containing meaningful text.</p>
<div class="sidebar online_only" id="try_it_now_id43">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="strip_out_the_e">Strip out the extraneous white space, or add additional, to <code class="literal">demodiv</code> see the impact on the document element display. Note that the example only accesses and prints out the child nodes for the target <code class="literal">div</code> element.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/epimuw/6/embed?html,live"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="accessing_all_images_in_the_web_page">
<div class="titlepage"><div><div><h2 class="title">Accessing All Images in the Web Page</h2></div></div></div>
<div class="sect2" id="problem-id00393">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_acc_id2">You want to access all <code class="literal">img</code> elements in a given document.</p>
</div>
<div class="sect2" id="solution-id00394">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_documen">Use the <code class="literal">document.getElementsByTagName</code> method, passing in <code class="literal">img</code> as the parameter:</p>
<pre class="screen" id="var_imgelements_id1">var imgElements = document.getElementsByTagName('img');</pre>
</div>
<div class="sect2" id="discussion-id00395">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_getelements_id1">The <code class="literal">getElementsByTagName</code> returns a collection of nodes (a <code class="literal">NodeList</code>) of a given element type, such as the <code class="literal">img</code> tag in the solution. The collection can be traversed like an array, and the order of nodes is based on the order of the elements within the document: the first <code class="literal">img</code> element in the page is accessible at index 0, and so on:</p>
<pre class="screen" id="var_imgelements_id2">var imgElements = document.getElementsByTagName('img');
for (var i = 0; i &lt; imgElements.length; i++) {
   var img = imgElements[i];
   ...
}</pre>
<p id="though_the_node">Though the <code class="literal">NodeList</code> collection can be traversed like an array, it isn’t an <code class="literal">Array</code> object—you can’t use <code class="literal">Array</code> object methods, such as <code class="literal">push()</code> and <code class="literal">reverse()</code>, with a <code class="literal">NodeList</code>. <code class="literal">NodeList</code>'s only property is <code class="literal">length</code>, containing the number of elements in the collection. The only <code class="literal">NodeList</code> method is <code class="literal">item</code>, which takes the index of the item, beginning with the first node at index 0, and returns the <code class="literal">node</code> reference for the page element:</p>
<pre class="screen" id="var_img__imgel">var img = imgElements.item(1); // second image</pre>
<p id="the_getelements_id2">The <code class="literal">getElementsByTagName</code> method can be used with other element types, not just <code class="literal">document</code>.</p>
<p id="in_three_img_el">In <a class="xref" href="ch04.html#demonstrating_getelementsbytagname" title="Example 4-1. Demonstrating use of getElementsByTagName">Example 4-1</a> three <code class="literal">img</code> elements are contained in both an <code class="literal">article</code> and a <code class="literal">div</code> element, but we’re only interested in accessing <code class="literal">img</code> elements in the <code class="literal">article</code>. To ensure the application only gets the <code class="literal">img</code> elements in the <code class="literal">article</code>(s), we use <code class="literal">getElementsByTagName with the +article</code> element first, and then query each member of the <code class="literal">article</code> <code class="literal">NodeList</code> for <code class="literal">img</code> elements.</p>
<div class="example" id="demonstrating_getelementsbytagname">
<div class="example-title">Example 4-1. Demonstrating use of getElementsByTagName</div>
<div class="example-contents"><pre class="screen" id="doctype_html_id7">&lt;!DOCTYPE html&gt;
&lt;head&gt;
&lt;title&gt;Recipe&lt;/title&gt;

&lt;style&gt;
img {
  width: 200px
  }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id="result"&gt;&lt;/div&gt;
&lt;article&gt;
  &lt;p&gt;&lt;img src="http://burningbird.net/examples/media/orchids12.preview.jpg"
  alt="Orchid from MBG 2009 orchid show" /&gt;&lt;/p&gt;
  &lt;p&gt;&lt;img src="http://burningbird.net/examples/media/orchids6.preview.jpg"
  alt="Orchid from MBG 2009 orchid show" /&gt;&lt;/p&gt;
&lt;/article&gt;

&lt;div&gt;
  &lt;p&gt;&lt;img src="http://burningbird.net/examples/media/orchids4.preview.jpg"
  alt="Orchid from MBG 2009 orchid show" /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;script&gt;

  var imgString = "";

  // find all articles
  var articles = document.getElementsByTagName('article');

  // find all images in articles
  for (var i = 0; i &lt; articles.length; i++) {
     var imgs = articles[i].getElementsByTagName('img');

     // print out src
     for (var j = 0; j &lt; imgs.length; j++) {
       var img = imgs[j];
       imgString+=img.src + "&lt;br /&gt;";
     }
   }
   document.getElementById("result").innerHTML=imgString;

&lt;/script&gt;
&lt;/body&gt;</pre></div>
</div>
<p id="the_src_attribu">The <code class="literal">src</code> attribute for the collection of <code class="literal">img</code> elements contained in the <code class="literal">article</code> is printed out to the <code class="literal">div</code> element with an <code class="literal">id</code> of <span class="emphasis"><em><code class="literal">result</code></em></span>.</p>
<div class="sidebar online_only" id="try_it_now_id44">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 600px;" src="http://jsbin.com/epilaz/4/"> </iframe></div>
</div>
<p id="nodelist_is_an_"><code class="literal">NodeList</code> is an intriguing object because it’s a <span class="emphasis"><em>live collection</em></span>. A live collection means relevant changes made to the document after the <code class="literal">NodeList</code> is retrieved are reflected immediately in the collection. <a class="xref" href="ch04.html#demonstrating_getelementsbytagnamecomma" title="Example 4-2. Demonstrating getElementsByTagName and NodeList live collection capability">Example 4-2</a> demonstrates the <code class="literal">NodeList</code> live collection functionality, as well as <code class="literal">getElementsByTagName</code>.</p>
<p id="in_the_example_id3">In the example, <code class="literal">getElementsByTagName</code> is used at the very start of the script block to get a <code class="literal">NodeList</code> of the existing <code class="literal">img</code> elements in the page. In addition, two buttons allow the user to add a new picture to the web page, and to dump a print out of  contents of the <code class="literal">NodeList</code> containing all images in the page.</p>
<p id="when_a_new_imag">When a new image is added, <code class="literal">getElementsByTagName</code> is used with the paragraph tags (<code class="literal">p</code>) in order to obtain a <code class="literal">NodeList</code> of all the paragraphs. The last paragraph’s parent element (found via the <code class="literal">parentNode</code> property) is accessed and a new paragraph element containing a new <code class="literal">img</code> element is appended to this element.</p>
<div class="note" id="to_learn_more_a_id1"><p id="to_learn_more_a_id2">To learn more about adding new elements to the web page, see <a class="xref" href="ch04.html#inserting_elements_before_existing_page" title="Inserting Elements Before Existing Page Elements">“Inserting Elements Before Existing Page Elements”</a> later in the chapter, which covers adding new page elements in more detail.</p></div>
<p id="when_the_images">When the images <code class="literal">NodeList</code> is dumped, the existing <code class="literal">img</code> <code class="literal">NodeList</code> is accessed and the <code class="literal">src</code> attribute value for each <code class="literal">img</code> is added to an unordered list (<code class="literal">ul</code>). When finished, the list is added to a <code class="literal">div</code> element using its <code class="literal">innerHTML</code> property.</p>
<div class="example" id="demonstrating_getelementsbytagnamecomma">
<div class="example-title">Example 4-2. Demonstrating getElementsByTagName and NodeList live collection capability</div>
<div class="example-contents"><pre class="screen" id="doctype_html_id8">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=utf-8 /&gt;
&lt;title&gt;Example&lt;/title&gt;
&lt;script&gt;

// get NodeList of img elements
var imgs = document.getElementsByTagName('img');

function addImage() {

   var p = document.createElement("p");
   var img = document.createElement("img");
   img.src="http://burningbird.net/examples/media/orchids4.preview.jpg";
   p.appendChild(img);

   var paras = document.getElementsByTagName('p');
   paras[paras.length-1].parentNode.appendChild(p);

}

function dumpCollection() {
  var result = document.getElementById('result');
  var output = "&lt;ul&gt;";
  for (var i = 0; i &lt; imgs.length; i++) {
    output+= "&lt;li&gt;" + imgs[i].src + "&lt;/li&gt;";
  }
  output+="&lt;/ul&gt;";
  result.innerHTML = output;
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;button type="button" onclick="addImage()"&gt;Add new Picture&lt;/button&gt;
  &lt;button type="button" onclick="dumpCollection()"&gt;Dump images collection&lt;/button&gt;
  &lt;div id="result"&gt;&lt;/div&gt;
  &lt;p&gt;&lt;img src="http://burningbird.net/examples/media/orchids12.preview.jpg"
  alt="Orchid from MBG 2009 orchid show" /&gt;&lt;/p
&gt;
  &lt;p&gt;&lt;img src="http://burningbird.net/examples/media/orchids6.preview.jpg"
  alt="Orchid from MBG 2009 orchid show" /&gt;&lt;/p&gt;
  &lt;p&gt;&lt;img src="http://burningbird.net/examples/media/orchids9.preview.jpg"
  alt="Orchid from MBG 2009 orchid show" /&gt;&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></div>
</div>
<p id="clicking_the_bu">Clicking the button to dump the images collection before adding a new image displays the <code class="literal">src</code> attribute value for the three existing images; after adding a new picture, the collection now contains four images, and four <code class="literal">src</code> values are printed out. Clicking the button to add new copies of the image just adds that many more new images to the <code class="literal">NodeList</code>'s live collection.</p>
<div class="sidebar online_only" id="try_it_now_id45">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="try_pressing_th">Try pressing the dump collection button, first, then add an image and click the dump collection button again.</p>
<div class="interactive"><iframe style="width: 100%; height: 700px;" src="http://jsbin.com/owehah/4/quiet"> </iframe></div>
</div>
</div>
<div class="sect2" id="see_also-id00396">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="using_getelemen">Using <code class="literal">getElementsByTagName</code> to get all the paragraphs just to find their parent in <a class="xref" href="ch04.html#demonstrating_getelementsbytagnamecomma" title="Example 4-2. Demonstrating getElementsByTagName and NodeList live collection capability">Example 4-2</a> is overkill. <a class="xref" href="ch04.html#finding_the_parent_element_for_a_group_o" title="Finding the Parent Element for a Group of Elements">“Finding the Parent Element for a Group of Elements”</a> demonstrates how to use the Selectors API to directly access just the parent element for the paragraphs. The <code class="literal">parentNode</code> property is introduced in <a class="xref" href="ch04.html#access_a_given_element_and_find_its_pare" title="Access a Given Element and Find Its Parent and Child Elements">“Access a Given Element and Find Its Parent and Child Elements”</a>.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="discover_all_images_in_articles_using_th">
<div class="titlepage"><div><div><h2 class="title">Discover all Images in Articles Using the Selectors API</h2></div></div></div>
<div class="sect2" id="problem-id00401">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_get">You want to get a list of all <code class="literal">img</code> elements that are descendants of <code class="literal">article</code> elements, without having to query individual <code class="literal">article</code> elements.</p>
</div>
<div class="sect2" id="solution-id00402">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_newer_s">Use the newer Selectors API, access the <code class="literal">img</code> elements contained within <code class="literal">article</code> elements using CSS-style selector strings:</p>
<pre class="screen" id="var_imgs__docu_id1">var imgs = document.querySelectorAll("article img");</pre>
</div>
<div class="sect2" id="discussion-id00403">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_selectors_a_id1">The Selectors API is a relatively new capability that is now supported in all modern browsers. It provides more query flexibility than any other DOM functionality. It can definitely simplify your JavaScript.</p>
<div class="sidebar online_only" id="try_it_now_id46">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="compare_using_q">Compare using <code class="literal">querySelectorAll</code>:</p>
<div class="interactive"><iframe style="width: 100%; height: 600px;" src="http://jsbin.com/icufom/1/embed?live,javascript"> </iframe></div>
<p id="with_the_earlie">With the earlier example in <a class="xref" href="ch04.html#demonstrating_getelementsbytagname" title="Example 4-1. Demonstrating use of getElementsByTagName">Example 4-1</a>, which uses <code class="literal">getElementsByTagName</code>:</p>
<div class="interactive"><iframe style="width: 100%; height: 600px;" src="http://jsbin.com/epilaz/4/embed?live,javascript"> </iframe></div>
<p id="the_use_of_quer">The use of <code class="literal">querySelectorAll</code> greatly simplifies the code.</p>
</div>
<p id="there_are_two_s">There are two selector query API methods: the first, <code class="literal">querySelectorAll</code>, is demonstrated in the solution, and the second is <code class="literal">querySelector</code>. The difference between the two is <code class="literal">querySelectorAll</code> returns all elements that match the selector criteria, while <code class="literal">query</code>+Selector+ only returns the first found result.</p>
<p id="the_selectors_s">The selectors syntax is derived from CSS selector syntax. In the example, all <code class="literal">img</code> elements that are descendants of article elements are returned. To access all <code class="literal">img</code> elements, regardless of parent element, use:</p>
<pre class="screen" id="var_imgs__docu_id2">var imgs = document.querySelectorAll("img");</pre>
<p id="in_the_solution_id4">In the solution, you’ll get all <code class="literal">img</code> elements in the web page. This means that if the <code class="literal">img</code> element is contained within a <code class="literal">div</code> that’s within an article, this <code class="literal">img</code> element will be among those returned:</p>
<pre class="screen" id="article_div">&lt;article&gt;
   &lt;div&gt;
      &lt;img src="..." /&gt;
   &lt;/div&gt;
&lt;/article&gt;</pre>
<p id="if_you_want_onl">If you want only those <code class="literal">img</code> elements that are direct children of an <code class="literal">article</code> element, use the following:</p>
<pre class="screen" id="var_imgs__docu_id3">var imgs = document.querySelectorAll("article&gt; img");</pre>
<p id="if_youre_inter_id1">If you’re interested in accessing all <code class="literal">img</code> elements that are immediately following a paragraph, use:</p>
<pre class="screen" id="var_imgs__docu_id4">var imgs = document.querySelectorAll("p + img");</pre>
<p id="if_youre_inter_id2">If you’re interested in <code class="literal">img</code> elements that have an empty <code class="literal">alt</code> attribute, use the following:</p>
<pre class="screen" id="var_imgs__docu_id5">var imgs = document.querySelectorAll('img[alt=""]');</pre>
<p id="if_youre_only_">If you’re only interested in <code class="literal">img</code> elements that don’t have an empty <code class="literal">alt</code> attribute, use the <span class="emphasis"><em>negation</em></span> pseudo-class:</p>
<pre class="screen" id="var_imgs__docu_id6">var imgs = document.querySelectorAll('img:not([alt=""])');</pre>
<p id="the_negation_ps">The negation pseudo-class (<code class="literal">:not</code>) is used to find all elements that do not match a selector string. In the previous code snippet, <code class="literal">img</code> elements that have a non-empty <code class="literal">alt</code> attribute are returned. To find all <code class="literal">img</code> elements that do have <span class="strong"><strong>any</strong></span> <code class="literal">alt</code> attribute, use the following:</p>
<pre class="screen" id="var_imgs__docu_id7">var imgs = document.querySelectorAll('img:not([alt]);</pre>
<p id="the_use_of_alt">The use of <span class="strong"><strong><code class="literal">[alt]</code></strong></span> returns all elements with an <code class="literal">alt</code> attribute, and the use of the negation psuedo-class returns just the opposite.</p>
<div class="sidebar online_only" id="try_it_now_id47">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="now_is_the_time">Now is the time to give all of the example syntaxes just mentioned a go. Try each out in the following live example, see the different results.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/aziguw/1/embed?html,live"> </iframe></div>
</div>
<p id="the_collection_">The collection of elements returned from <code class="literal">querySelectorAll</code> is not a live collection, unlike the collection of objects returned with <code class="literal">getElementsByTagName</code>. Updates to the page are not reflected in the query results if the updates occur after the results have been obtained.</p>
<div class="sidebar online_only" id="try_it_now_id48">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="the_getalleleme">The <code class="literal">getAllElementsByTagName</code> method call in <a class="xref" href="ch04.html#demonstrating_getelementsbytagnamecomma" title="Example 4-2. Demonstrating getElementsByTagName and NodeList live collection capability">Example 4-2</a> is replaced with <code class="literal">querySelectorAll</code> in the following example. Now, no matter how many times you add a new image, the example only prints out the <code class="literal">src</code> attribute from the three original images.</p>
<div class="interactive"><iframe style="width: 100%; height: 600px;" src="http://jsbin.com/apulim/1/quiet"> </iframe></div>
</div>
<p id="though_the_sele">Though the Selectors API is a wonderful creation, it shouldn’t be used for every document query. For one, it’s not efficient for accessing elements by a specific identifier, so you’re still better off using <code class="literal">getElementById</code> for this purpose.In addition, as just noted, the resulting collection isn’t a live collection, and won’t reflect recent updates.</p>
<p id="the_best_bet_is">The best bet is to test your application using the Selectors API and a variety of other methods and see which provides best performance, broadest support, and necessary functionality.</p>
<div class="note" id="ch11note06"><p id="the_selectors_a_id2">The Selectors API specification can be accessed at <a class="ulink" href="http://www.w3.org/TR/selectors-api/" target="_top">W3C: Selectors API Level 1</a>. The CSS2 selector syntax can be reviewed in more detail within the <a class="ulink" href="http://www.w3.org/TR/CSS2/selector.html" target="_top">W3C’s CSS2 specification</a> and the CSS3 selector syntax can be explored at <a class="ulink" href="http://www.w3.org/TR/selectors/#selectors" target="_top">W3C’s Selectors Level 3</a>.</p></div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="finding_the_parent_element_for_a_group_o">
<div class="titlepage"><div><div><h2 class="title">Finding the Parent Element for a Group of Elements</h2></div></div></div>
<div class="sect2" id="problem-id00406">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_acc_id3">You want to access the parent element for a group of paragraphs.</p>
</div>
<div class="sect2" id="solution-id00407">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_queryse">Use the <code class="literal">querySelector</code> method to access the first paragraph in the set, and then access the <code class="literal">parentNode</code> property for this element:</p>
<pre class="screen" id="var_parent__do">var parent = document.querySelector("body p").parentNode;</pre>
</div>
<div class="sect2" id="discussion-id00408">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="with_all_the_wa">With all the ways we can access child nodes and siblings, not to mention descendants to many depths, you’d think we’d also be able to directly query for parent elements. Unfortunately, there is nothing in CSS comparable to <code class="literal">:parent</code> to return a parent element. However, we can fake it by accessing a known child element and then accessing the parent via the <code class="literal">parentNode</code> property.</p>
<div class="note" id="there_is_hope_f_id1"><p id="there_is_hope_f_id2">There is hope for us yet, because the concept of a parent selector is included in the working draft of CSS4, along with other goodies. However, it’s going to take some time before this new functionality comes to a computer, tablet, or smartphone near us.</p></div>
<p id="in_the_solution_id5">In the solution, the <code class="literal">querySelector</code> method will return the first paragraph element that is a descendant of the body element. Since <code class="literal">querySelector</code> only returns one element, you don’t have to use array reference to access an individual element. Once we have one of the child elements, the parent is accessed via the <code class="literal">parentNode</code> property.</p>
<p id="earlier_in_we_u">Earlier in <a class="xref" href="ch04.html#demonstrating_getelementsbytagnamecomma" title="Example 4-2. Demonstrating getElementsByTagName and NodeList live collection capability">Example 4-2</a> we used a cumbersome technique of finding all paragraphs using a <code class="literal">getAllElementsByTagName</code> with the paragraphs, accessing the last element, and then using <code class="literal">parentNode</code>.</p>
<p id="we_can_simplify">We can simplify this functionality using <code class="literal">querySelect</code> with the <code class="literal">p</code> elements, which returns the first paragraph, which we can then query for the parent node with <code class="literal">parentNode</code>.</p>
<pre class="screen" id="function_addima">function addImage() {

   var p = document.createElement("p");
   var img = document.createElement("img");
   img.src="http://burningbird.net/examples/media/orchids4.preview.jpg";
   p.appendChild(img);

   //using querySelector rather than
   //getElementsByTagName
   var para  = document.querySelector('p');
   para.parentNode.appendChild(p);

}</pre>
<div class="sidebar online_only" id="try_it_now_id49">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="try_the_new_and">Try the new and improved code using <code class="literal">querySelector</code> for yourself.</p>
<div class="interactive"><iframe style="width: 100%; height: 600px;" src="http://jsbin.com/acuham/1/embed?javascript,live"> </iframe></div>
</div>
</div>
<div class="sect2" id="see_also-id00409">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="see_for_more_de_id1">See <a class="xref" href="ch04.html#discover_all_images_in_articles_using_th" title="Discover all Images in Articles Using the Selectors API">“Discover all Images in Articles Using the Selectors API”</a> for more details on the Selectors API and the <code class="literal">querySelector</code> and <code class="literal">querySelectorAll</code> methods.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="creating_an_array_of_all_elements_of_a_g">
<div class="titlepage"><div><div><h2 class="title">Creating an Array of All Elements of a Given Class</h2></div></div></div>
<div class="sect2" id="problem-id00418">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_ret">You want to retrieve a collection of elements that have a specific class name within the document.</p>
</div>
<div class="sect2" id="solution-id00419">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_getelem">Use the <code class="literal">getElementsByClassName</code> method to retrieve a collection of all elements in the document that share the same class name:</p>
<pre class="screen" id="var_elems__doc_id1">var elems = document.getElementsByClassName("classname");</pre>
<p id="or_use_the_sele">or use the Selectors API to get the class-named items:</p>
<pre class="screen" id="var_elems__doc_id2">var elems = document.querySelectorAll(".classname");</pre>
</div>
<div class="sect2" id="discussion-id00420">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_method_gete">The method <code class="literal">getElementsByClassName</code> goes beyond one element type to find all elements that share the same class value. It can also work with elements that have multiple classes:</p>
<pre class="screen" id="var_elems__doc_id3">var elems = document.getElementsByClassName("firstclass secondclass");</pre>
<p id="the_second_appr">The second approach using <code class="literal">querySelectorAll</code> is an alternative. It, too, can search for multiple class names:</p>
<pre class="screen" id="var_elems__doc_id4">var elems = document.querySelectorAll(".firstclass, .secondclass");</pre>
<p id="however_perfor">However, performance tests demonstrate that <code class="literal">getElementsByClassName</code> is a superior option in all environments. In most cases, <code class="literal">querySelectorAll</code> is best reserved for those times when other specialized methods don’t provide what’s needed.</p>
<p id="once_you_have_a">Once you have an array of elements, you can find out which type of element each is with <code class="literal">nodeName</code>. In the following code snippet, all elements that share the same class (<span class="emphasis"><em><code class="literal">firstclass</code></em></span>) are returned, and what type each is is accessed via the <code class="literal">nodeName</code> property. A string of the results is returned.</p>
<pre class="screen" id="var_elements___id1">var elements = document.getElementsByClassName("firstclass");

  // print out node name
  for (var j = 0; j &lt; elements.length; j++) {
     var element = elements[j];
     elementString+=element.nodeName + " ";
  }</pre>
<div class="sidebar online_only" id="try_it_now_id50">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="this_simple_app">This simple application takes a string with one or more class names from those attached to various elements in the HTML on the left. The application uses <code class="literal">getElementsByClassName</code> to find all the elements with the given <code class="literal">class</code> attribute value(s), and then prints out each element’s <code class="literal">nodeName</code>.</p>
<div class="interactive"><iframe style="width: 100%; height: 600px;" src="http://jsbin.com/ezarus/1/embed?html,live"> </iframe></div>
</div>
</div>
<div class="sect2" id="see_also-id00421">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="see_for_more_de_id2">See <a class="xref" href="ch04.html#discover_all_images_in_articles_using_th" title="Discover all Images in Articles Using the Selectors API">“Discover all Images in Articles Using the Selectors API”</a> for more details on the Selectors API and the <code class="literal">querySelector</code> and <code class="literal">querySelectorAll</code> methods.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="finding_all_elements_that_share_an_attri">
<div class="titlepage"><div><div><h2 class="title">Finding All Elements That Share an Attribute</h2></div></div></div>
<div class="sect2" id="problem-id00422">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_fin_id3">You want to find all elements in a web document with a similiar <code class="literal">class</code>.</p>
</div>
<div class="sect2" id="solution-id00423">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_queryselect">Use <code class="literal">querySelectorAll</code> with the substring matching attribute selector:</p>
<pre class="screen" id="var_elements___id2">var elements = document.querySelectorAll('*[class*=test]');</pre>
</div>
<div class="sect2" id="discussion-id00424">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="there_are_three_id2">There are three substring matching attribute selectors. From the Selectors Level 3 specification:</p>
<div class="variablelist" id="attval_repr"><dl class="variablelist">
<dt><span class="term">
[att^=val]
</span></dt>
<dd>
Represents an element with the att attribute whose value begins with the prefix "val". If "val" is the empty string then the selector does not represent anything.
</dd>
<dt><span class="term">
[att$=val]
</span></dt>
<dd>
Represents an element with the att attribute whose value ends with the suffix "val". If "val" is the empty string then the selector does not represent anything.
</dd>
<dt><span class="term">
[att*=val]
</span></dt>
<dd>
Represents an element with the att attribute whose value contains at least one instance of the substring "val". If "val" is the empty string then the selector does not represent anything.
</dd>
</dl></div>
<p id="if_you_have_ele">If you have elements with <code class="literal">class</code> values such as <span class="emphasis"><em><code class="literal">aclass</code></em></span>, <span class="emphasis"><em><code class="literal">pclass</code></em></span>, <span class="emphasis"><em><code class="literal">lclass</code></em></span>, and <span class="emphasis"><em><code class="literal">classl</code></em></span>, you can find all of the elements with a query like the following:</p>
<pre class="screen" id="var_elems__doc_id5">var elems = document.querySelectorAll('[class*=class]');</pre>
<p id="however_if_you">However, if you only want <code class="literal">class</code> values where <span class="emphasis"><em><code class="literal">class</code></em></span> occurs only at the end of the string, use:</p>
<pre class="screen" id="var_elems__doc_id6">var elems = document.querySelectorAll('[class$=class]');</pre>
<p id="conversely_fin">Conversely, find all elements whose <code class="literal">class</code> values begin with <span class="emphasis"><em><code class="literal">class</code></em></span> using the following:</p>
<pre class="screen" id="var_elems__doc_id7">var elems = document.querySelectorAll('[class^=class]');</pre>
<p id="given_the_follo">Given the following HTML snippet:</p>
<pre class="screen" id="div_iddiv_">&lt;div id="div1" class="classa"&gt;
  &lt;p id="para1" class="bclass"&gt;Testing different query strings.&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="classa" id="ul1"&gt;
  &lt;li id="li1" class="bclass"&gt;one&lt;/li&gt;
  &lt;li id="li2" class="classa"&gt;two&lt;/li&gt;
&lt;/ul&gt;
&lt;article id="art1" class="bclass"&gt;
  &lt;p id="para2" class="bclass class2"&gt;Last paragraph&lt;/p&gt;
&lt;/article&gt;
&lt;img id="img1" class="classa"
src="http://burningbird.net/examples/media/suns.jpg"
alt="Basket of brightly painted pottery suns with smiling faces" /&gt;
&lt;img id="img2" class="bclass"
src="http://burningbird.net/examples/media/orchids4.preview.jpg"
alt="orchids" /&gt;</pre>
<p id="the_following_j">The following JavaScript snippet would return a string with the <code class="literal">id</code> attribute of any <code class="literal">img</code> element with a <code class="literal">class</code> name beginning with <span class="emphasis"><em><code class="literal">class</code></em></span>:</p>
<pre class="screen" id="var_elems__doc_id8">var elems = document.querySelectorAll('[class^=class]');

var result="";
for (var i = 0; i&lt;elems.length; i++) {
    result+= elems[i].getAttribute("id") + " ";
}</pre>
<p id="you_can_combine">You can combine substring selections. The following would return all JPEG <code class="literal">img</code> elements that are from the <span class="emphasis"><em><code class="literal">burningbird.net</code></em></span> domain:</p>
<pre class="screen" id="var_imgs__docu_id8">var imgs = document.querySelectorAll('[src*=burningbird\.net][src$=jpg]');</pre>
<p id="notice_the_use_">Notice the use of the escape character (<span class="emphasis"><em>\</em></span>) with the dot (<span class="emphasis"><em>.</em></span>) in the substring match. The query looks for any <code class="literal">src</code> string that contains the specified domain, in any position, and the <span class="emphasis"><em><code class="literal">jpg</code></em></span> string in the last part of the string. Only elements matching both are returned.</p>
<div class="sidebar online_only" id="try_it_now_id51">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="in_the_followin">In the following live example, type in variations of attribute names and values using the three substring matching selectors. The result is a string with all the <code class="literal">id</code> values for each matched element.</p>
<div class="interactive"><iframe style="width: 100%; height: 600px;" src="http://jsbin.com/olemiw/3/embed?live,html"> </iframe></div>
</div>
</div>
<div class="sect2" id="see_also-id00425">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="see_for_more_de_id3">See <a class="xref" href="ch04.html#discover_all_images_in_articles_using_th" title="Discover all Images in Articles Using the Selectors API">“Discover all Images in Articles Using the Selectors API”</a> for more details on the Selectors API and the <code class="literal">querySelector</code> and <code class="literal">querySelectorAll</code> methods.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="get_element_attributes">
<div class="titlepage"><div><div><h2 class="title">Get Element Attributes</h2></div></div></div>
<div class="sect2" id="problems-id00434">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_acc_id4">You want to access the information contained in an element attribute.</p>
</div>
<div class="sect2" id="solution-id00435">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_getattr">Use the <code class="literal">getAttribute</code> method, passing in the attribute name:</p>
<pre class="screen" id="input_typete_id1">&lt;input type="text" value="test" id="textId" /&gt;

...

var type = elem.getAttribute("type"); // text
var value = elem.getAttribute("value"); // test
var id = elem.getAttribute("id"); // textID</pre>
</div>
<div class="sect2" id="discussion-id00436">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="when_elements_a">When elements are defined in various HTML specifications, such as HTML5, they’re given a set of shared and/or unique attributes. Many of these attributes are then converted into object properties, which can be accessed in JavaScript directly:</p>
<pre class="screen" id="var_id__elemi">var id = elem.id;</pre>
<p id="some_of_the_pro">Some of the properties are given derived names, such as <code class="literal">className</code> for <code class="literal">class</code>. Nonstandard attributes that don’t have a property equivalent have to be accessed using the <code class="literal">getAttribute</code> method:</p>
<pre class="screen" id="var_role__elem">var role = elem.getAttribute("data-index");</pre>
<p id="since_the_getat">Since the <code class="literal">getAttribute</code> method works equally well with standard and nonstandard attributes, and doesn’t require knowing what the derived attribute name is, you should, in most cases, use <code class="literal">getAttribute</code> to access all attribute values.</p>
<p id="if_the_attribut_id1">If the attribute doesn’t exist, the method returns a value of null or the empty string (<code class="literal">""</code>). You can check to see if an attribute exists first, by using the <code class="literal">hasAttribute</code> method:</p>
<pre class="screen" id="if_elemhasatt">if (elem.hasAttribute(role)) {
  var role = elem.getAttribute("role");
   ...
}</pre>
<p id="using_hasattrib">Using <code class="literal">hasAttribute</code> bypasses the problem that can occur when different user agents return different values (empty string or null) when an attribute doesn’t exist.</p>
<p id="i_mentioned_abo">I mentioned about using <code class="literal">getAttribute</code> in most cases. What about the times when you don’t want to use the method?</p>
<p id="the_getattribut">The <code class="literal">getAttribute</code> method works with attributes that are set in the element, but you’ll still need to directly access element properties when the element property and the element attribute aren’t guaranteed to have the same value. A good example is a check box, and the <code class="literal">checked</code> property:</p>
<pre class="screen" id="input_typech_id1">&lt;input type="checkbox" id="test" checked /&gt;

...

var attrChecked = document.getElementById("test").getAttribute("checked"); // empty string

var checked = document.getElementById("test").checked; // true or false</pre>
<p id="the_checked_att">The <code class="literal">checked</code> attribute value and the <code class="literal">checked</code> property value differ. They are not <span class="emphasis"><em>synchronized</em></span>.</p>
<p id="if_the_check_bo">If the check box is checked programatically using <code class="literal">setAttribute</code> (the method used to set an attribute value), then <code class="literal">getAttribute</code> works as expected:</p>
<pre class="screen" id="input_typech_id2">&lt;input type="checkbox" id="test" /&gt;

...

var checkbox = document.getElementById('test');
checkbox.setAttribute('checked', false);

...
var checked = checkbox.getAttribute('checked'); // returns false;</pre>
<p id="if_you_set_the_">If you set the check box using <code class="literal">setAttribute</code> but then manually check (or uncheck) the check box, <code class="literal">getAttribute</code> reflects the <code class="literal">setAttribute</code> setting, not the actual state of the checkbox. The <code class="literal">checked</code> <span class="emphasis"><em><code class="literal">property</code></em></span> does match the <code class="literal">checked</code> attribute—not unexpected when the attribute and property are not synchronized.</p>
<p id="to_make_things_">To make things even more twisty, some attributes and properties are synchronized, but only in one direction. A good example of this is the text <code class="literal">input</code> element.If the value is set in the element, it’s available from both the <code class="literal">value</code> property and <code class="literal">getAttribute</code>:</p>
<pre class="screen" id="input_typete_id2">&lt;input type="text" id="test2" value="some value" /&gt;
...

var text = document.getElementById("test2");

var textValue = text.value; // some value
var textValue2 = text.getAttribute("value"); // some value</pre>
<p id="if_the_text_inp">If the text <code class="literal">input</code> value is changed using <code class="literal">setAttribute</code>, both the <code class="literal">value</code> and <code class="literal">getAttribute</code> reflect the change—this is that one way synchronization I mentioned earlier:</p>
<pre class="screen" id="input_typete_id3">&lt;input type="text" id="test2" value="some value" /&gt;
...

var text = document.getElementById("test2");
text.setAttribute("other value");
...

var textValue = text.value; // other value
var textValue2 = text.getAttribute("value"); // other value</pre>
<p id="however_if_the">However, if the text value is changed manually or by setting the <code class="literal">value</code> property, the new value is not reflected when accessed using <code class="literal">getAttribute</code>:</p>
<pre class="screen" id="input_typete_id4">&lt;input type="text" id="test2" value="some value" /&gt;
...

var text = document.getElementById("test2");
text.value = "other value";
...

var textValue = text.value; // other value
var textValue2 = text.getAttribute("value"); // some value</pre>
<p id="synchronization">Synchronization flows from attribute to property, but not from property back to attribute.</p>
<p id="how_can_you_kno">How can you know when to use which method? A good rule of thumb is to use <code class="literal">getAttribute</code> with any standardized attribute that is set programatically, rather than modified by the user.</p>
<div class="sidebar online_only" id="try_it_now_id52">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ehifoj/3/"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="inserting_elements_before_existing_page">
<div class="titlepage"><div><div><h2 class="title">Inserting Elements Before Existing Page Elements</h2></div></div></div>
<div class="sect2" id="problem-id00447">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_need_to_add">You need to add a new <code class="literal">div</code> element to the web page before an existing <code class="literal">div</code> element.</p>
</div>
<div class="sect2" id="solution-id00448">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_the_dom_met">Use the DOM method <code class="literal">createElement</code> to create a new <code class="literal">div</code> element. Once created, attach it to the web page before an existing element, using another DOM method, <code class="literal">insertBefore</code>:</p>
<pre class="screen" id="get_the_exis">// get the existing element
var refElement = document.getElementById("sister");

// get the element's parent node
var parent = refElement.parentNode;

// create new div element
var newDiv = document.createElement("div");

// attach to page before sister element
parent.insertBefore(newDiv, refElement);</pre>
</div>
<div class="sect2" id="discussion-id00449">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="adding_a_web_pa">Adding a web page element is uncomplicated, as long as you keep in mind the tree-like structure of the web page. If you’re interested in attaching a web page element before another element, you’ll not only need to access this element, but also the target element’s parent element, in order to create the actual placement.</p>
<p id="the_reason_you_">The reason you need the parent element is that there is no functionality to insert an element before another, given just the target element. Instead, you have to access the target element’s parent element, and use the <code class="literal">insertBefore</code> method with the parent.</p>
<p id="in__the_soluti">In <a class="xref" href="ch04.html#inserting_a_div_element_into_a_web_page" title="Example 4-3. Inserting a div element into a web page">Example 4-3</a>, the solution for this recipe is embedded into a web page that originally consists only of one named <code class="literal">div</code> element and a button. When the button is pushed, a new sister <code class="literal">div</code> element is created and inserted into the document before the existing <code class="literal">div</code> element.</p>
<div class="example" id="inserting_a_div_element_into_a_web_page">
<div class="example-title">Example 4-3. Inserting a div element into a web page</div>
<div class="example-contents"><pre class="screen" id="doctype_html_id9">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;object detection&lt;/title&gt;
&lt;script&gt;

function addDiv() {

  // get parent
  var sister = document.getElementById("sister");
  var parent = sister.parentNode;

  // create new div
  var newDiv = document.createElement("div");
  newDiv.innerHTML = "&lt;p&gt;I'm here, I'm in the page&lt;/p&gt;";

  // add to page
  parent.insertBefore(newDiv,sister);
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;button type="button" onclick="addDiv()"&gt;Add div&lt;/button&gt;

  &lt;div id="sister"&gt;Existing div element&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div>
</div>
<div class="sidebar online_only" id="try_is_now">
<div class="titlepage"><div><div><div class="sidebar-title">Try is now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/aqehop/1/"> </iframe></div>
</div>
<p id="in_the_example_id4">In the example, the target <code class="literal">div</code> element is accessed using <code class="literal">getElementById</code>, and then parent is accessed with the <code class="literal">parentNode</code> property. Once you have a reference to both the parent and the existing element, all you need to do is create the new <code class="literal">div</code> element and insert it.</p>
<p id="to_create_the_n">To create the new <code class="literal">div</code> element, use the <code class="literal">document.createElement</code> method, passing in the type of element—in this case, <code class="literal">div</code>. Since the current document is an HTML document, the <code class="literal">createElement</code> method creates a new <code class="literal">HTMLElement</code>, which inherits all functionality of the more generic <code class="literal">Element</code> class, as well as additional methods and properties. The new element is given some content through the <code class="literal">innerHTML</code> property. At this point, you can also assign one or more attribute values using <code class="literal">setAttribute</code>. The new element is then added to the web page with <code class="literal">insertBefore</code>.</p>
<p id="each_successive">Each successive click of the original <code class="literal">div</code> element prepends a new <code class="literal">div</code> element to the original, each with the same class and content.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="inserting_a_new_paragraph">
<div class="titlepage"><div><div><h2 class="title">Inserting a New Paragraph</h2></div></div></div>
<div class="sect2" id="problem-id00459">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_ins_id2">You want to insert a new paragraph just before the third paragraph within a <code class="literal">div</code> element.</p>
</div>
<div class="sect2" id="solution-id00460">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_some_method">Use some method to access the third paragraph, such as <code class="literal">getElementsByTagName</code>, to get all of the paragraphs for a <code class="literal">div</code> element. Then use the <code class="literal">createElement</code> and <code class="literal">insertBefore</code> DOM methods to add the new paragraph just before the existing third paragraph:</p>
<pre class="screen" id="get_the_targ">// get the target div
var div = document.getElementById("target");

// retrieve a collection of  paragraphs
var paras = div.getElementsByTagName("p");

// if a third para exists, insert the new element before
// otherwise, append the paragraph to the end of the div
var newPara = document.createElement("p");
newPara.textContent = "No, I'm the third paragraph";

if (paras[2]) {
   div.insertBefore(newPara, paras[2]);
} else {
   div.appendChild(newPara);
}</pre>
<div class="sidebar online_only" id="try_it_now_id53">
<div class="titlepage"><div><div><div class="sidebar-title">Try it Now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/ilalib/1/"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id00461">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_documentcr">The <code class="literal">document.createElement</code> method creates any HTML element, which then can be assigned other elements or data and appended or inserted into the page. In the solution, the new paragraph element is inserted before an existing paragraph using the <code class="literal">insertBefore</code> method.</p>
<p id="since_were_int">Since we’re interested in inserting the new paragraph before the existing third paragraph, we need to retrieve a collection of the <code class="literal">div</code> element’s paragraphs, check to make sure a third paragraph exists, and then use the <code class="literal">insertBefore</code> method to insert the new paragraph before the old. If the third paragraph doesn’t exist, we can append the element to the end of the <code class="literal">div</code> element using the <code class="literal">appendChild</code> method instead.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="adding_text_to_a_new_paragraph">
<div class="titlepage"><div><div><h2 class="title">Adding Text to a New Paragraph using createTextNode</h2></div></div></div>
<div class="sect2" id="problem-id00463">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_cre_id6">You want to create a new paragraph with text and insert it just before the second paragraph within a <code class="literal">div</code> element.</p>
</div>
<div class="sect2" id="_solution">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="you_can_use_the_id1">You can use the <code class="literal">textContent</code> approach demonstrated in the last recipe, but you can also create the text node directly and add text to the paragraph with <code class="literal">createTextNode</code>:</p>
<pre class="screen" id="use_geteleme">// use getElementById to access the div element
var div = document.getElementById("target");

// use getElementsByTagName and the collection index
// to access the second paragraph
var oldPara = div.getElementsByTagName("p")[1]; // zero based index

// create a text node
var txt =
 document.createTextNode("The new paragraph will contain this text");

// create a new paragraph
var para = document.createElement("p");

// append the text to the paragraph, and insert the new para
para.appendChild(txt);
div.insertBefore(para, oldPara);</pre>
</div>
<div class="sect2" id="discussion-id00464">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_text_within">The text within an element is itself an object within the DOM. Its type is a <code class="literal">Text</code> node, and it is created using a specialized method, <code class="literal">createTextNode</code>. The method takes one parameter: the string containing the text.</p>
<p id="shows_a_web_pag"><a class="xref" href="ch04.html#demonstrating_various_methods_for_adding" title="Example 4-4. Demonstrating various methods for adding content to a web page">Example 4-4</a> shows a web page with a <code class="literal">div</code> element containing four paragraphs. The JavaScript that runs after the page loads creates a new paragraph from text provided by the user via a prompt window.</p>
<p id="the_provided_te">The provided text is used to create a text node, which is then appended as a child node to the new paragraph. The <code class="literal">paragraph</code> element is inserted in the web page before the first paragraph.</p>
<div class="example" id="demonstrating_various_methods_for_adding">
<div class="example-title">Example 4-4. Demonstrating various methods for adding content to a web page</div>
<div class="example-contents"><pre class="screen" id="doctype_html_id10">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Recipe&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;button type="button" onclick="addPara()"&gt;Add paragraph&lt;/button&gt;

  &lt;div id="target"&gt;
  &lt;p&gt;
    There is a language 'little known,'&lt;br /&gt;
    Lovers claim it as their own.
  &lt;/p&gt;
  &lt;p&gt;
    Its symbols smile upon the land, &lt;br /&gt;
    Wrought by nature's wondrous hand;
  &lt;/p&gt;
  &lt;p&gt;
    And in their silent beauty speak,&lt;br /&gt;
    Of life and joy, to those who seek.
  &lt;/p&gt;
  &lt;p&gt;
    For Love Divine and sunny hours &lt;br /&gt;
    In the language of the flowers.
  &lt;/p&gt;
&lt;/div&gt;
&lt;script&gt;
function addPara() {

// use getElementById to access the div element
   var div = document.getElementById("target");

   // get paragraph text
   var txt = prompt("Enter new paragraph text","");

   // use getElementsByTagName and the collection index
   // to access the first paragraph

   var oldPara = div.getElementsByTagName("p")[1]; //zero based index

   // create a text node
   var txtNode = document.createTextNode(txt);

   // create a new paragraph
   var para = document.createElement("p");

   // append the text to the paragraph, and insert the new para
   para.appendChild(txtNode);

   div.insertBefore(para, oldPara);
}
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></div>
</div>
<div class="sidebar online_only" id="try_it_now_id54">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/uzitam/1/"> </iframe></div>
</div>
<p id="why_use_createt">Why use <code class="literal">createTextNode</code> rather than the simpler <code class="literal">textContent</code>? One reason is you’re adding more than one element, such as two text nodes with a break element between them, matching the existing text within the example. The <code class="literal">textContent</code> property treats any embedded HTML (or script or style setting) as nothing more than text: it doesn’t process the text (making it a whole lot safer to work with if you’re accessing text from users).</p>
<p id="you_could_use_i">You could use <code class="literal">innerHTML</code> instead of creating a text node, and the former will process the embedded markup. However, this isn’t a safe approach if you’re grabbing text from the user because the script kiddies have all our numbers. A good demonstration of the vulnerability of using <code class="literal">innerHTML</code> is the following:</p>
<pre class="screen" id="parainnerhtml">para.innerHTML="&lt;img src=x onerror=alert(1)&gt;"; // guess what happens?</pre>
<p id="no_a_better_ap">No, a better approach is to build the content in such a way that nothing creepy can crawl in. To match the structure of the existing paragraphs, the application  accepts as input two text strings, creates two text nodes and a break element, and appends all three to the paragraph:</p>
<pre class="screen" id="create_two_t">// create two text nodes
   var txtNode = document.createTextNode(txt);
   var txtNode2 = document.createTextNode(txt2);

   // create &lt;br&gt;
   var br = document.createElement("br");

   // create a new paragraph
   var para = document.createElement("p");

   // append the text and break to the paragraph
   para.appendChild(txtNode); // notice order
   para.appendChild(br);
   para.appendChild(txtNode2);

   // insert new paragraph
   div.insertBefore(para, oldPara);</pre>
<p id="a_little_more_w">A little more work, but safer. Much safer.</p>
<div class="sidebar online_only" id="try_it_now_id55">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="let_your_inner_">Let your inner poet run loose.</p>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/uzitam/2/"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-4.asciidoc" id="adding_attributes_to_an_existing_element">
<div class="titlepage"><div><div><h2 class="title">Adding Attributes to an Existing Element</h2></div></div></div>
<div class="sect2" id="problem-id00466">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_add_id1">You want to add one or more attributes to an existing element.</p>
</div>
<div class="sect2" id="solution-id00467">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="you_can_use_the_id2">You can use the <code class="literal">createAttribute</code> method to create an <code class="literal">Attr</code> node, set its value using the <code class="literal">nodeValue</code> property, and then use <code class="literal">setAttribute</code> to add to an element:</p>
<pre class="screen" id="var_someelement">var someElement = document.getElement("elem");
var newAttr = document.createAttribute("newAttribute");
newAttr.nodeValue = "testvalue";
someElement.setAttribute(newAttr);</pre>
<p id="or_you_can_set_">or you can set the value directly with <code class="literal">setAttribute</code>, passing in the attribute name and value:</p>
<pre class="screen" id="someelementset_id1">someElement.setAttribute("newAttribute","testvalue");</pre>
</div>
<div class="sect2" id="discussion-id00468">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="you_can_add_any">You can add any number of attributes to a document element using either <code class="literal">createAttribute</code> and <code class="literal">setAttribute</code>, or <code class="literal">setAttribute</code> directly. Both approaches are equally efficient, so unless there’s a real need, you’ll most likely want to use the simpler approach of setting the attribute name and value directly in <code class="literal">setAttribute</code>.</p>
<p id="when_would_you_">When would you need to use <code class="literal">createAttribute</code>? If the attribute value is going to be another entity reference, as is allowable with XML, you’ll need to use the <code class="literal">createAttribute</code> to create an <code class="literal">Attr</code> node, as <code class="literal">setAttribute</code> will only support simple strings.</p>
<p id="you_can_also_us_id2">You can also use <code class="literal">setAttribute</code> to modify the value for an existing attribute, such as the <code class="literal">id</code> or <code class="literal">class</code> attributes:</p>
<pre class="screen" id="someelementset_id2">someElement.setAttribute("id", "newId");</pre>
<p id="if_the_attribut_id2">If the attribute already exists, assigning a value to the attribute directly or using <code class="literal">setAttribute</code> modifies the attribute’s value.</p>
<div class="sidebar online_only" id="try_it_now_id56">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<p id="heres_your_cha">Here’s your chance to be creative. Modify the HTML, CSS, or JavaScript to create whatever effects you want to create using <code class="literal">setAttribute</code>, only.</p>
<div class="interactive"><iframe style="width: 100%; height: 300px;" src="http://jsbin.com/idefuc/1/embed?live,html,javascript,css"> </iframe></div>
</div>
</div>
</div></section><section class="chapter" data-original-filename="Chapter-5.asciidoc" id="creating_interactive_canvas_svg_apps"><div class="titlepage"><div><div><h1 class="title">Chapter 5. Creating Interactive Canvas and SVG Applications</h1></div></div></div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="introduction-id51">
<div class="titlepage"><div><div><h2 class="title">Introduction</h2></div></div></div>
<p id="the_web_is_a_ri">The Web is a richer place, indeed, with the new and improved innovations ready to use. Our old friends SVG and Canvas are getting new life and generating new interest. JavaScript and CSS provide a malleable palette in which to paint web pages, but the HTML5 <code class="literal">svg</code> and <code class="literal">canvas</code> elements provide the capability to take those pages into new and exciting territory.</p>
<p id="svg_or_scalabl">SVG, or Scalable Vector Graphics, is an XML-based vector graphics language that can be used to create scalable vector graphics within web pages. With HTML5, you can insert the SVG directly in the web page via the <code class="literal">svg</code> element.</p>
<p id="svg_is_not_depe_id1">SVG is not dependent on JavaScript. You can create graphical images using markup, and even animate them using CSS transitions or declarative animation via SMIL (Synchronized Multimedia Integration Language). However, as will be demonstrated in this chapter, the <code class="literal">svg</code> element and JavaScript can be used to create any number of dynamic and interactive effects.</p>
<p id="the_canvas_elem_id1">The <code class="literal">canvas</code> element originated with Apple, and has now become standardized as part of the HTML5 work. Unlike SVG, the <code class="literal">canvas</code> element is totally dependent on JavaScript. We add <code class="literal">canvas</code> elements into our page and then use a context API in order to draw into these elements.</p>
<div class="note" id="the_svg_and_can_id1"><p id="the_svg_and_can_id2">The <code class="literal">svg</code> and <code class="literal">canvas</code> elements are now implemented, in varying degrees, in all of this book’s target browsers and environments.</p></div>
<p id="all_of_the_exam" class="online_only">All of the examples in this chapter are implemented with JS Bin, which means you can test the actual code, not just read about. All JS Bin output is represented by a rectangle about the graphical interface area; most provide input controls for adding data or performing some action.</p>
<div class="sect2" id="see_also-id51">
<div class="titlepage"><div><div><h3 class="title">See Also</h3></div></div></div>
<p id="the_canvas_elem_id2">The <code class="literal">canvas</code> element is documented in the HTML5 specification at <a class="ulink" href="http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#the-canvas-element" target="_top">HTML5 Canvas spec</a>. The current working draft for the Canvas 2D Context can be found at <a class="ulink" href="http://www.w3.org/html/wg/drafts/2dcontext/html5_canvas/" target="_top">W3C Canvas 2D Context Spec</a>. Keep up with current work on SVG at <a class="ulink" href="http://www.w3.org/Graphics/SVG/" target="_top">SVG spec</a>.</p>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="_creating_a_simple_rectangle_in_a_canvas_element">
<div class="titlepage"><div><div><h2 class="title">Creating a Simple Rectangle in a Canvas Element</h2></div></div></div>
<div class="sect2" id="problem-id51">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_add_id2">You want to add a <code class="literal">canvas</code> element to a web page, and then create a simple rectangle within the element.</p>
</div>
<div class="sect2" id="solution-id51">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="insert_a_canvas_id1">Insert a <code class="literal">canvas</code> element into the web page:</p>
<pre class="screen" id="canvas_width_id1">&lt;canvas width="300" height="300" id="imgcanvas"
style="border: 1px solid black; background-color: white"&gt;
&lt;p&gt;A single rectangle, red with a black border,
sized 100x100 pixels, in upper left corner.&lt;/p&gt;
&lt;/canvas&gt;</pre>
<p id="then_use_the_ca_id1">Then use the Canvas 2D context to draw the rectangle within the <code class="literal">canvas</code> element’s coordinate system:</p>
<pre class="screen" id="var_canvas__do_id1">var canvas = document.getElementById("imgcanvas");

// if canvas element successfully accessed
if (canvas.getContext) {

   // get 2D context
   var ctx = canvas.getContext('2d');

   // ensure area is clear
   ctx.clearRect(0,0,canvas.width, canvas.height);

   // set circle fill and outline colors
   ctx.fillStyle="rgb(255,0,0)";
   ctx.strokeStyle="#000000";

   // fill and outline rectangle
   ctx.fillRect(0,0,100,100);
   ctx.strokeRect(0,0,100,100);

 }</pre>
<p id="the_result_is_a_id1">The result is a simple red square with a black outline and white background, positioned with its left, top edge at the left, top corner of the larger <code class="literal">canvas</code> element.</p>
<div class="sidebar online_only" id="try_it_now_id57">
<div class="titlepage"><div><div><div class="sidebar-title">Try it Now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 390px;" src="http://jsbin.com/omotem/1/"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id51">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_canvas_elem_id3">The <code class="literal">canvas</code> element is inserted into the web page in the location you want the canvas drawing to exist. If you wish, you can provide CSS styling for the element. In the solution, I outlined the canvas element in black to make the container visible. By default, the background of the <code class="literal">canvas</code> area is transparent.</p>
<p id="set_the_width_a">Set the width and height of the <code class="literal">canvas</code> element using the <code class="literal">width</code> and <code class="literal">height</code> attributes. You can also, as shown in the solution, provide fallback content—in this case, a paragraph describing what’s being drawn within the <code class="literal">canvas</code> element.</p>
<p id="the_area_of_the">The area of the <code class="literal">canvas</code> element is a resolution-dependent bitmap. If scripting is enabled, the content reflects the JavaScript function calls drawing into the <code class="literal">canvas</code> element. If the page is printed, the <code class="literal">canvas</code> area reflects the state of the element’s bitmap at the time of the printing. If scripting is disabled, the fallback content of the element is displayed.</p>
<p id="to_draw_into_th">To draw into the <code class="literal">canvas</code> element you first have to get the <code class="literal">canvas</code> element’s context. To access the element’s 2D context, specify <code class="literal">2d</code> when calling the <code class="literal">canvas</code> element’s <code class="literal">getContext()</code> method. To access the element’s 3D context, specify <code class="literal">3d</code>, though be aware that there is limited support for 3D at this time</p>
<p id="before_you_begi">Before you begin drawing, test to see if the <code class="literal">canvas</code> element is supported by checking to see if the <code class="literal">getContext</code> method is available. If it is, access the canvas context:</p>
<pre class="screen" id="var_canvas__do_id2">var canvas = document.getElementById("imgcanvas");

// if canvas element successfully accessed
if (canvas.getContext) {

   // get 2D context
   var ctx = canvas.getContext('2d');

   ...

 }</pre>
<p id="the_d_context_">The 2D Context API has one basic predefined shape, the rectangle. It also has three rectangle methods:</p>
<div class="variablelist" id="fillrect_uses_t"><dl class="variablelist">
<dt><span class="term">
<code class="literal">fillRect</code>
</span></dt>
<dd>
Uses the currently set <code class="literal">fillStyle</code> value to fill the rectangle
</dd>
<dt><span class="term">
<code class="literal">strokeRect</code>
</span></dt>
<dd>
Uses the currently set <code class="literal">strokeStyle</code> value to outline the rectangle
</dd>
<dt><span class="term">
<code class="literal">clearRect</code>
</span></dt>
<dd>
Clears whatever is drawn within the rectangle area
</dd>
</dl></div>
<p id="in_the_solution_id6">In the Solution, the first method called is <code class="literal">clearRect</code>, which clears the area of any previously drawn graphics, but without resetting any previously set styles or transformations. If the <code class="literal">canvas</code> element is drawn into only once, it’s not necessary to use <code class="literal">clearRect</code> because the <code class="literal">canvas</code> area is already clear. However, if your JavaScript is interactive, and the <code class="literal">canvas</code> area is drawn into again and again, any new drawing overlaps the existing drawing.</p>
<p id="to_demonstrate">To demonstrate, modify the code to enclose the JavaScript that draws the box, and remove the call to <code class="literal">clearRect</code>. In addition, change the code to use variables to hold the rectangle origin parameters, and then adjust the values each time the function is called. Lastly, call <code class="literal">setTimeout</code> to call the function multiple times to create an animation effect of a red square moving diagonally across and down the page:</p>
<pre class="screen" id="x___y___f">x = 0;
y = 0;

function drawBox() {
  var canvas =    document.getElementById("imgcanvas");

  // if canvas element successfully accessed
  if (canvas.getContext) {

     // get 2D context
     var ctx = canvas.getContext('2d');

     // set rectangle fill and outline colors
     ctx.fillStyle="rgb(255,0,0)";
     ctx.strokeStyle="#000000";

     // fill and outline rectangle
     ctx.fillRect(x,y,20,20);
     ctx.strokeRect(x,y,20,20);

   }
  x+=20;
  y+=20;

  // animate
  if (x &lt; 300) {
    setTimeout(drawBox, 200);
  }</pre>
<p id="add_a_button_to">Add a button to call the newly created function when clicked:</p>
<pre class="screen" id="button_typeb">&lt;button type="button" onclick="drawBox()"&gt;
    Run Example&lt;/button&gt;</pre>
<p id="contrary_to_wha">Contrary to what you might expect, clicking on the button doesn’t <span class="emphasis"><em>move</em></span> the box down and over on the page—it replicates it, with each succeeding box placed just to the right and bottom of the previous.</p>
<div class="sidebar online_only" id="try_it_now_id58">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/ujokal/2/"> </iframe></div>
</div>
<p id="adding_a_call_t">Adding a call to <code class="literal">clearRect</code> ensures a clean canvas area, regardless of how we change the JavaScript at a later time.</p>
<pre class="screen" id="function_drawbo">function drawBox() {
  var canvas =    document.getElementById("imgcanvas");

  // if canvas element successfully accessed
  if (canvas.getContext) {

     // get 2D context
     var ctx = canvas.getContext('2d');

     // clear the space
     ctx.clearRect(0,0,canvas.width, canvas.height);

     // set rectangle fill and outline colors
     ctx.fillStyle="rgb(255,0,0)";
     ctx.strokeStyle="#000000";

     // fill and outline rectangle
     ctx.fillRect(x,y,20,20);
     ctx.strokeRect(x,y,20,20);

   }
  x+=20;
  y+=20;

  // animate
  if (x &lt; 300) {
    setTimeout(drawBox, 200);
  }
}</pre>
<p id="and_now_we_have">And now we have a moving box, rather than a replicated box.</p>
<div class="sidebar online_only" id="try_it_now_id59">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/elomuc/4/"> </iframe></div>
</div>
<p id="speaking_of_mov">Speaking of moving the rectangle, it’s important to understand the <code class="literal">canvas</code> element’s coordinate system before you begin drawing.</p>
<p id="the_canvas_elem_id4">The <code class="literal">canvas</code> element’s coordinate system is a two-dimensional grid. A coordinate of 0,0 is at the top, left corner of the element’s area. If <span class="emphasis"><em>x</em></span> represents the horizontal position, and <span class="emphasis"><em>y</em></span> the vertical, increasing the value of x moves the origin down the page, while increasing the value of y moves the origin to the right.</p>
<p id="consider_the_so">Consider the solution. Both the <code class="literal">fillRect</code> and <code class="literal">strokeRect</code> methods take the rectangle origin (x,y) in the first two parameters, and the width and height in the third and fourth parameters, respectively. In the solution, the calls to both methods set the top, left corner of the box at 0,0 and the width and height at 100.</p>
<p id="to_reposition_t">To reposition the rectangle, change the first two parameters. To increase the width of the rectangle towards the right, increase the width parameter. However, to move the border of the rectangle to the left, you an specify a negative value for the width. The same apples to the height: an increasing positive value expands the rectangle to the bottom; using an increasing negative value expands the rectangle to the top of the <code class="literal">canvas</code> space.</p>
<p id="if_you_dont_us">If you don’t use numeric values, no error is given; the values are ignored, and the rectangle isn’t drawn.</p>
<p id="test_the_forgiv" class="online_only">Test the forgiving nature of the Canvas methods, first by providing valid numeric values, then nonsensical non-numeric values. If you have your JavaScript console open, you won’t see any errors.</p>
<div class="sidebar online_only" id="try_it_now_id60">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 550px;" src="http://jsbin.com/ijixit/1/"> </iframe></div>
</div>
<p id="of_course_its">Of course, it’s also important to ensure that the rectangle is colored the way you want. There’s two different components when it comes to the rectangle’s color—the rectangle’s fill color and the color of the outline—and you need to set both if you’re planning on using both.</p>
<p id="to_set_the_fill">To set the fill color, call the <code class="literal">fillStyle</code> method, passing in a CSS color, a <code class="literal">CanvasGradient</code>, or a <code class="literal">CanvasPattern</code>. The latter two are more advanced than we want to examine in this introduction, so we’ll just focus on the CSS color:</p>
<pre class="screen" id="ctxfillstyle_id1">ctx.fillStyle="rgb(255,0,0); // solid color red
ctx.fillStyle="rgba(255,0,0,.5); // incorporating transparency
ctx.fillStyle="black";
ctx.fillStyle="#00cc00"; // darker green</pre>
<p id="the_strokestyle">The <code class="literal">strokeStyle</code> is used to define the style for the lines outlining the shape. It also takes a CSS color, <code class="literal">CanvasGradient</code>, or <code class="literal">CanvasPattern</code>:</p>
<pre class="screen" id="ctxstrokestyle">ctx.strokeStyle="rgb(0,0,0); // black outline
ctx.strokeStyle="red";
ctx.strokeStyle="rgba(0,0,255,.1); // faint blue outline
ctx.strokeStyle="#ff00ff"; // magenta</pre>
<p id="as_with_the_ori">As with the origin and width and height parameters, a
nonsensical value is ignored. Not providing a correct
<code class="literal">strokeStyle</code> or <code class="literal">fillStyle</code> value causes the <code class="literal">canvas</code> element to revert to the default, which is black for both.</p>
<p id="the_following_e_id2" class="online_only">The following example takes both a <code class="literal">fillStyle</code> and a
<code class="literal">strokeStyle</code> color. Click the "Edit in jsBin" to modify the example to also take a <code class="literal">lineWidth</code> value, to change the width of the outline.</p>
<div class="sidebar online_only" id="try_it_now_id61">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 480px;" src="http://jsbin.com/ujager/1/"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="manip-simple-rect-svg">
<div class="titlepage"><div><div><h2 class="title">Manipulating a Simple Rectangle in SVG</h2></div></div></div>
<div class="sect2" id="problem-id53">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_be_">You want to be able to directly access a rectangle drawn in SVG and embedded in an HTML5 document and modify its properties.</p>
</div>
<div class="sect2" id="solution-id53">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="you_can_provide">You can provide an identifier for an SVG element as easily as you provide one for any other element in an HTML5 document.</p>
<pre class="screen" id="svg_width_id1">&lt;svg width="300" height="300"
style="border: 1px solid black; background-color: white" id="svgelem"&gt;
  &lt;rect id="rect1" x="0" y="0" width="50"
  height="100" fill="green" stroke="black" /&gt;
&lt;/svg&gt;</pre>
<p id="in_javascript__id2">In JavaScript, access the <code class="literal">rect</code> element directly using <code class="literal">document.getElementById()</code> method and set the element’s attributes however you wish using the DOM (Document Object Model) method <code class="literal">setAttribute</code>.</p>
<p id="the_following_c">The following code snippet:</p>
<pre class="screen" id="var_rect__docu">var rect = document.getElementById('rect1');

rect.setAttribute('width',100);
rect.setAttribute('fill', 'red');</pre>
<p id="results_in_a_sq">Results in a square, red box with a black outline, fitted to the upper, left corner of the <code class="literal">svg</code> element.</p>
<div class="sidebar online_only" id="try_it_now_id62">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/abowod/2/"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id53">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="svg_is_not_depe_id2">SVG is not dependent on JavaScript. If you want a red box in a <code class="literal">svg</code> element within an HTML5 web page, you just create it directly using XML, and the box is drawn as long as the browser supports the <code class="literal">svg</code> element.</p>
<p id="you_can_howeve">You can, however, use JavaScript to create, remove, or manipulate the contents of the SVG element, just as you can create, remove, or manipulate other elements in the page.</p>
<p id="in_the_solution_id7">In the solution, two attributes for the SVG <code class="literal">rect</code> element are modified: <code class="literal">fill</code> and <code class="literal">width</code>. The code uses the <code class="literal">setAttribute</code> to make the changes. This method takes an attribute name and a new value, and changes the attribute on an existing element. Any of the attributes for the element can be modified, including the following attributes specific to the <code class="literal">rect</code> element:</p>
<div class="itemizedlist" id="x_the_xaxis_c_id1"><ul class="itemizedlist">
<li class="listitem">
<code class="literal">x</code>: The x-axis coordinate representing the leftmost corner of the rectangle
</li>
<li class="listitem">
<code class="literal">y</code>: The y-axis coordinate representing the topmost corner of the rectangle
</li>
<li class="listitem">
<code class="literal">width</code>: The width of the rectangle
</li>
<li class="listitem">
<code class="literal">height</code>: The height of the rectangle
</li>
<li class="listitem">
<code class="literal">rx</code>: The x-axis radius of the ellipse used to round the corners of the rectangle
</li>
<li class="listitem">
<code class="literal">ry</code>: The y-axis radius of the ellipse used to round the corners of the rectangle
</li>
</ul></div>
<p id="the_latter_two_">The latter two attributes, <code class="literal">rx</code> and <code class="literal">ry</code> are interesting. SVG supports rounded rectangle corners. If neither attribute is specified, then the corners are squared off, as shown in the solution. If only one of the values is provided, the other is assumed to be equal to the one provided. And if the value set for either is wider than half the width of the rectangle, it’s automatically reset to half the width, no more. In other words, the rectangle is transformed into an ellipse (or a circle if the width and height are the same).</p>
<p id="there_is_limite">There is limited error checking for the attribute. If you set a non-existing attribute, nothing negative happens. No error is thrown. However, if you provide a nonsensical value for an existing attribute, such as providing a value of <span class="emphasis"><em>cat</em></span> for <code class="literal">rx</code>, you will get an error.</p>
<p id="take_the_follow" class="online_only">Take the following SVG example for a spin, providing both valid and invalid values for the parameters. Open your JavaScript console to see the resulting errors if you provide nonsensical values for existing attributes. You’ll also notice the changes are cumulative.</p>
<div class="sidebar online_only" id="try_it_now_id63">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 450px;" src="http://jsbin.com/osisuc/2/"> </iframe></div>
</div>
<p id="one_perk_with_u">One perk with using SVG over Canvas is you can animate a SVG object directly, rather than having to repaint the <code class="literal">canvas</code> area. For instance, to re-create the animated box example demonstrated with Canvas earlier, animating the same box in SVG could be accomplished with the following JavaScript:</p>
<pre class="screen" id="x___y__">x = 20;
y = 20;

function moveBox() {
  var box =    document.getElementById("rect1");

  box.setAttribute("x",x);
  box.setAttribute("y",y);

  x+=20;
  y+=20;

  // animate
  if (x &lt; 300) {
    setTimeout(moveBox, 200);
  }
}</pre>
<p id="were_accessing">We’re accessing and moving an element, not repainting the entire bitmap.</p>
<div class="sidebar online_only" id="try_it_now_id64">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/axafar/1/"> </iframe></div>
</div>
<p id="another_major_d">Another major difference between Canvas and SVG is SVG is resolution independent. What this means is that where a bitmap image created by Canvas degrades if the image is sized larger (resulting in a <span class="emphasis"><em>pixelated</em></span> image), the SVG image won’t. Resolution independence has always been the advantage of vector graphics: they resize from the very small to the very large without loss of quality.</p>
<p id="the_coordinate_">The coordinate system for the <code class="literal">svg</code> element is the same as the coordinate system for the <code class="literal">canvas</code> element: the origin of 0,0 is the topmost, left corner of the element’s grid, with increasing values of <span class="emphasis"><em>x</em></span> moving down, and increasing values of <span class="emphasis"><em>y</em></span> moving right. In SVG, this coordinate system is known as the <span class="emphasis"><em>viewport</em></span>.</p>
<p id="svg_does_howev">SVG does, however, provide a way to map a user defined coordinate system on to the viewport. For instance, the following JavaScript would increase the width and height of the square to 400 pixels each, which would size the square outside of the <code class="literal">svg</code> element’s visible area.</p>
<pre class="screen" id="function_expand_id1">function expandSquare() {
  var rect = document.getElementById("rect1");

  rect.setAttribute("width",400);
  rect.setAttribute("height", 400);
}</pre>
<p id="i_made_the_outl">I made the outline larger by setting <code class="literal">stroke-width</code> to 10 so you can see how the lower bottom and far right of the rectangle are clipped by the <code class="literal">svg</code> element border when the rectangle is expanded.</p>
<div class="sidebar online_only" id="try_it_now_id65">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/osalep/2/"> </iframe></div>
</div>
<p id="however_if_i_i">However, if I incorporate a user coordinate system that maps two units of measurement onto every unit of the coordinate system, the rectangle would fit into the given space. The way to do this is to use the <code class="literal">svg</code> element <code class="literal">viewBox</code> attribute.</p>
<p id="the_viewbox_att">The <code class="literal">viewBox</code> attribute is a set of values—min-x, min-y, width, and height—separated by commas or white space, which specifies a rectangle in the user space that is mapped to the viewport. In this case, we want to ensure all of the rectangle is visible when we expand its size, so we set the <code class="literal">viewBox</code> attribute on the <code class="literal">svg</code> element to a value of <span class="strong"><strong><code class="literal">0,0,600,600</code></strong></span>, making the space more than sufficient to display the entire rectangle.</p>
<pre class="screen" id="function_expand_id2">function expandSquare() {
  var svgelement = document.getElementById("svgelem");

  svgelement.setAttribute("viewBox", "0,0,600,600");

  var rect = document.getElementById("rect1");

  rect.setAttribute("width",400);
  rect.setAttribute("height", 400);
}</pre>
<p id="now_the_entire">Now, the entire rectangle fits into the <code class="literal">svg</code> element, without having to change the rectangle’s dimensions. The use of a <code class="literal">viewBox</code> is typically how you make an SVG image fit into an element within your page or application, even if the dimensions of the elements within the SVG exceed the space you want to provide. This ability is especially important when you’re using SVG you’ve found elsewhere.</p>
<p id="test_out_the_vi" class="online_only">Test out the <code class="literal">viewBox</code> capability more fully by trying out different combinations of min-x, min-y, width, and height of the <code class="literal">svg</code> element.</p>
<div class="sidebar online_only" id="try_it_now_id66">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 500px;" src="http://jsbin.com/olasav/1/"> </iframe></div>
</div>
<div class="note" id="speaking_of_fin_id1"><p id="speaking_of_fin_id2">Speaking of finding SVG to copy elsewhere, a great resource for open source SVG is the <a class="ulink" href="http://openclipart.org/" target="_top">OpenClipArt web site</a>. You can copy the SVG markup directly and use as is or modify for your own purposes.</p></div>
<p id="another_interes">Another interesting aspect of SVG is the ability to manipulate the _aspect ratio_—the ratio of width to height—when you’re using a <code class="literal">viewBox</code>. In the previous example, I used a 1:1 ratio when I added the <code class="literal">viewBox</code>. In the following code snippet, though, the aspect ratio is no longer a 1:1 between width and height—the aspect ratio has changed to 3:4. So what happens to the square?</p>
<pre class="screen" id="svg_width_id2">&lt;svg width="300" height="300"
  viewBox="0,0,600,800"
  style="border: 1px solid black"&gt;
    &lt;rect id="rect1" x="30" y="30"
    width="400" height="400"
    fill="red" stroke="yellow"
    stroke-width="10" /&gt;
  &lt;/svg&gt;</pre>
<p id="absolutely_noth">Absolutely nothing. The square is still a square.</p>
<div class="interactive"><iframe style="width: 100%; height: 350px;" src="http://jsbin.com/awilez/1"> </iframe></div>
<p id="the_reason_why__id3">The reason why the square didn’t suddenly become an elongated rectangle is because of another important SVG attribute, <code class="literal">preserveAspectRatio</code>. The <code class="literal">preserveAspectRatio</code> controls what happens to the aspect ratio of the SVG element contents. Using it, you can decide if you want to preserve the aspect ratio, and if so, in what way.</p>
<p id="there_are_vario">There are various values you can use with preserveAspectRatio. They consist of one or two parameters, the first of which is the <span class="emphasis"><em>align</em></span> parameter:</p>
<div class="itemizedlist" id="none__do_not_f_id1"><ul class="itemizedlist">
<li class="listitem">
<code class="literal">none</code> - Do not force uniform scaling. Scale the graphic content of the given element non-uniformly if necessary such that the element’s bounding box exactly matches the viewport rectangle. (Note: if &lt;align&gt; is none, then the optional &lt;meetOrSlice&gt; value is ignored.)
</li>
<li class="listitem">
<code class="literal">xMinYMin</code> - Force uniform scaling. Align the &lt;min-x&gt; of the element’s ‘viewBox’ with the smallest X value of the viewport.Align the &lt;min-y&gt; of the element’s ‘viewBox’ with the smallest Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMidYMin</code> - Force uniform scaling. Align the midpoint X value of the element’s ‘viewBox’ with the midpoint X value of the viewport.
Align the &lt;min-y&gt; of the element’s ‘viewBox’ with the smallest Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMaxYMin</code> - Force uniform scaling. Align the &lt;min-x&gt;+&lt;width&gt; of the element’s ‘viewBox’ with the maximum X value of the viewport. Align the &lt;min-y&gt; of the element’s ‘viewBox’ with the smallest Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMinYMid</code> - Force uniform scaling. Align the &lt;min-x&gt; of the element’s ‘viewBox’ with the smallest X value of the viewport. Align the midpoint Y value of the element’s ‘viewBox’ with the midpoint Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMidYMid</code> (the default) - Force uniform scaling. Align the midpoint X value of the element’s ‘viewBox’ with the midpoint X value of the viewport.Align the midpoint Y value of the element’s ‘viewBox’ with the midpoint Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMaxYMid</code> - Force uniform scaling. Align the &lt;min-x&gt;+&lt;width&gt; of the element’s ‘viewBox’ with the maximum X value of the viewport.Align the midpoint Y value of the element’s ‘viewBox’ with the midpoint Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMinYMax</code> - Force uniform scaling. Align the &lt;min-x&gt; of the element’s ‘viewBox’ with the smallest X value of the viewport. Align the &lt;min-y&gt;+&lt;height&gt; of the element’s ‘viewBox’ with the maximum Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMidYMax</code> - Force uniform scaling. Align the midpoint X value of the element’s ‘viewBox’ with the midpoint X value of the viewport. Align the &lt;min-y&gt;+&lt;height&gt; of the element’s ‘viewBox’ with the maximum Y value of the viewport.
</li>
<li class="listitem">
<code class="literal">xMaxYMax</code> - Force uniform scaling. Align the &lt;min-x&gt;+&lt;width&gt; of the element’s ‘viewBox’ with the maximum X value of the viewport. Align the &lt;min-y&gt;+&lt;height&gt; of the element’s ‘viewBox’ with the maximum Y value of the viewport.
</li>
</ul></div>
<p id="an_optional_sec">An optional second parameter, the <span class="emphasis"><em>meetOrSlice</em></span> parameter, can also be specified for <code class="literal">preserveAspectRatio</code>. It’s separated from the align parameter by one or more spaces, and has one of two values:</p>
<div class="itemizedlist" id="meet_the_defau_id1"><ul class="itemizedlist">
<li class="listitem">
<code class="literal">meet</code> (the default) - Scale the graphic such that: aspect ratio is preserved the entire ‘viewBox’ is visible within the viewport the ‘viewBox’ is scaled up as much as possible, while still meeting the other criteria. In this case, if the aspect ratio of the graphic does not match the viewport, some of the viewport will extend beyond the bounds of the ‘viewBox’ (i.e., the area into which the ‘viewBox’ will draw will be smaller than the viewport).
</li>
<li class="listitem">
<code class="literal">slice</code> - Scale the graphic such that: aspect ratio is preserved the entire viewport is covered by the ‘viewBox’ the ‘viewBox’ is scaled down as much as possible, while still meeting the other criteria. In this case, if the aspect ratio of the ‘viewBox’ does not match the viewport, some of the ‘viewBox’ will extend beyond the bounds of the viewport (i.e., the area into which the ‘viewBox’ will draw is larger than the viewport).
</li>
</ul></div>
<p id="when_no_preserv">When no <code class="literal">preserveAspectRatio</code> is provided, a default value of <code class="literal">xMidYMid meet</code> is used. The result of this default value is that the aspect ratio is enforced, the midpoint x, y value of the <code class="literal">viewBox</code> is aligned with the midpoint x,y value of the viewport, all of the <code class="literal">viewBox</code> is visible in the viewport and is scaled as large as possible while still maintaining the same aspect ratio.</p>
<p id="what_all_this_m">What all this means is that the <code class="literal">preserveAspectRatio</code> default value preserves the image aspect ratio in as large and non-disruptive manner as possible.</p>
<p id="most_of_the_tim">Most of the time, the default will suit your needs. However, sometimes you may want your image to scale to fit the viewport completely, or you’re not as concerned about maintaining the aspect ratio. That’s when you’re going to need to try out different <code class="literal">preserveAspectRatio</code> values to find the one that suits your needs.</p>
<p id="to_see_what_hap">To see what happens with various <code class="literal">preserveAspectRatio</code> settings, I created an application that allows the user to select an <span class="emphasis"><em>align</em></span> parameter, and then one of the <span class="emphasis"><em>meetOrSlice</em></span> values. Both are concatenated and used to modify the SVG element. In addition, the <code class="literal">preserveAspectRatio</code> setting used is printed beneath the SVG, for verification purposes.</p>
<p id="the_control_ele">The control elements for the demonstration:</p>
<pre class="screen" id="select_idali">&lt;select id="align"&gt;
  &lt;option value="none"&gt;none&lt;/option&gt;
  &lt;option value="xMinYMin"&gt;xMinYMin&lt;/option&gt;
  &lt;option value="xMidYMin"&gt;xMidYMin&lt;/option&gt;
  &lt;option value="xMaxYMin"&gt;xMaxYMin&lt;/option&gt;
  &lt;option value="xMinYYMid"&gt;xMinYMid&lt;/option&gt;
  &lt;option value="xMidYMid"&gt;xMidYMid&lt;/option&gt;
  &lt;option value="xMaxYMid"&gt;xMaxYMid&lt;/option&gt;
  &lt;option value="xMinYMax"&gt;xMinYMax&lt;/option&gt;
  &lt;option value="xMidYMax"&gt;xMidYMax&lt;/option&gt;
  &lt;option value="xMaxYMax"&gt;xMaxYMax&lt;/option&gt;&lt;/select&gt;
  &lt;br /&gt;

&lt;input type="radio" name="meetOrSlice"
value="meet"&gt;meet&lt;br&gt;
&lt;input type="radio" name="meetOrSlice"
value="slice"&gt;slice&lt;br /&gt;

&lt;button type="button"
  onclick="changeAspect()"&gt;Run Example&lt;/button&gt;</pre>
<p id="the_controlling">The controlling JavaScript:</p>
<pre class="screen" id="function_change">function changeAspect() {

 var mtslice="";
 var align=document.getElementById("align");
 var alignVal = align.options[align.selectedIndex].value;

 if (alignVal != "none") {

     var meetOrSlice =
       document.getElementsByName("meetOrSlice");

    for (var i = 0; i &lt; meetOrSlice.length; i++) {
      if (meetOrSlice[i].checked) {
         mtslice=meetOrSlice[i].value;
         break;
      }
    }

  }

 var preserve = alignVal + " " + mtslice;

 document.getElementById("svgelem").
 setAttribute("preserveAspectRatio",preserve);

 document.getElementById("preserve").innerHTML=
   "&lt;p&gt;Aspect setting: " + preserve + "&lt;/p&gt;";

}</pre>
<p id="finally_the_sv">Finally, the <code class="literal">svg</code> element and the <code class="literal">div</code> element for holding the text of the aspect ratio setting:</p>
<pre class="screen" id="svg_idsvgele_id1">&lt;svg id="svgelem" width="300" height="300"
  viewBox="0,0,600,1200"
  preserveAspectRatio="xMaxYMax meet"
  style="border: 1px solid black; background-color: white"&gt;
    &lt;rect id="rect1" x="30" y="30" width="400"
    height="400" fill="red" stroke="yellow"
    stroke-width="10" /&gt;
&lt;/svg&gt;
&lt;div id="preserve"&gt;&lt;/div&gt;</pre>
<p id="putting_it_alto">Putting it altogether, you can try out the different aspect ratio settings until you get a good idea of how it all fits together.</p>
<p id="start_with_sele" class="online_only">Start with selecting <span class="emphasis"><em>none</em></span> first, to see what the figure looks like when the aspect ratio is <span class="emphasis"><em>not</em></span> preserved.</p>
<div class="sidebar online_only" id="try_it_now_id67">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 550px;" src="http://jsbin.com/equvip/4/"> </iframe></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="insert-circle-canvas">
<div class="titlepage"><div><div><h2 class="title">Inserting a Circle Using Canvas</h2></div></div></div>
<div class="sect2" id="problem-id54">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_cre_id7">You want to create an arbitrarily sized and placed circle in a web page using the <code class="literal">canvas</code> element.</p>
</div>
<div class="sect2" id="solution-id54">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="insert_a_canvas_id2">Insert a <code class="literal">canvas</code> element into the web page:</p>
<pre class="screen" id="canvas_width_id2">&lt;canvas width="300" height="300" id="imgcanvas"
style="border: 1px solid black; background-color: white"&gt;
&lt;p&gt;A simple rectangle&lt;/p&gt;
&lt;/canvas&gt;</pre>
<p id="then_use_the_ca_id2">Then use the Canvas 2D Context to create the circle shape:</p>
<pre class="screen" id="var_canvas__do_id3">var canvas = document.getElementById("imgcanvas");

// if canvas element successfully accessed
if (canvas.getContext) {

   // get 2D context
   var ctx = canvas.getContext('2d');

   // set circle fill and outline colors
   ctx.fillStyle="rgb(255,0,0)";
   ctx.strokeStyle="#000000";

   // begin path
   ctx.beginPath();

   // draw circle
   ctx.arc(150,150,150,0,Math.PI*2,true);

   // close path
   ctx.closePath();

   // fill and outline
   ctx.fill();
   ctx.stroke();

 }</pre>
<div class="sidebar online_only" id="try_it_now_id68">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 400px;" src="http://jsbin.com/jscookbook/11/"> </iframe></div>
</div>
</div>
<div class="sect2" id="discussion-id54">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="the_canvas_d_c">The <code class="literal">canvas</code> 2d context only supports a built-in rectangle shape. Any other shape is going to require the use of a Canvas <span class="emphasis"><em>path</em></span>.</p>
<p id="a_canvas_path_b">A Canvas path begins and ends with <code class="literal">beginPath()</code> and <code class="literal">endPath()</code>. The actual makeup of the path is drawn with various <code class="literal">canvas</code> context methods, but in this example, we’re focusing only on one, <code class="literal">arc()</code>.</p>
<p id="the_arc_metho">The <code class="literal">arc()</code> method can be used to draw a circle, or parts of the circumference of a circle. It takes, as parameters, an x, y value representing the center of a circle, the radius, the starting angle, ending angle, and a boolean indicating whether to draw the circle in a clockwise direction (<span class="strong"><strong><code class="literal">false</code></strong></span>), or anticlockwise direction (<span class="strong"><strong><code class="literal">true</code></strong></span>).</p>
<p id="to_create_a_cir">To create a circle, use zero (0) as a beginning angle, and <span class="strong"><strong><code class="literal">Math.PI*2</code></strong></span>. as the ending angle. Specify whatever radius and origin suits your needs.</p>
<pre class="screen" id="ctxbeginpath">ctx.beginPath();
ctx.arc(x,y,radius,0,Math.PI*2,true);
ctx.closePath();</pre>
<p id="once_the_path_i">Once the path is defined, it needs to be drawn. You can outline the circle using the <code class="literal">stroke()</code> method, and fill an enclosed path with <code class="literal">fill()</code>. The following JavaScript:</p>
<pre class="screen" id="ctxfillstyle_id2">ctx.fillStyle="rgb(255,0,0)";
ctx.strokeStyle="#000000";

ctx.beginPath();

ctx.arc(x,y,radius,0,Math.PI*2,true);

ctx.closePath();

ctx.fill();
ctx.stroke();</pre>
<p id="creates_a_red_c">Creates a red circle with black border centered in the <code class="literal">canvas</code> element’s space.</p>
<p id="to_get_a_better_id1" class="online_only">To get a better idea of how <code class="literal">arc()</code> works, modify the y and y coordinate of the origin and the arc radius in the following example to see what the impact each has on the finished drawing. Note that any part of the circle that does not fit into the <code class="literal">canvas</code> element is visibly clipped at the element’s borders.</p>
<div class="sidebar online_only" id="try_it_now_id69">
<div class="titlepage"><div><div><div class="sidebar-title">Try it Now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 550px;" src="http://jsbin.com/iyiwex/1/"> </iframe></div>
</div>
<div class="tip" id="canvas_and_accessibility">
<h3 class="title">Canvas and Accessibility</h3>
<p id="its_important_">It’s important to provide fallback content not only if JavaScript is not enabled, but also for accessibility purposes.</p>
<p id="current_work_is">Current work is underway with the W3C to provide more in-depth accessibility information with the <code class="literal">canvas</code> element. Until implemented, though, you shouldn’t use the <code class="literal">canvas</code> element for important information (unless you provide a fallback), or for site navigation or other critical site use.</p>
</div>
</div>
</div>
<div class="sect1" data-original-filename="Chapter-5.asciidoc" id="creating-svg-circle">
<div class="titlepage"><div><div><h2 class="title">Creating a Circle in SVG</h2></div></div></div>
<div class="sect2" id="problem-id55">
<div class="titlepage"><div><div><h3 class="title">Problem</h3></div></div></div>
<p id="you_want_to_dyn">You want to dynamically create an arbitrarily sized circle in a web page using SVG, rather than statically creating the circle.</p>
</div>
<div class="sect2" id="solution-id55">
<div class="titlepage"><div><div><h3 class="title">Solution</h3></div></div></div>
<p id="use_documentcr">Use <code class="literal">document.createElementNS()</code> to create the new circle, <code class="literal">setAttribute()</code> to set each attribute you want to set, and then <code class="literal">appendChild()</code> to add the newly created circle to the existing <code class="literal">svg</code> element in the web page.</p>
<pre class="screen" id="var_svgelem__d">var svgelem = document.getElementById('svgelem');

// create circle
// note use of namespace
var circle =
  document.createElementNS("http://www.w3.org/2000/svg", "circle");

circle.setAttribute("cx", 150);
circle.setAttribute("cy", 150);
circle.setAttribute("r",  150);
circle.setAttribute("fill", "red");
circle.setAttribute("stroke", "black");

svgelem.appendChild(circle);</pre>
</div>
<div class="sect2" id="discussion-id55">
<div class="titlepage"><div><div><h3 class="title">Discussion</h3></div></div></div>
<p id="creating_a_circ">Creating a circle in SVG is no different than creating a <code class="literal">div</code> element with text, or rows in an HTML table. You create the new element, you assign values to its attributes, and then you append the new element to an existing web page element.</p>
<p id="the_one_differe">The one difference, and it is significant, is that with <code class="literal">svg</code>, you have to use the namespace version of the DOM methods to create the internal SVG elements, as only the <code class="literal">svg</code> element is within the HTML5 namespace—not the SVG elements, themselves.</p>
<pre class="screen" id="var_circle__do">var circle =
  document.createElementNS("http://www.w3.org/2000/svg", "circle");</pre>
<p id="once_youve_cre">Once you’ve created the new element, then you can use the non-namespace specific DOM methods to finish up your task. You can assign values to its attributes using <code class="literal">setAttribute()</code>:</p>
<pre class="screen" id="circlesetattri">circle.setAttribute("cy", 150);</pre>
<p id="you_can_append_">You can append the new element to its parent element with <code class="literal">appendChild()</code>:</p>
<pre class="screen" id="svgelemappendc">svgelem.appendChild(circle);</pre>
<p id="the_result_is_a_id2">The result is a red circle with black border identical in appearance to the one created using Canvas, earlier in this chapter.</p>
<div class="interactive"><iframe style="width: 100%; height: 350px;" src="http://jsbin.com/agugot/4"> </iframe></div>
<p id="to_get_a_better_id2">To get a better idea of how creating circles works, create an application that takes parameters for circles and adds them to the same <code class="literal">svg</code> element. Each circle overlaps earlier circles, as they are added to the web page.</p>
<p id="the_input_contr">The input controls:</p>
<pre class="screen" id="labelcx_la">&lt;label&gt;cx: &lt;/label&gt;&lt;input type="text" value="150" id="cx" /&gt;
&lt;br /&gt;
&lt;label&gt;cy: &lt;/label&gt;&lt;input type="text" value="150" id="cy" /&gt;
&lt;br /&gt;
&lt;label&gt;radius: &lt;/label&gt;&lt;input type="text" value="150" id="r" /&gt;
&lt;br /&gt;
&lt;label&gt;fill: &lt;/label&gt;&lt;input type="text" value="red" id="fill" /&gt;
&lt;br /&gt;
&lt;label&gt;stroke: &lt;/label&gt;&lt;input type="text" value="black"
id="stroke" /&gt;
&lt;br /&gt;
&lt;button type="button" onclick="drawCircle()"&gt;Run Example&lt;/button&gt;</pre>
<p id="the_parent_svg_">The parent <code class="literal">svg</code> element:</p>
<pre class="screen" id="svg_idsvgele_id2">&lt;svg id="svgelem" width="300" height="300"
  style="border: 1px solid black; background-color: white"&gt;
  &lt;/svg&gt;</pre>
<p id="and_the_javascr">And the JavaScript that controls it all:</p>
<pre class="screen" id="function_drawci">function drawCircle() {

  var svgelem = document.getElementById('svgelem');

  // get attributes
  var cx = document.getElementById('cx').value;
  var cy = document.getElementById('cy').value;
  var r = document.getElementById('r').value;
  var fill = document.getElementById('fill').value;
  var stroke = document.getElementById('stroke').value;

  // create circle
  // note use of namespace
  var circle =
  document.createElementNS("http://www.w3.org/2000/svg", "circle");

  circle.setAttribute('cx', cx);
  circle.setAttribute('cy', cy);
  circle.setAttribute('r',  r);
  circle.setAttribute('fill', fill);
  circle.setAttribute('stroke', stroke);

  svgelem.appendChild(circle);
}</pre>
<p id="there_is_no_way">There is no way to clear the display space in SVG as there is with Canvas. Canvas is a bitmap environment, while SVG is vector-based. The only way to clear the <code class="literal">svg</code> element space would be to remove all existing element using the DOM.</p>
<p id="try_differing_s" class="online_only">Try differing sizes of circles, positioned all throughout the <code class="literal">svg</code> element space to see how the new elements overlap.</p>
<div class="sidebar online_only" id="try_it_now_id70">
<div class="titlepage"><div><div><div class="sidebar-title">Try it now!</div></div></div></div>
<div class="interactive"><iframe style="width: 100%; height: 550px;" src="http://jsbin.com/acujob/1/"> </iframe></div>
</div>
<p id="of_course_an_a">Of course, an advantage to SVG being vector-based, not bitmap, is that it’s very easy to animate individual components of the SVG space (demonstrated earlier), as well as attach events to each element. The only way to catch events for Canvas <span class="emphasis"><em>elements</em></span>, such as capturing mouse clicks for a Canvas circle, is to capture the mouse click for the <code class="literal">canvas</code> element, and extrapolate its position relative to whatever objects are in the work space.</p>
<div class="note" id="microsoft_was_l_id1"><p id="microsoft_was_l_id2">Microsoft was late to the game when it comes to both Canvas and SVG, but has been making up for lost time. One of the better discussions on the relative advantages to each graphics approach—Canvas or SVG—can be found at the IEBlog, in an article titled <a class="ulink" href="http://blogs.msdn.com/b/ie/archive/2011/04/22/thoughts-on-when-to-use-canvas-and-svg.aspx" target="_top">Thoughts on when to use Canvas and SVG</a>.</p></div>
</div>
</div></section>