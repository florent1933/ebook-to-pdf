<section class="chapter" data-original-filename="ch01.xml" id="twitter"><div class="titlepage"><div><div><h1 class="title">Chapter 1. Mining Twitter: Exploring Trending Topics, Discovering What People
  Are Talking About, and More</h1></div></div></div>
<p id="this_chapter_ki">This chapter kicks off our journey of mining the social web with
  Twitter, a rich source of social data that is a great starting point for
  social web mining because of its inherent openness for public consumption,
  clean and well-documented API, rich developer tooling, and broad appeal to
  users from every walk of life. Twitter data is particularly interesting
  because tweets happen at the "speed of thought" and are available for
  consumption as they happen in near real time, represent the broadest
  cross-section of society at an international level, and are so inherently
  multifaceted. Tweets and Twitter's "following" <a id="id520014" class="indexterm"></a>mechanism link people in a variety of ways, ranging from short
  (but often meaningful) conversational dialogues to interest graphs that
  connect people and the things that they care about.</p>
<p id="since_this_is_t">Since this is the first chapter, we'll take our time acclimating to
  our journey in social web mining. However, given that Twitter data is so
  accessible and open to public scrutiny, <a class="xref" href="">???</a>
  further elaborates on the broad number of data mining possibilities by
  providing a terse collection of recipes in a convenient problem/solution
  format that can be easily manipulated and readily applied to a wide range of
  problems. You'll also be able to apply concepts from future chapters to
  Twitter data.</p>
<div class="note" id="always_get_the__id1"><p id="always_get_the__id2">Always get the latest bug-fixed source code for this chapter (and
    every other chapter) online at <a class="ulink" href="http://bit.ly/MiningTheSocialWeb2E" target="_top">http://bit.ly/MiningTheSocialWeb2E</a>.
    Be sure to also take advantage of this book's virtual machine experience,
    as described in <a class="xref" href="">???</a>, to maximize your enjoyment of the
    sample code.</p></div>
<div class="sect1" data-original-filename="ch01.xml" id="overview">
<div class="titlepage"><div><div><h2 class="title">Overview</h2></div></div></div>
<p id="in_this_chapter">In this chapter, we'll ease into the process of getting situated
    with a minimal (but effective) development environment with Python, survey
    Twitter's API, and distill some analytical insights from tweets using
    frequency analysis. Topics that you'll learn about in this chapter
    include:</p>
<div class="itemizedlist" id="twitters_devel_id1"><ul class="itemizedlist">
<li class="listitem"><p id="twitters_devel_id2">Twitter's developer platform and how to make API requests</p></li>
<li class="listitem"><p id="tweet_metadata_">Tweet metadata and how to use it</p></li>
<li class="listitem"><p id="extracting_enti">Extracting entities such as user mentions, hashtags, and URLs
        from tweets</p></li>
<li class="listitem"><p id="techniques_for_">Techniques for performing frequency analysis with Python</p></li>
<li class="listitem"><p id="plotting_histog">Plotting histograms of Twitter data with IPython Notebook</p></li>
</ul></div>
</div>
<div class="sect1" data-original-filename="ch01.xml" id="social-websites-rage">
<div class="titlepage"><div><div><h2 class="title">Why Is Twitter All the Rage?</h2></div></div></div>
<p id="most_chapters_t">Most chapters <a id="tw1.2" class="indexterm"></a>won't open with a reflective discussion, but since this is
    the first chapter of the book and introduces a social website that is
    often misunderstood, it seems appropriate to take a moment to examine
    Twitter at a fundamental level.</p>
<p id="how_would_you_d">How would you define Twitter?</p>
<p id="there_are_many_">There are many ways to answer this question, but let's consider it
    from an overarching angle that addresses some fundamental aspects of our
    shared humanity that any technology needs to account for in order to be
    useful and successful. After all, the purpose of technology is to enhance
    our human experience.</p>
<p id="as_humans_what">As humans, what are some things that we want that technology might
    help us to get?</p>
<div class="itemizedlist" id="we_want_to_be_h_id1"><ul class="itemizedlist">
<li class="listitem"><p id="we_want_to_be_h_id2">We want to be heard.</p></li>
<li class="listitem"><p id="we_want_to_sati">We want to satisfy our curiosity.</p></li>
<li class="listitem"><p id="we_want_it_easy">We want it easy.</p></li>
<li class="listitem"><p id="we_want_it_now">We want it now.</p></li>
</ul></div>
<p id="in_the_context_">In the context of the current discussion, these are just a few
    observations that are generally true of humanity. We have a deeply rooted
    need to share our ideas and experiences, which gives us the ability to
    connect with other people, to be heard, and to feel a sense of worth and
    importance. We are curious about the world around us and how to organize
    and manipulate it, and we use communication to share our observations, ask
    questions, and engage with other people in meaningful dialogues about our
    quandaries.</p>
<p id="the_last_two_bu">The last two bullet points highlight our inherent intolerance to
    friction. Ideally, we don't want to have to work any harder than is
    absolutely necessary to satisfy our curiosity or get any particular job
    done; we'd rather be doing "something else" or moving on to the next thing
    because our time on this planet is so precious and short. Along similar
    lines, we want things <span class="emphasis"><em>now</em></span> and tend to be impatient
    when actual progress doesn't happen at the speed of our own
    thought.</p>
<p id="one_way_to_desc">One way to describe Twitter is as a microblogging service that
    allows people to communicate with short, 140-character messages that
    roughly correspond to thoughts or ideas. In that regard, you could think
    of Twitter as being akin to a free, high-speed, global text-messaging
    service. In other words, it's a glorified piece of valuable infrastructure
    that enables rapid and easy communication. However, that’s not all of the
    story. It doesn't adequately address our inherent curiosity and the value
    proposition that emerges when you have over <a class="ulink" href="http://bit.ly/1a1kNXR" target="_top">500 million curious people registered, with
    over 100 million of them actively engaging</a> their curiosity on a
    regular monthly basis.</p>
<p id="besides_the_mac">Besides the macro-level possibilities for marketing and
    advertising—which are always lucrative with a user base of that size—it's
    the underlying network dynamics that created the gravity for such a user
    base to emerge that are truly interesting, and that's why Twitter is all
    the rage. While the communication bus that enables users to share short
    quips at the speed of thought may be a <span class="emphasis"><em>necessary</em></span>
    condition for viral adoption and sustained engagement on the Twitter
    platform, it's not a <span class="emphasis"><em>sufficient</em></span> condition. The extra
    ingredient that makes it sufficient is that Twitter's asymmetric
    <a id="id485912" class="indexterm"></a>following model satisfies our curiosity. It is the
    asymmetric following model that casts Twitter as more of an interest graph
    than a social network, and the APIs that provide just enough of a
    framework for structure and self-organizing behavior to emerge from the
    chaos.</p>
<p id="in_other_words">In other words, whereas some social websites like Facebook and
    LinkedIn require the mutual acceptance of a connection between users
    (which usually implies a real-world connection of some kind), Twitter's
    relationship model allows you to keep up with the latest happenings of
    <span class="emphasis"><em>any</em></span> other user, even though that other user may not
    choose to follow you back or even know that you exist. Twitter's
    <span class="emphasis"><em>following</em></span> model is simple but exploits a fundamental
    aspect of what makes us human: our curiosity. Whether it be an infatuation
    with celebrity gossip, an urge to keep up with a favorite sports team, a
    keen interest in a particular political topic, or a desire to connect with
    someone new, Twitter provides you with boundless opportunities to satisfy
    your curiosity.</p>
<div class="warning" id="although_ive_b_id1"><p id="although_ive_b_id2">Although I've been careful in the preceding paragraph to introduce
      Twitter in terms of "following" relationships, the act of
      <span class="emphasis"><em>following</em></span> someone is sometimes <a id="id486230" class="indexterm"></a>described as "friending" (albeit it's a strange kind of
      one-way friendship). While you'll even run across the <a class="ulink" href="http://bit.ly/1a1kOuI" target="_top">"friend" nomenclature in the official
      Twitter API documentation</a>, it's probably best to think of
      Twitter in terms of the following relationships I've described.</p></div>
<p id="think_of_an_int">Think of an <span class="emphasis"><em>interest graph</em></span> as a way of modeling
    connections between people and their arbitrary interests. Interest graphs
    provide a profound number of possibilities in the data mining realm that
    primarily involve measuring correlations between things for the objective
    of making intelligent recommendations and other applications in machine
    learning. For example, you could use an interest graph to measure
    correlations and make recommendations ranging from whom to follow on
    Twitter to what to purchase online to whom you should date. To illustrate
    the notion of Twitter as an interest graph, consider that a Twitter user
    need not be a real person; it very well could be a person, but it could
    also be an inanimate object, a company, a musical group, an imaginary
    persona, an impersonation of someone (living or dead), or just about
    anything else.</p>
<p id="for_example_th">For example, the <a class="ulink" href="http://bit.ly/1a1kQD1" target="_top">@HomerJSimpson</a> account is the official
    account for Homer Simpson, a popular character from <span class="emphasis"><em>The
    Simpsons</em></span> television show. Although Homer Simpson isn't a real
    person, he's a well-known personality throughout the world, and the
    @HomerJSimpson Twitter persona acts as an conduit for him (or his
    creators, actually) to engage his fans. Likewise, although this book will
    probably never reach the popularity of Homer Simpson, <a class="ulink" href="http://bit.ly/1a1kHzq" target="_top">@SocialWebMining</a> is its official
    Twitter account and provides a means for a community that's interested in
    its content to connect and engage on various levels. When you realize that
    Twitter enables you to create, connect, and explore a community of
    interest for an arbitrary topic of interest, the power of Twitter and the
    insights you can gain from mining its data become much more
    obvious.</p>
<p id="there_is_very_l">There is very little governance of what a <a id="id485563" class="indexterm"></a>Twitter account can be aside from the badges on some
    accounts that identify celebrities and public figures as "verified
    accounts" and basic restrictions in Twitter's <a class="ulink" href="http://bit.ly/1a1kRXl" target="_top">Terms of Service agreement</a>, which is
    required for using the service. It may seem very subtle, but it's an
    important distinction from some social websites in which accounts must
    correspond to real, living people, businesses, or entities of a similar
    nature that fit into a particular taxonomy. Twitter places no particular
    restrictions on the persona of an account and relies on self-organizing
    behavior such as following relationships and folksonomies that emerge from
    the use of hashtags to create a certain kind of order within <a id="id485584" class="indexterm"></a>the system.</p>
<div class="sidebar" id="taxonomies_and_folksonomies">
<div class="titlepage"><div><div><div class="sidebar-title">Taxonomies and Folksonomies</div></div></div></div>
<p id="a_fundamental_a">A fundamental aspect of <a id="id531726" class="indexterm"></a>human intelligence is the desire to classify things and
      derive a hierarchy in which each element “belongs to” or is a “child” of
      a parent element one level higher in the hierarchy. Leaving aside some
      of the <a class="ulink" href="http://bit.ly/1a1kRXy" target="_top">finer distinctions between a
      taxonomy and an ontology</a>, think of a
      <span class="emphasis"><em>taxonomy</em></span> as a hierarchical structure like a tree
      that classifies elements into particular parent/child relationships,
      whereas a <a class="ulink" href="http://bit.ly/1a1kU5C" target="_top"><span class="emphasis"><em>folksonomy</em></span> </a> (a
      term <a id="id531754" class="indexterm"></a>coined around 2004) describes the universe of
      collaborative tagging and social indexing efforts that emerge in various
      ecosystems of the Web. It’s a play on words in the sense that it blends
      <span class="emphasis"><em>folk</em></span> and <span class="emphasis"><em>taxonomy</em></span>. So, in
      essence, a folksonomy is just a fancy way of describing the
      decentralized universe of tags that emerges as a <a id="id531772" class="indexterm"></a>mechanism of <span class="emphasis"><em>collective intelligence</em></span>
      when you allow people to classify content with labels. One of the things
      that's so compelling about the use of hashtags on Twitter is that the
      folksonomies that organically emerge act as points of aggregation for
      common interests and provide a focused way to explore while still
      leaving open the possibility for nearly unbounded serendipity.</p>
</div>
</div>
<div class="sect1" data-original-filename="ch01.xml" id="exploring_twitters_api">
<div class="titlepage"><div><div><h2 class="title">Exploring Twitter's API</h2></div></div></div>
<p id="now_having_a_pr">Now having a proper frame of reference for Twitter, let us now
    transition our attention to the problem of acquiring and analyzing Twitter
    data.</p>
<div class="sect2" id="fundamental_twitter_terminology">
<div class="titlepage"><div><div><h3 class="title">Fundamental Twitter Terminology</h3></div></div></div>
<p id="twitter_might_b">Twitter might be <a id="tw1.3.1" class="indexterm"></a><a id="ta1.3.1" class="indexterm"></a>described as a real-time, highly social microblogging
      service that allows users to post short status updates, <a id="twe1.3.1" class="indexterm"></a>called <span class="emphasis"><em>tweets</em></span>, <a id="ti1.3.1" class="indexterm"></a><a id="tt1.3.1" class="indexterm"></a>that appear on timelines. Tweets may include one or more
      entities in their 140 characters of content and reference one or more
      places <a id="id531870" class="indexterm"></a>that map to locations in the real world. An understanding
      of users, tweets, and timelines is particularly essential to effective
      use of <a class="ulink" href="http://bit.ly/1a1kSKQ" target="_top">Twitter's API</a>, so a
      brief introduction to these <a id="tp1.3.1" class="indexterm"></a>fundamental <a class="ulink" href="http://bit.ly/1a1kSL8" target="_top">Twitter
      Platform objects</a> is in order before we interact with the API to
      fetch some data. We've largely discussed Twitter users and Twitter's
      asymmetric following model for relationships thus far, so this section
      briefly introduces tweets and timelines in order to round out a general
      understanding of the Twitter platform.</p>
<p id="tweets_are_the_">Tweets are the essence of Twitter, and while they are notionally
      thought of as the 140 characters of text content associated with a
      user's status update, there's really quite a bit more <a id="id531909" class="indexterm"></a><a id="id531916" class="indexterm"></a>metadata there than meets the eye. In addition to the
      textual content of a tweet itself, tweets come bundled with two
      additional pieces of metadata that are of particular note:
      <span class="emphasis"><em>entities</em></span> and <span class="emphasis"><em>places</em></span>. Tweet
      entities <a id="id531933" class="indexterm"></a>are essentially the <a id="id531941" class="indexterm"></a><a id="id531946" class="indexterm"></a><a id="id531954" class="indexterm"></a>user mentions, hashtags, URLs, and media that may be
      associated with a tweet, and places are locations in the real world that
      may be attached to a tweet. Note that a place may be the actual location
      in which a tweet was authored, but it might also be a reference to the
      place described in a tweet.</p>
<p id="to_make_it_all_">To make it all a bit more concrete, let's consider a sample tweet
      with the following text:</p>
<div class="blockquote"><blockquote class="blockquote"><p id="ptwobrussell_i">@ptwobrussell is writing @SocialWebMining, 2nd Ed. from his home
        office in Franklin, TN. Be #social: http://on.fb.me/16WJAf9</p></blockquote></div>
<p id="the_tweet_is_">The tweet is 124 characters long and contains four tweet entities:
      the user mentions @ptwobrussell and @SocialWebMining, the hashtag
      #social, and the URL <a class="ulink" href="http://on.fb.me/16WJAf9" target="_top">http://on.fb.me/16WJAf9</a>. Although there is a place called
      Franklin, Tennessee that's explicitly mentioned in the tweet, the
      <span class="emphasis"><em>places</em></span> metadata associated with the tweet might
      include the location in which the tweet was authored, which may or may
      not be Franklin, Tennessee. That's a lot of metadata that's packed into
      fewer than 140 characters and illustrates just how potent a short quip
      can be: it can unambiguously refer to multiple other Twitter users, link
      to web pages, and cross-reference topics with hashtags that act as
      points of aggregation and horizontally slice through <a id="id531994" class="indexterm"></a><a id="id532004" class="indexterm"></a><a id="id532011" class="indexterm"></a>the entire Twitterverse in an easily searchable
      fashion.</p>
<p id="finally_timeli">Finally, <span class="emphasis"><em>timelines</em></span> are the chronologically
      sorted collections of tweets. Abstractly, you might say that a timeline
      is any particular collection of tweets displayed in chronological order;
      however, you'll commonly see a couple of timelines that are particularly
      noteworthy. From the perspective of an arbitrary Twitter user, the
      <span class="emphasis"><em>home timeline</em></span> is the <a id="id532034" class="indexterm"></a>view that you see when you log into your account and look
      at all of the tweets from users that you are <a id="id532041" class="indexterm"></a>following, whereas a <a id="id532049" class="indexterm"></a>particular <span class="emphasis"><em>user timeline</em></span> is a
      collection of tweets only from a certain user.</p>
<p id="for_example_wh">For example, when you log into <a id="id532064" class="indexterm"></a>your Twitter account, your home timeline is located at
      <a class="ulink" href="http://bit.ly/1a1kT1v" target="_top">https://twitter.com</a>. The URL for any
      particular user timeline, however, must be suffixed with a context that
      identifies the user, such as <a class="ulink" href="http://bit.ly/1a1kT1E" target="_top">https://twitter.com/SocialWebMining</a>.
      If you're interested in seeing what a particular user's home timeline
      looks like from that user's perspective, you can access it with the
      additional <span class="emphasis"><em>following</em></span> suffix appended to the URL.
      For example, what Tim O'Reilly sees on his home timeline when he logs
      into Twitter is accessible at <a class="ulink" href="http://bit.ly/1a1kV9x" target="_top">https://twitter.com/timoreilly/following</a>.</p>
<p id="an_application_">An application like <a id="id532112" class="indexterm"></a>TweetDeck provides several customizable views into the
      tumultuous landscape of tweets, as shown in <a class="xref" href="ch01.html#tweetdeck" title="Figure 1-1. TweetDeck provides a highly customizable user interface that can be helpful for analyzing what is happening on Twitter and demonstrates the kind of data that you have access to through the Twitter API">Figure 1-1</a>, and is worth trying out if you haven't journeyed
      far beyond the Twitter.com user <a id="id532124" class="indexterm"></a>interface.</p>
<div class="figure" id="tweetdeck">
<div class="figure-contents"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000001583/images/mswb_0101.png" alt="TweetDeck provides a highly customizable user interface that can be helpful for analyzing what is happening on Twitter and demonstrates the kind of data that you have access to through the Twitter API"></div></div>
<div class="figure-title">Figure 1-1. TweetDeck provides a highly customizable user interface that
        can be helpful for analyzing what is happening on Twitter and
        demonstrates the kind of data that you have access to through the
        Twitter API</div>
</div>
<p id="whereas_timelin">Whereas timelines are collections of tweets with relatively low
      velocity, <span class="emphasis"><em>streams</em></span> are samples of public tweets
      flowing through Twitter in realtime. The <span class="emphasis"><em>public
      firehose</em></span><a id="id532160" class="indexterm"></a> of all tweets has been known to <a class="ulink" href="http://bit.ly/1a1kV9N" target="_top">peak at hundreds of thousands of tweets per
      minute</a> during events with particularly wide interest, such as
      presidential debates. Twitter's public firehose emits far too much data
      to consider for the scope of this book and presents interesting
      engineering challenges, which is at least one of the reasons that
      various third-party commercial vendors have partnered with Twitter to
      bring the firehose to the masses in a more consumable fashion. That
      said, <a class="ulink" href="http://bit.ly/1a1kVq7" target="_top">a small random sample of the
      public timeline</a> is available that <a id="id532181" class="indexterm"></a>provides filterable access to enough public data for API
      developers to develop powerful applications.</p>
<p id="the_remainder_o">The remainder of this chapter and Part II of this book assume that
      you have a Twitter account, which is required for API access. If you
      don't have an account already, take a moment to create <a id="id532195" class="indexterm"></a>onem and then review Twitter’s liberal <a class="ulink" href="http://bit.ly/1a1kWKB" target="_top">terms of service</a>, <a class="ulink" href="http://bit.ly/1a1kSKQ" target="_top">API documentation</a>, and <a class="ulink" href="http://bit.ly/1a1kX1a" target="_top">Developer Rules of the Road</a>. The
      sample code for this chapter and Part II of the book generally don't
      require you to have any friends or followers of your own, but some of
      the examples in Part II will be a lot more interesting and fun if you
      have an active account with a handful of friends and followers that you
      can use as a basis for social web mining. If you don't have an active
      account, now would be a good time to get plugged in and start priming
      your account for the data mining fun to <a id="id532224" class="indexterm"></a><a id="id532232" class="indexterm"></a><a id="id532240" class="indexterm"></a><a id="id532248" class="indexterm"></a><a id="id532256" class="indexterm"></a><a id="id532265" class="indexterm"></a><a id="id532273" class="indexterm"></a>come.</p>
</div>
<div class="sect2" id="tinkering-with-twitters-api">
<div class="titlepage"><div><div><h3 class="title">Creating a Twitter API Connection</h3></div></div></div>
<p id="twitter_has_tak">Twitter has taken <a id="tw1.3.2" class="indexterm"></a><a id="ap1.3.2" class="indexterm"></a>great care to craft an elegantly <a id="id532312" class="indexterm"></a>simple <a class="ulink" href="http://bit.ly/1a1kVX5" target="_top">RESTful</a>
      API that is intuitive and easy to use. Even so, there are great
      libraries available to further mitigate the work involved in making API
      requests. A particularly <a id="id532325" class="indexterm"></a>beautiful Python package that wraps the Twitter API and
      mimics the public API semantics almost one-to-one is <code class="literal">twitter</code>. Like most other Python packages, you
      can install it with <code class="literal">pip</code> by <a id="id532344" class="indexterm"></a>typing <strong class="userinput"><code>pip install
      twitter</code></strong> in a terminal.</p>
<div class="note" id="see_for_instruc_id1"><p id="see_for_instruc_id2">See <a class="xref" href="">???</a> for instructions on how to install
        <code class="literal">pip</code>.</p></div>
<div class="sidebar" id="python_tip_harnessing_pydoc_for_effective_help_during_development">
<div class="titlepage"><div><div><div class="sidebar-title">Python Tip: Harnessing pydoc for Effective Help During
        Development</div></div></div></div>
<p id="well_work_thou">We’ll work though some examples that illustrate the use of the
        <code class="literal">twitter</code> package, but just in case
        you're ever in a situation where you need some help (and you will be),
        it's worth remembering that you can always skim the documentation for
        a package (its <a class="ulink" href="http://bit.ly/1a1kVXg" target="_top"><code class="literal">pydoc</code></a>) in a few <a id="id532402" class="indexterm"></a>different ways. Outside of a Python shell, running
        <code class="literal">pydoc</code> in your terminal on a package
        in<a id="id532414" class="indexterm"></a> your <code class="literal">PYTHONPATH</code> is a
        nice option. For example, on a Linux or Mac system, you can simply
        type <strong class="userinput"><code>pydoc twitter</code></strong> in a
        terminal to get the package-level documentation, whereas <strong class="userinput"><code>pydoc twitter.Twitter</code></strong> provides
        documentation on the <code class="code">Twitter</code> class included with that
        package. On Windows systems, you can get the same information, albeit
        in a slightly different way, by executing <code class="literal">pydoc</code> as a package. Typing <strong class="userinput"><code>python -mpydoc twitter.Twitter</code></strong>, for
        example, would provide information on the <code class="literal">twitter.Twitter</code> class. If you find yourself
        reviewing the documentation for certain modules often, you can elect
        to pass the <code class="literal">-w</code> option to
        <code class="code">pydoc</code> and write out an HTML page that you can save and
        bookmark in your browser.</p>
<p id="however_more_t">However, more than likely, you'll be in the middle of a working
        session when you need some help. The <a id="id532474" class="indexterm"></a>built-in <code class="literal">help</code>
        function accepts a package or class name and is useful for an ordinary
        Python shell, whereas <a class="ulink" href="http://bit.ly/1a1kXyf" target="_top">IPython</a> users can suffix a package
        or class name with a question mark to view inline help. For example,
        you could type <strong class="userinput"><code>help(twitter)</code></strong> or
        <strong class="userinput"><code>help(twitter.Twitter)</code></strong> in a
        regular Python interpreter, while you could use the shortcut
        <strong class="userinput"><code>twitter?</code></strong> or <strong class="userinput"><code>twitter.Twitter?</code></strong> in IPython or IPython
        Notebook.</p>
<p id="it_is_highly_re">It is highly recommended that you adopt IPython as your standard
        Python shell when working outside of IPython Notebook because of the
        various convenience functions, such as tab completion, session
        history, and <a class="ulink" href="http://bit.ly/1a1kXyf" target="_top">"magic
        functions,"</a> that it offers. Recall that <a class="xref" href="">???</a> provides minimal details on getting oriented with
        recommended developer tools such as IPython.</p>
</div>
<div class="note" id="well_opt_to_ma_id1"><p id="well_opt_to_ma_id2">We'll opt to make programmatic API requests with Python, because
        the <code class="literal">twitter</code> package so elegantly
        mimics the RESTful API. If you're interested in seeing the raw
        requests that you could make with HTTP or exploring the API in a more
        interactive manner, however, check out the <a class="ulink" href="http://bit.ly/1a1kWui" target="_top">developer console</a> or the
        command-line tool <a class="ulink" href="http://bit.ly/1a1kZq1" target="_top">Twurl</a>.</p></div>
<p id="before_you_can_">Before you can make any API requests to Twitter, you'll need to
      create an application at <a class="ulink" href="http://bit.ly/1a1kYlS" target="_top">https://dev.twitter.com/apps</a>.
      Creating an application is the standard way for developers to gain API
      access and for Twitter to monitor and interact with third-party platform
      developers as needed. The process for creating an application is pretty
      standard, and all that's needed is read-only access to the API.</p>
<p id="in_the_present_">In the present context, <span class="emphasis"><em>you</em></span> are <a id="au1.3.2" class="indexterm"></a>creating an app that you are going to authorize to access
      <span class="emphasis"><em>your</em></span> account data, so this might seem a bit
      roundabout; why not just plug in your username and password to access
      the API? While that approach might work fine for
      <span class="emphasis"><em>you</em></span>, a third party such as a friend or colleague
      probably wouldn't feel comfortable forking over a username/password
      combination in order to enjoy the same insights from
      <span class="emphasis"><em>your</em></span> app. Giving up credentials is never a sound
      practice. Fortunately, some smart people <a id="oa1.3.2" class="indexterm"></a><a id="id532619" class="indexterm"></a>recognized this problem years ago, and now there's a
      standardized protocol called <a class="ulink" href="http://bit.ly/1a1kZWN" target="_top">OAuth</a> (short for Open Authorization)
      that works for these kinds of situations in a generalized way for the
      broader social web. The protocol is a social web standard at this
      point.</p>
<p id="if_you_remember">If you remember nothing else from this tangent, just remember that
      OAuth is a means of allowing users to authorize third-party applications
      to access their account data without needing to share sensitive
      information like a password. <a class="xref" href="">???</a> provides a slightly
      broader overview of how OAuth works if you're interested, and <a class="ulink" href="http://bit.ly/1a1kZWW" target="_top">Twitter's OAuth documentation</a> offers
      specific details about its particular implementation.<a href="#ftn.id532653" class="footnote"><sup class="footnote" id="id532653">[1]</sup></a></p>
<p id="for_simplicity_">For simplicity of development, the key pieces of information that
      you'll need to take away from your newly created application's settings
      are its <a id="id532664" class="indexterm"></a><a id="id532669" class="indexterm"></a><a id="id532674" class="indexterm"></a><a id="id532681" class="indexterm"></a>consumer key, consumer secret, access token, and access
      token secret. In tandem, these four credentials provide everything that
      an application would ultimately be getting to authorize itself through a
      series of redirects involving the user granting authorization, so treat
      them with the same sensitivity that you would a password.</p>
<div class="note" id="see_for_details_id1"><p id="see_for_details_id2">See <a class="xref" href="">???</a> for details on implementing an OAuth
        2.0 flow that you would need to build an application that requires an
        arbitrary user to authorize it to access account data.</p></div>
<p id="shows_the_conte"><a class="xref" href="ch01.html#twitter_app_settings" title="Figure 1-2. Create a new Twitter application to get OAuth credentials and API access at https://dev.twitter.com/apps; the four (blurred) OAuth fields are what you'll use to make API calls to Twitter's API">Figure 1-2</a> shows the context of
      retrieving these credentials.</p>
<div class="figure" id="twitter_app_settings">
<div class="figure-contents"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000001583/images/mswb_0102.png" alt="Create a new Twitter application to get OAuth credentials and API access at https://dev.twitter.com/apps; the four (blurred) OAuth fields are what you'll use to make API calls to Twitter's API"></div></div>
<div class="figure-title">Figure 1-2. Create a new Twitter application to get OAuth credentials and
        API access at <a class="ulink" href="https://dev.twitter.com/apps" target="_top">https://dev.twitter.com/apps</a>;
        the four (blurred) OAuth fields are what you'll use to make API calls
        to Twitter's API</div>
</div>
<p id="without_further">Without further ado, let’s create an authenticated connection to
      Twitter's API and find out what people are talking about by inspecting
      the trends available to us through the <a class="ulink" href="http://bit.ly/1a1kYSQ" target="_top"><code class="literal">GET trends/place</code>
      resource</a>. While you're at it, go ahead and bookmark the <a class="ulink" href="http://bit.ly/1a1kSKQ" target="_top">official API documentation</a> as well
      as the <a class="ulink" href="http://bit.ly/1a1kZ9i" target="_top">REST API v1.1
      resources</a>, because you'll be referencing them regularly as you
      learn the ropes of the developer-facing side of the Twitterverse.</p>
<div class="note" id="as_of_march__id1"><p id="as_of_march__id2">As of March 2013, Twitter's API operates at version 1.1 and is
          significantly different in a few areas from the previous v1 API that
          you may have encountered. Version 1 of the API passed through a
          deprecation cycle of approximately six months and is no longer
          operational. All sample code in this book presumes version 1.1 of
          the API.</p></div>
<p id="lets_fire_up_i">Let’s fire up IPython Notebook and initiate a search. Follow along
      with <a class="xref" href="ch01.html#twitter_auth_python" title="Example 1-1. Authorizing an application to access Twitter account data">Example 1-1</a> by substituting your own
      account credentials into the variables at the beginning of the code
      example and execute the call to create an instance of the Twitter API.
      The code works by using your OAuth credentials to create an object
      called <code class="literal">auth</code> that represents your
      OAuth authorization, which can then be passed to a class called <code class="literal">Twitter</code> that is capable of issuing queries to
      Twitter's API.</p>
<div class="example" id="twitter_auth_python">
<div class="example-title">Example 1-1. Authorizing an application to access Twitter account
        data</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="import_twitter_"><code class="kn">import</code> <code class="nn">twitter</code>

<code class="c"># XXX: Go to http://dev.twitter.com/apps/new to create an app and get values</code>
<code class="c"># for these credentials, which you'll need to provide in place of these</code>
<code class="c"># empty string values that are defined as placeholders.</code>
<code class="c"># See https://dev.twitter.com/docs/auth/oauth for more information </code>
<code class="c"># on Twitter's OAuth implementation.</code>

<code class="n">CONSUMER_KEY</code> <code class="o">=</code> <code class="s">''</code>
<code class="n">CONSUMER_SECRET</code> <code class="o">=</code> <code class="s">''</code>
<code class="n">OAUTH_TOKEN</code> <code class="o">=</code> <code class="s">''</code>
<code class="n">OAUTH_TOKEN_SECRET</code> <code class="o">=</code> <code class="s">''</code>

<code class="n">auth</code> <code class="o">=</code> <code class="n">twitter</code><code class="o">.</code><code class="n">oauth</code><code class="o">.</code><code class="n">OAuth</code><code class="p">(</code><code class="n">OAUTH_TOKEN</code><code class="p">,</code> <code class="n">OAUTH_TOKEN_SECRET</code><code class="p">,</code>
                           <code class="n">CONSUMER_KEY</code><code class="p">,</code> <code class="n">CONSUMER_SECRET</code><code class="p">)</code>

<code class="n">twitter_api</code> <code class="o">=</code> <code class="n">twitter</code><code class="o">.</code><code class="n">Twitter</code><code class="p">(</code><code class="n">auth</code><code class="o">=</code><code class="n">auth</code><code class="p">)</code>

<code class="c"># Nothing to see by displaying twitter_api except that it's now a</code>
<code class="c"># defined variable</code>

<code class="k">print</code> <code class="n">twitter_api</code></pre></div>
</div>
<p id="the_results_of__id1">The results of this example should simply display an unambiguous
      representation of the <code class="literal">twitter_api</code>
      object that we've constructed, such as:</p>
<pre class="programlisting" id="twitterapitw"><code class="literal">&lt;twitter.api.Twitter object at 0x39d9b50&gt;</code></pre>
<p id="this_indicates_">This indicates that we've successfully used OAuth credentials to
      gain authorization to query <a id="id533072" class="indexterm"></a><a id="id533081" class="indexterm"></a><a id="id533089" class="indexterm"></a><a id="id533097" class="indexterm"></a>Twitter's API.</p>
</div>
<div class="sect2" id="exploring_trending_topics">
<div class="titlepage"><div><div><h3 class="title">Exploring Trending Topics</h3></div></div></div>
<p id="with_an_twitter">With an <a id="tw1.3.3" class="indexterm"></a><a id="tr1.3.3" class="indexterm"></a><a id="qu1.3.3" class="indexterm"></a>authorized API connection in place, you can now issue a
      request. <a class="xref" href="ch01.html#twitter_trends_python" title="Example 1-2. Retrieving trends">Example 1-2</a> demonstrates how to
      ask Twitter for the topics that are currently trending worldwide, but
      keep in mind that the API can easily be parameterized to constrain the
      topics to more specific locales if you feel inclined to try out some of
      the possibilities. The device for constraining queries is <a id="id533156" class="indexterm"></a><a id="id533161" class="indexterm"></a><a id="id533166" class="indexterm"></a>via <a class="ulink" href="http://yhoo.it/1a1kZ9u" target="_top">Yahoo!
      GeoPlanet’s</a> Where On Earth (WOE) ID system, which is an API unto
      itself that aims to provide a way to map a unique identifier to any
      named place on Earth (or theoretically, even in a virtual world). If you
      haven't already, go ahead and try out the example that collects a set of
      trends for both the entire world and just the United States.</p>
<div class="example" id="twitter_trends_python">
<div class="example-title">Example 1-2. Retrieving trends</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="the_yahoo_wh"><code class="c"># The Yahoo! Where On Earth ID for the entire world is 1.</code>
<code class="c"># See https://dev.twitter.com/docs/api/1.1/get/trends/place and</code>
<code class="c"># http://developer.yahoo.com/geo/geoplanet/</code>

<code class="n">WORLD_WOE_ID</code> <code class="o">=</code> <code class="mi">1</code>
<code class="n">US_WOE_ID</code> <code class="o">=</code> <code class="mi">23424977</code>

<code class="c"># Prefix ID with the underscore for query string parameterization.</code>
<code class="c"># Without the underscore, the twitter package appends the ID value</code>
<code class="c"># to the URL itself as a special case keyword argument.</code>

<code class="n">world_trends</code> <code class="o">=</code> <code class="n">twitter_api</code><code class="o">.</code><code class="n">trends</code><code class="o">.</code><code class="n">place</code><code class="p">(</code><code class="n">_id</code><code class="o">=</code><code class="n">WORLD_WOE_ID</code><code class="p">)</code>
<code class="n">us_trends</code> <code class="o">=</code> <code class="n">twitter_api</code><code class="o">.</code><code class="n">trends</code><code class="o">.</code><code class="n">place</code><code class="p">(</code><code class="n">_id</code><code class="o">=</code><code class="n">US_WOE_ID</code><code class="p">)</code>

<code class="k">print</code> <code class="n">world_trends</code>
<code class="k">print</code>
<code class="k">print</code> <code class="n">us_trends</code></pre></div>
</div>
<p id="you_should_see_">You should see a semireadable response that is a list of Python
      dictionaries from the API (as opposed to any kind of error message),
      such as the following truncated results, before proceeding further. (In
      just a moment, we'll reformat the response to be more easily
      readable.)</p>
<pre class="programlisting" data-language="py" id="ucreated_at"><code class="p">[{</code><code class="s">u'created_at'</code><code class="p">:</code> <code class="s">u'2013-03-27T11:50:40Z'</code><code class="p">,</code> <code class="s">u'trends'</code><code class="p">:</code> <code class="p">[{</code><code class="s">u'url'</code><code class="p">:</code> 
  <code class="s">u'http://twitter.com/search?q=%23MentionSomeoneImportantForYou'</code><code class="o">...</code></pre>
<p id="notice_that_the">Notice that the sample result contains a URL for a trend
      represented as a search query that corresponds to the hashtag
      #MentionSomeoneImportantForYou, where %23 is the URL encoding for the
      hashtag symbol. We'll use this rather benign hashtag throughout the
      remainder of the chapter as a unifying theme for examples that follow.
      Although a sample data file containing tweets for this hashtag is
      available with the book's source code, you'll have much more fun
      exploring a topic that's trending at the time you read this as opposed
      to following along with a canned topic that is no longer
      trending.</p>
<p id="the_pattern_for">The pattern for using the <code class="code">twitter</code> module is simple
      and predictable: <a id="id533474" class="indexterm"></a>instantiate the <code class="code">Twitter</code> class with an object
      chain corresponding to a base URL and then invoke methods on the object
      that correspond to URL contexts. For example,
      <code class="code">twitter_api.</code>_<code class="keep-together">trends.place(WORLD_WOE_ID)</code> initiates an HTTP
      call to GET
      <span class="emphasis"><em>https://api.twitter.com/1.1/trends/place.json?id=1</em></span>.
      Note the URL mapping to the object chain that's constructed with the
      <code class="literal">twitter</code> package to make the request
      and how query string parameters are passed in as keyword arguments. To
      use the <code class="literal">twitter</code> package for arbitrary
      API requests, you generally construct the request in that kind of
      straightforward manner, with just a couple of minor caveats that we'll
      encounter soon enough.</p>
<p id="twitter_imposes">Twitter imposes <span class="emphasis"><em>rate limits</em></span> on <a id="id533518" class="indexterm"></a><a id="id533526" class="indexterm"></a>how many requests an application can make to any given API
      resource within a given time window. Twitter's <a class="ulink" href="http://bit.ly/1a1l257" target="_top">rate limits</a> are well documented, and
      each individual API resource also states its particular limits for your
      convenience. For example, the API request that we just issued for trends
      limits applications to 15 requests per 15-minute window (see <a class="xref" href="ch01.html#twitter-rate-limiting-ui" title='Figure 1-3. Rate limits for Twitter API resources are identified in the online documentation for each API call; the particular API resource shown here allows 15 requests per "rate limit window," which is currently defined as 15 minutes'>Figure 1-3</a>). For more nuanced information on
      how Twitter's rate limits work, <a id="id533548" class="indexterm"></a>see <a class="ulink" href="http://bit.ly/1a1l2ly" target="_top">REST API Rate
      Limiting in v1.1</a>. For the purposes of following along in this
      <a id="id533559" class="indexterm"></a>chapter, it's highly unlikely that you'll get rate
      limited. <a class="xref" href="">???</a> (<a class="xref" href="">???</a>) will introduce some
      techniques demonstrating best practices while working with rate
      limits.</p>
<div class="figure" id="twitter-rate-limiting-ui">
<div class="figure-contents"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000001583/images/mswb_0103.png" alt='Rate limits for Twitter API resources are identified in the online documentation for each API call; the particular API resource shown here allows 15 requests per "rate limit window," which is currently defined as 15 minutes'></div></div>
<div class="figure-title">Figure 1-3. Rate limits for Twitter API resources are identified in the
        online documentation for each API call; the particular API resource
        shown here allows 15 requests per "rate limit window," which is
        currently defined as 15 minutes</div>
</div>
<div class="note" id="the_developer_d_id1"><p id="the_developer_d_id2">The developer documentation states that the results of a Trends
        API query are updated only once every five minutes, so it's not a
        judicious use of your efforts or API requests to ask for results more
        often than that.</p></div>
<p id="although_it_has">Although it hasn't explicitly been stated yet, the semireadable
      output from <a class="xref" href="ch01.html#twitter_trends_python" title="Example 1-2. Retrieving trends">Example 1-2</a> is printed out as
      native Python data structures. While an IPython interpreter will "pretty
      print" the output for you automatically, IPython Notebook and a standard
      Python interpreter will not. If you find yourself in these
      circumstances, you may find it handy to use <a id="id533613" class="indexterm"></a>the built-in <code class="literal">json</code>
      package to force a nicer display, as illustrated in <a class="xref" href="ch01.html#twitter_json_prettyprint" title="Example 1-3. Displaying API responses as pretty-printed JSON">Example 1-3</a>.</p>
<div class="note" id="json_is_a_data__id1"><p id="json_is_a_data__id2"><a class="ulink" href="http://bit.ly/1a1l2lJ" target="_top">JSON</a> is a data
        <a id="id533640" class="indexterm"></a>exchange format that you will encounter on a regular
        basis. In a nutshell, JSON provides a way to arbitrarily store maps,
        lists, primitives such as numbers and strings, and combinations
        thereof. In other words, you can theoretically model just about
        anything with JSON should you desire to do so.</p></div>
<div class="example" id="twitter_json_prettyprint">
<div class="example-title">Example 1-3. Displaying API responses as pretty-printed JSON</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="import_json_pri"><code class="kn">import</code> <code class="nn">json</code>

<code class="k">print</code> <code class="n">json</code><code class="o">.</code><code class="n">dumps</code><code class="p">(</code><code class="n">world_trends</code><code class="p">,</code> <code class="n">indent</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code>
<code class="k">print</code>
<code class="k">print</code> <code class="n">json</code><code class="o">.</code><code class="n">dumps</code><code class="p">(</code><code class="n">us_trends</code><code class="p">,</code> <code class="n">indent</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code></pre></div>
</div>
<p id="an_abbreviated_">An abbreviated sample response from the Trends API produced with
      <code class="literal">json.dumps</code> would look like the
      following:</p>
<pre class="programlisting" data-language="json" id="_created_at"><code class="p">[</code>
 <code class="p">{</code>
  <code class="nt">"created_at"</code><code class="p">:</code> <code class="s2">"2013-03-27T11:50:40Z"</code><code class="p">,</code> 
  <code class="nt">"trends"</code><code class="p">:</code> <code class="p">[</code>
   <code class="p">{</code>
    <code class="nt">"url"</code><code class="p">:</code> <code class="s2">"http://twitter.com/search?q=%23MentionSomeoneImportantForYou"</code><code class="p">,</code> 
    <code class="nt">"query"</code><code class="p">:</code> <code class="s2">"%23MentionSomeoneImportantForYou"</code><code class="p">,</code> 
    <code class="nt">"name"</code><code class="p">:</code> <code class="s2">"#MentionSomeoneImportantForYou"</code><code class="p">,</code> 
    <code class="nt">"promoted_content"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
    <code class="nt">"events"</code><code class="p">:</code> <code class="kc">null</code>
   <code class="p">},</code>
   <code class="err">...</code>
  <code class="p">]</code>
 <code class="p">}</code>
<code class="p">]</code></pre>
<p id="although_its_e">Although it's easy enough to skim the two sets of trends and look
      for commonality, let's use <a id="id533962" class="indexterm"></a>Python's <a class="ulink" href="http://bit.ly/1a1l2Sw" target="_top"><code class="literal">set</code></a> data
      structure to automatically compute this for us, because that's exactly
      the kind of thing that sets lend themselves to doing. In this instance,
      a <span class="emphasis"><em>set</em></span> refers to the mathematical notion of a data
      structure that stores an unordered collection of unique items and can be
      computed upon with other sets of items and setwise operations. For
      example, a setwise intersection computes common items between sets, a
      setwise union combines all of the items from sets, and the setwise
      difference among sets acts sort of like a subtraction operation in which
      items from one set are removed from another.</p>
<p id="demonstrates_ho"><a class="xref" href="ch01.html#trends_intersection" title="Example 1-4. Computing the intersection of two sets of trends">Example 1-4</a> demonstrates how to use a
      <a id="id533994" class="indexterm"></a>Python <a class="ulink" href="http://bit.ly/1a1l1hy" target="_top">list
      comprehension</a> to parse out the names of the trending topics from
      the results that were previously queried, cast those lists to sets, and
      compute the setwise intersection to reveal the common items between
      them. Keep in mind that there may or may not be significant overlap
      between any given sets of trends, all depending on what's actually
      happening when you query for the trends. In other words, the results of
      your analysis will be entirely dependent upon your query and the data
      that is returned <a id="id534010" class="indexterm"></a><a id="id534018" class="indexterm"></a>from it.</p>
<div class="note" id="recall_that_pro_id1"><p id="recall_that_pro_id2">Recall that <a class="xref" href="">???</a> provides a reference for
        some common Python idioms like list comprehensions that you may find
        useful to review.</p></div>
<div class="example" id="trends_intersection">
<div class="example-title">Example 1-4. Computing the intersection of two sets of trends</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="world_trends_se"><code class="n">world_trends_set</code> <code class="o">=</code> <code class="nb">set</code><code class="p">([</code><code class="n">trend</code><code class="p">[</code><code class="s">'name'</code><code class="p">]</code> 
                        <code class="k">for</code> <code class="n">trend</code> <code class="ow">in</code> <code class="n">world_trends</code><code class="p">[</code><code class="mi">0</code><code class="p">][</code><code class="s">'trends'</code><code class="p">]])</code>

<code class="n">us_trends_set</code> <code class="o">=</code> <code class="nb">set</code><code class="p">([</code><code class="n">trend</code><code class="p">[</code><code class="s">'name'</code><code class="p">]</code> 
                     <code class="k">for</code> <code class="n">trend</code> <code class="ow">in</code> <code class="n">us_trends</code><code class="p">[</code><code class="mi">0</code><code class="p">][</code><code class="s">'trends'</code><code class="p">]])</code> 

<code class="n">common_trends</code> <code class="o">=</code> <code class="n">world_trends_set</code><code class="o">.</code><code class="n">intersection</code><code class="p">(</code><code class="n">us_trends_set</code><code class="p">)</code>

<code class="k">print</code> <code class="n">common_trends</code></pre></div>
</div>
<div class="note" id="you_should_comp_id1"><p id="you_should_comp_id2">You should complete <a class="xref" href="ch01.html#trends_intersection" title="Example 1-4. Computing the intersection of two sets of trends">Example 1-4</a>
        before moving on in this chapter to ensure that you are able to access
        and analyze Twitter data. Can you explain what, if any, correlation
        exists between trends in your country and the rest of the
        world?</p></div>
<div class="sidebar" id="set_theory_intuition_and_countable_infinity">
<div class="titlepage"><div><div><div class="sidebar-title">Set Theory, Intuition, and Countable Infinity</div></div></div></div>
<p id="computing_setwi">Computing setwise operations may seem a rather primitive form of
        analysis, but the ramifications of set theory for general mathematics
        are considerably more profound since it provides the foundation for
        many mathematical principles.</p>
<p id="georg_cantor_is">Georg Cantor is <a id="id534283" class="indexterm"></a>generally credited with formalizing the mathematics
        behind set theory, and his paper “On a Characteristic Property of All
        Real Algebraic Numbers” (1874) formalized set theory as part of his
        work on answering questions related to the concept of infinity. To
        understand how it worked, consider the following question: is the set
        of positive integers larger in cardinality than the set of both
        positive and negative integers?</p>
<p id="although_common">Although common intuition may be that there are twice as many
        positive and negative integers than positive integers alone, Cantor’s
        work showed that the cardinalities of the sets are actually equal!
        Mathematically, he showed that you can map both sets of numbers such
        that they form a sequence with a definite starting point that extends
        forever in <span class="emphasis"><em>one</em></span> direction like this: <span class="emphasis"><em>{1,
        –1, 2, –2, 3, –3, ...}</em></span>.</p>
<p id="because_the_num">Because the numbers can be clearly enumerated but there is never an ending
        point, the cardinalities of the sets are said to be
        <span class="emphasis"><em>countably infinite</em></span>. In other words, there is a
        definite sequence that could be followed deterministically if you
        simply had enough time to count them.</p>
</div>
</div>
<div class="sect2" id="searching_for_tweets">
<div class="titlepage"><div><div><h3 class="title">Searching for Tweets</h3></div></div></div>
<p id="one_of_the_twit">One of the <a id="tw1.3.4" class="indexterm"></a><a id="twe1.3.4" class="indexterm"></a><a id="se1.3.4" class="indexterm"></a><a id="tes1.3.4" class="indexterm"></a><a id="tp1.3.4" class="indexterm"></a>common items between the sets of trending topics turns out
      to be the hashtag #MentionSomeoneImportantForYou, so let's use it as the
      basis of a search query to fetch some tweets for further analysis. <a class="xref" href="ch01.html#paging_thru_twitter" title="Example 1-5. Collecting search results">Example 1-5</a> illustrates how to exercise <a id="ge1.3.4" class="indexterm"></a>the <a class="ulink" href="http://bit.ly/1a1l398" target="_top"><code class="literal">GET
      search/tweets</code> resource</a> for a particular query of
      interest, including the ability to use a special field that's included
      in the metadata for the search results to easily make additional
      requests for more search results. Coverage of Twitter's <a class="ulink" href="http://bit.ly/1a1l1ya" target="_top">Streaming API</a> resources is out of
      scope for this chapter but is introduced in <a class="xref" href="">???</a> (<a class="xref" href="">???</a>)
      and may be more appropriate for many situations in which you want to
      maintain a constantly updated view <a id="id534439" class="indexterm"></a><a id="id534446" class="indexterm"></a><a id="id534453" class="indexterm"></a><a id="id534458" class="indexterm"></a>of tweets.</p>
<div class="note" id="the_use_of_arg_id1"><p id="the_use_of_arg_id2">The use of <code class="literal">*args</code> and <code class="literal">**kwargs</code> as illustrated in <a class="xref" href="ch01.html#paging_thru_twitter" title="Example 1-5. Collecting search results">Example 1-5</a> as parameters to a function is a
        Python idiom for expressing arbitrary arguments and keyword arguments,
        respectively. See <a class="xref" href="">???</a> for a brief overview of this
        idiom.</p></div>
<div class="example" id="paging_thru_twitter">
<div class="example-title">Example 1-5. Collecting search results</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="xxx_set_this"><code class="c"># XXX: Set this variable to a trending topic, </code>
<code class="c"># or anything else for that matter. The example query below</code>
<code class="c"># was a trending topic when this content was being developed</code>
<code class="c"># and is used throughout the remainder of this chapter.</code>

<code class="n">q</code> <code class="o">=</code> <code class="s">'#MentionSomeoneImportantForYou'</code> 

<code class="n">count</code> <code class="o">=</code> <code class="mi">100</code>

<code class="c"># See https://dev.twitter.com/docs/api/1.1/get/search/tweets</code>

<code class="n">search_results</code> <code class="o">=</code> <code class="n">twitter_api</code><code class="o">.</code><code class="n">search</code><code class="o">.</code><code class="n">tweets</code><code class="p">(</code><code class="n">q</code><code class="o">=</code><code class="n">q</code><code class="p">,</code> <code class="n">count</code><code class="o">=</code><code class="n">count</code><code class="p">)</code>

<code class="n">statuses</code> <code class="o">=</code> <code class="n">search_results</code><code class="p">[</code><code class="s">'statuses'</code><code class="p">]</code>


<code class="c"># Iterate through 5 more batches of results by following the cursor</code>

<code class="k">for</code> <code class="n">_</code> <code class="ow">in</code> <code class="nb">range</code><code class="p">(</code><code class="mi">5</code><code class="p">):</code>
    <code class="k">print</code> <code class="s">"Length of statuses"</code><code class="p">,</code> <code class="nb">len</code><code class="p">(</code><code class="n">statuses</code><code class="p">)</code>
    <code class="k">try</code><code class="p">:</code>
        <code class="n">next_results</code> <code class="o">=</code> <code class="n">search_results</code><code class="p">[</code><code class="s">'search_metadata'</code><code class="p">][</code><code class="s">'next_results'</code><code class="p">]</code>
    <code class="k">except</code> <code class="ne">KeyError</code><code class="p">,</code> <code class="n">e</code><code class="p">:</code> <code class="c"># No more results when next_results doesn't exist</code>
        <code class="k">break</code>
        
    <code class="c"># Create a dictionary from next_results, which has the following form:</code>
    <code class="c"># ?max_id=313519052523986943&amp;q=NCAA&amp;include_entities=1</code>
    <code class="n">kwargs</code> <code class="o">=</code> <code class="nb">dict</code><code class="p">([</code> <code class="n">kv</code><code class="o">.</code><code class="n">split</code><code class="p">(</code><code class="s">'='</code><code class="p">)</code> <code class="k">for</code> <code class="n">kv</code> <code class="ow">in</code> <code class="n">next_results</code><code class="p">[</code><code class="mi">1</code><code class="p">:]</code><code class="o">.</code><code class="n">split</code><code class="p">(</code><code class="s">"&amp;"</code><code class="p">)</code> <code class="p">])</code>
    
    <code class="n">search_results</code> <code class="o">=</code> <code class="n">twitter_api</code><code class="o">.</code><code class="n">search</code><code class="o">.</code><code class="n">tweets</code><code class="p">(</code><code class="o">**</code><code class="n">kwargs</code><code class="p">)</code>
    <code class="n">statuses</code> <code class="o">+=</code> <code class="n">search_results</code><code class="p">[</code><code class="s">'statuses'</code><code class="p">]</code>

<code class="c"># Show one sample search result by slicing the list...</code>
<code class="k">print</code> <code class="n">json</code><code class="o">.</code><code class="n">dumps</code><code class="p">(</code><code class="n">statuses</code><code class="p">[</code><code class="mi">0</code><code class="p">],</code> <code class="n">indent</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code></pre></div>
</div>
<div class="note" id="although_were__id1"><p id="although_were__id2">Although we're just passing in a hashtag to the Search API at
        this point, it's well worth noting that it contains a number of <a class="ulink" href="http://bit.ly/1a1l3pN" target="_top">powerful operators</a> that allow you
        to filter queries according to the existence or nonexistence of
        various keywords, originator of the tweet, location associated with
        the tweet, etc.</p></div>
<p id="in_essence_all">In essence, all the <a id="id535086" class="indexterm"></a>code does is repeatedly make requests to the Search API.
      One thing that might initially catch you off guard if you've worked with
      other web APIs (including version 1 of Twitter's API) is that there's no
      explicit concept of <span class="emphasis"><em>pagination</em></span> in the Search API
      itself. Reviewing the API documentation reveals that this is a
      intentional decision, and there are some <a class="ulink" href="http://bit.ly/1a1l4K6" target="_top">good reasons</a> for taking a
      <span class="emphasis"><em>cursoring</em></span> approach instead, given the highly
      dynamic state of Twitter resources. The best practices for cursoring
      vary a bit throughout the Twitter developer platform, with the Search
      API providing a slightly simpler way of navigating search results than
      other resources such as timelines.</p>
<p id="search_results_">Search results contain a special <code class="literal">search_metadata</code> node that embeds a <code class="literal">next_results</code> field with a query string that
      provides the basis of a subsequent query. If we weren't using a library
      like <code class="literal">twitter</code> to make the HTTP
      requests for us, this preconstructed query string would just be appended
      to the Search API URL, and we'd update it with additional parameters for
      handling OAuth. However, since we are not making our HTTP requests
      directly, we must parse the query string into its constituent key/value
      pairs and provide them as keyword arguments.</p>
<p id="in_python_parla">In Python parlance, we are <span class="emphasis"><em>unpacking</em></span> the
      values in a dictionary into keyword arguments that the function
      receives. In other words, the function call inside of the <code class="literal">for</code> loop in <span class="keep-together"><a class="xref" href="ch01.html#paging_thru_twitter" title="Example 1-5. Collecting search results">Example 1-5</a> ultimately invokes a function such as
      <code class="literal">twitter_api.search.tweets</code></span><code class="literal">(q='%23MentionSomeoneImportantForYou',
      include_entities=1, max_id=313519</code><span class="keep-together"><code class="literal">052523986943)</code> even though it appears in
      the source code as <code class="literal">twitter_api</code></span><code class="literal">.search.tweets(**kwargs)</code>, with <code class="literal">kwargs</code> being a dictionary of key/value
      pairs.</p>
<div class="note" id="the_search_meta_id1"><p id="the_search_meta_id2">The <code class="literal">search_metadata</code> field
        also contains a <code class="literal">refresh_url</code> value
        that can be used if you'd like to maintain and periodically update
        your collection of results with new information that's become
        available since the previous query.</p></div>
<p id="the_next_sample">The next sample tweet shows the search results for a query for
      #MentionSomeoneImportantForYou. Take a moment to peruse (all of) it. As
      I mentioned earlier, there's a lot more to a tweet than meets the eye.
      The particular tweet that follows is fairly representative and contains
      in excess of 5 KB of total content when represented in uncompressed
      JSON. That's more than 40 times the amount of data that makes up the 140
      characters of text that's normally thought of as a <a id="id535223" class="indexterm"></a>tweet!</p>
<pre class="programlisting" data-language="json" id="_contributo"><code class="p">[</code>
 <code class="p">{</code>
  <code class="nt">"contributors"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
  <code class="nt">"truncated"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
  <code class="nt">"text"</code><code class="p">:</code> <code class="s2">"RT @hassanmusician: #MentionSomeoneImportantForYou God."</code><code class="p">,</code> 
  <code class="nt">"in_reply_to_status_id"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
  <code class="nt">"id"</code><code class="p">:</code> <code class="mi">316948241264549888</code><code class="p">,</code> 
  <code class="nt">"favorite_count"</code><code class="p">:</code> <code class="mi">0</code><code class="p">,</code> 
  <code class="nt">"source"</code><code class="p">:</code> <code class="s2">"&lt;a href=\"http://twitter.com/download/android\"..."</code><code class="p">,</code> 
  <code class="nt">"retweeted"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
  <code class="nt">"coordinates"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
  <code class="nt">"entities"</code><code class="p">:</code> <code class="p">{</code>
   <code class="nt">"user_mentions"</code><code class="p">:</code> <code class="p">[</code>
    <code class="p">{</code>
     <code class="nt">"id"</code><code class="p">:</code> <code class="mi">56259379</code><code class="p">,</code> 
     <code class="nt">"indices"</code><code class="p">:</code> <code class="p">[</code>
      <code class="mi">3</code><code class="p">,</code> 
      <code class="mi">18</code>
     <code class="p">],</code> 
     <code class="nt">"id_str"</code><code class="p">:</code> <code class="s2">"56259379"</code><code class="p">,</code> 
     <code class="nt">"screen_name"</code><code class="p">:</code> <code class="s2">"hassanmusician"</code><code class="p">,</code> 
     <code class="nt">"name"</code><code class="p">:</code> <code class="s2">"Download the NEW LP!"</code>
    <code class="p">}</code>
   <code class="p">],</code> 
   <code class="nt">"hashtags"</code><code class="p">:</code> <code class="p">[</code>
    <code class="p">{</code>
     <code class="nt">"indices"</code><code class="p">:</code> <code class="p">[</code>
      <code class="mi">20</code><code class="p">,</code> 
      <code class="mi">50</code>
     <code class="p">],</code> 
     <code class="nt">"text"</code><code class="p">:</code> <code class="s2">"MentionSomeoneImportantForYou"</code>
    <code class="p">}</code>
   <code class="p">],</code> 
   <code class="nt">"urls"</code><code class="p">:</code> <code class="p">[]</code>
  <code class="p">},</code> 
  <code class="nt">"in_reply_to_screen_name"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
  <code class="nt">"in_reply_to_user_id"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
  <code class="nt">"retweet_count"</code><code class="p">:</code> <code class="mi">23</code><code class="p">,</code> 
  <code class="nt">"id_str"</code><code class="p">:</code> <code class="s2">"316948241264549888"</code><code class="p">,</code> 
  <code class="nt">"favorited"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
  <code class="nt">"retweeted_status"</code><code class="p">:</code> <code class="p">{</code>
   <code class="nt">"contributors"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"truncated"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
   <code class="nt">"text"</code><code class="p">:</code> <code class="s2">"#MentionSomeoneImportantForYou God."</code><code class="p">,</code> 
   <code class="nt">"in_reply_to_status_id"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"id"</code><code class="p">:</code> <code class="mi">316944833233186816</code><code class="p">,</code> 
   <code class="nt">"favorite_count"</code><code class="p">:</code> <code class="mi">0</code><code class="p">,</code> 
   <code class="nt">"source"</code><code class="p">:</code> <code class="s2">"web"</code><code class="p">,</code> 
   <code class="nt">"retweeted"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
   <code class="nt">"coordinates"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"entities"</code><code class="p">:</code> <code class="p">{</code>
    <code class="nt">"user_mentions"</code><code class="p">:</code> <code class="p">[],</code> 
    <code class="nt">"hashtags"</code><code class="p">:</code> <code class="p">[</code>
     <code class="p">{</code>
      <code class="nt">"indices"</code><code class="p">:</code> <code class="p">[</code>
       <code class="mi">0</code><code class="p">,</code> 
       <code class="mi">30</code>
      <code class="p">],</code> 
      <code class="nt">"text"</code><code class="p">:</code> <code class="s2">"MentionSomeoneImportantForYou"</code>
     <code class="p">}</code>
    <code class="p">],</code> 
    <code class="nt">"urls"</code><code class="p">:</code> <code class="p">[]</code>
   <code class="p">},</code> 
   <code class="nt">"in_reply_to_screen_name"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"in_reply_to_user_id"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"retweet_count"</code><code class="p">:</code> <code class="mi">23</code><code class="p">,</code> 
   <code class="nt">"id_str"</code><code class="p">:</code> <code class="s2">"316944833233186816"</code><code class="p">,</code> 
   <code class="nt">"favorited"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
   <code class="nt">"user"</code><code class="p">:</code> <code class="p">{</code>
    <code class="nt">"follow_request_sent"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
    <code class="nt">"profile_use_background_image"</code><code class="p">:</code> <code class="kc">true</code><code class="p">,</code> 
    <code class="nt">"default_profile_image"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
    <code class="nt">"id"</code><code class="p">:</code> <code class="mi">56259379</code><code class="p">,</code> 
    <code class="nt">"verified"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
    <code class="nt">"profile_text_color"</code><code class="p">:</code> <code class="s2">"3C3940"</code><code class="p">,</code> 
    <code class="nt">"profile_image_url_https"</code><code class="p">:</code> <code class="s2">"https://si0.t..."</code><code class="p">,</code> 
    <code class="nt">"profile_sidebar_fill_color"</code><code class="p">:</code> <code class="s2">"95E8EC"</code><code class="p">,</code> 
    <code class="nt">"entities"</code><code class="p">:</code> <code class="p">{</code>
     <code class="nt">"url"</code><code class="p">:</code> <code class="p">{</code>
      <code class="nt">"urls"</code><code class="p">:</code> <code class="p">[</code>
       <code class="p">{</code>
        <code class="nt">"url"</code><code class="p">:</code> <code class="s2">"http://t.co/yRX89YM4J0"</code><code class="p">,</code> 
        <code class="nt">"indices"</code><code class="p">:</code> <code class="p">[</code>
         <code class="mi">0</code><code class="p">,</code> 
         <code class="mi">22</code>
        <code class="p">],</code> 
        <code class="nt">"expanded_url"</code><code class="p">:</code> <code class="s2">"http://www.datpiff..."</code><code class="p">,</code> 
        <code class="nt">"display_url"</code><code class="p">:</code> <code class="s2">"datpiff.com/mixtapes-detai\u2026"</code>
       <code class="p">}</code>
      <code class="p">]</code>
     <code class="p">},</code> 
     <code class="nt">"description"</code><code class="p">:</code> <code class="p">{</code>
      <code class="nt">"urls"</code><code class="p">:</code> <code class="p">[]</code>
     <code class="p">}</code>
    <code class="p">},</code> 
    <code class="nt">"followers_count"</code><code class="p">:</code> <code class="mi">105041</code><code class="p">,</code> 
    <code class="nt">"profile_sidebar_border_color"</code><code class="p">:</code> <code class="s2">"000000"</code><code class="p">,</code> 
    <code class="nt">"id_str"</code><code class="p">:</code> <code class="s2">"56259379"</code><code class="p">,</code> 
    <code class="nt">"profile_background_color"</code><code class="p">:</code> <code class="s2">"000000"</code><code class="p">,</code> 
    <code class="nt">"listed_count"</code><code class="p">:</code> <code class="mi">64</code><code class="p">,</code> 
    <code class="nt">"profile_background_image_url_https"</code><code class="p">:</code> <code class="s2">"https://si0.t..."</code><code class="p">,</code> 
    <code class="nt">"utc_offset"</code><code class="p">:</code> <code class="mi">-18000</code><code class="p">,</code> 
    <code class="nt">"statuses_count"</code><code class="p">:</code> <code class="mi">16691</code><code class="p">,</code> 
    <code class="nt">"description"</code><code class="p">:</code> <code class="s2">"#TheseAreTheWordsISaid LP"</code><code class="p">,</code> 
    <code class="nt">"friends_count"</code><code class="p">:</code> <code class="mi">59615</code><code class="p">,</code> 
    <code class="nt">"location"</code><code class="p">:</code> <code class="s2">""</code><code class="p">,</code> 
    <code class="nt">"profile_link_color"</code><code class="p">:</code> <code class="s2">"91785A"</code><code class="p">,</code> 
    <code class="nt">"profile_image_url"</code><code class="p">:</code> <code class="s2">"http://a0.twimg.com/..."</code><code class="p">,</code> 
    <code class="nt">"following"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
    <code class="nt">"geo_enabled"</code><code class="p">:</code> <code class="kc">true</code><code class="p">,</code> 
    <code class="nt">"profile_banner_url"</code><code class="p">:</code> <code class="s2">"https://si0.twimg.com/pr..."</code><code class="p">,</code> 
    <code class="nt">"profile_background_image_url"</code><code class="p">:</code> <code class="s2">"http://a0.twi..."</code><code class="p">,</code> 
    <code class="nt">"screen_name"</code><code class="p">:</code> <code class="s2">"hassanmusician"</code><code class="p">,</code> 
    <code class="nt">"lang"</code><code class="p">:</code> <code class="s2">"en"</code><code class="p">,</code> 
    <code class="nt">"profile_background_tile"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
    <code class="nt">"favourites_count"</code><code class="p">:</code> <code class="mi">6142</code><code class="p">,</code> 
    <code class="nt">"name"</code><code class="p">:</code> <code class="s2">"Download the NEW LP!"</code><code class="p">,</code> 
    <code class="nt">"notifications"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
    <code class="nt">"url"</code><code class="p">:</code> <code class="s2">"http://t.co/yRX89YM4J0"</code><code class="p">,</code> 
    <code class="nt">"created_at"</code><code class="p">:</code> <code class="s2">"Mon Jul 13 02:18:25 +0000 2009"</code><code class="p">,</code> 
    <code class="nt">"contributors_enabled"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
    <code class="nt">"time_zone"</code><code class="p">:</code> <code class="s2">"Eastern Time (US &amp; Canada)"</code><code class="p">,</code> 
    <code class="nt">"protected"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
    <code class="nt">"default_profile"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
    <code class="nt">"is_translator"</code><code class="p">:</code> <code class="kc">false</code>
   <code class="p">},</code> 
   <code class="nt">"geo"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"in_reply_to_user_id_str"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"lang"</code><code class="p">:</code> <code class="s2">"en"</code><code class="p">,</code> 
   <code class="nt">"created_at"</code><code class="p">:</code> <code class="s2">"Wed Mar 27 16:08:31 +0000 2013"</code><code class="p">,</code> 
   <code class="nt">"in_reply_to_status_id_str"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"place"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"metadata"</code><code class="p">:</code> <code class="p">{</code>
    <code class="nt">"iso_language_code"</code><code class="p">:</code> <code class="s2">"en"</code><code class="p">,</code> 
    <code class="nt">"result_type"</code><code class="p">:</code> <code class="s2">"recent"</code>
   <code class="p">}</code>
  <code class="p">},</code> 
  <code class="nt">"user"</code><code class="p">:</code> <code class="p">{</code>
   <code class="nt">"follow_request_sent"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"profile_use_background_image"</code><code class="p">:</code> <code class="kc">true</code><code class="p">,</code> 
   <code class="nt">"default_profile_image"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
   <code class="nt">"id"</code><code class="p">:</code> <code class="mi">549413966</code><code class="p">,</code> 
   <code class="nt">"verified"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
   <code class="nt">"profile_text_color"</code><code class="p">:</code> <code class="s2">"3D1957"</code><code class="p">,</code> 
   <code class="nt">"profile_image_url_https"</code><code class="p">:</code> <code class="s2">"https://si0.twimg..."</code><code class="p">,</code> 
   <code class="nt">"profile_sidebar_fill_color"</code><code class="p">:</code> <code class="s2">"7AC3EE"</code><code class="p">,</code> 
   <code class="nt">"entities"</code><code class="p">:</code> <code class="p">{</code>
    <code class="nt">"description"</code><code class="p">:</code> <code class="p">{</code>
     <code class="nt">"urls"</code><code class="p">:</code> <code class="p">[]</code>
    <code class="p">}</code>
   <code class="p">},</code> 
   <code class="nt">"followers_count"</code><code class="p">:</code> <code class="mi">110</code><code class="p">,</code> 
   <code class="nt">"profile_sidebar_border_color"</code><code class="p">:</code> <code class="s2">"FFFFFF"</code><code class="p">,</code> 
   <code class="nt">"id_str"</code><code class="p">:</code> <code class="s2">"549413966"</code><code class="p">,</code> 
   <code class="nt">"profile_background_color"</code><code class="p">:</code> <code class="s2">"642D8B"</code><code class="p">,</code> 
   <code class="nt">"listed_count"</code><code class="p">:</code> <code class="mi">1</code><code class="p">,</code> 
   <code class="nt">"profile_background_image_url_https"</code><code class="p">:</code> <code class="s2">"https:..."</code><code class="p">,</code> 
   <code class="nt">"utc_offset"</code><code class="p">:</code> <code class="mi">0</code><code class="p">,</code> 
   <code class="nt">"statuses_count"</code><code class="p">:</code> <code class="mi">1294</code><code class="p">,</code> 
   <code class="nt">"description"</code><code class="p">:</code> <code class="s2">"i BELIEVE do you? I admire n adore @justinbieber "</code><code class="p">,</code> 
   <code class="nt">"friends_count"</code><code class="p">:</code> <code class="mi">346</code><code class="p">,</code> 
   <code class="nt">"location"</code><code class="p">:</code> <code class="s2">"All Around The World "</code><code class="p">,</code> 
   <code class="nt">"profile_link_color"</code><code class="p">:</code> <code class="s2">"FF0000"</code><code class="p">,</code> 
   <code class="nt">"profile_image_url"</code><code class="p">:</code> <code class="s2">"http://a0.twimg.com/pr..."</code><code class="p">,</code> 
   <code class="nt">"following"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"geo_enabled"</code><code class="p">:</code> <code class="kc">true</code><code class="p">,</code> 
   <code class="nt">"profile_banner_url"</code><code class="p">:</code> <code class="s2">"https://si0.twimg.com/..."</code><code class="p">,</code> 
   <code class="nt">"profile_background_image_url"</code><code class="p">:</code> <code class="s2">"http://a0.tw..."</code><code class="p">,</code> 
   <code class="nt">"screen_name"</code><code class="p">:</code> <code class="s2">"LilSalima"</code><code class="p">,</code> 
   <code class="nt">"lang"</code><code class="p">:</code> <code class="s2">"en"</code><code class="p">,</code> 
   <code class="nt">"profile_background_tile"</code><code class="p">:</code> <code class="kc">true</code><code class="p">,</code> 
   <code class="nt">"favourites_count"</code><code class="p">:</code> <code class="mi">229</code><code class="p">,</code> 
   <code class="nt">"name"</code><code class="p">:</code> <code class="s2">"KoKo :D"</code><code class="p">,</code> 
   <code class="nt">"notifications"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"url"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
   <code class="nt">"created_at"</code><code class="p">:</code> <code class="s2">"Mon Apr 09 17:51:36 +0000 2012"</code><code class="p">,</code> 
   <code class="nt">"contributors_enabled"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
   <code class="nt">"time_zone"</code><code class="p">:</code> <code class="s2">"London"</code><code class="p">,</code> 
   <code class="nt">"protected"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
   <code class="nt">"default_profile"</code><code class="p">:</code> <code class="kc">false</code><code class="p">,</code> 
   <code class="nt">"is_translator"</code><code class="p">:</code> <code class="kc">false</code>
  <code class="p">},</code> 
  <code class="nt">"geo"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
  <code class="nt">"in_reply_to_user_id_str"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
  <code class="nt">"lang"</code><code class="p">:</code> <code class="s2">"en"</code><code class="p">,</code> 
  <code class="nt">"created_at"</code><code class="p">:</code> <code class="s2">"Wed Mar 27 16:22:03 +0000 2013"</code><code class="p">,</code> 
  <code class="nt">"in_reply_to_status_id_str"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
  <code class="nt">"place"</code><code class="p">:</code> <code class="kc">null</code><code class="p">,</code> 
  <code class="nt">"metadata"</code><code class="p">:</code> <code class="p">{</code>
   <code class="nt">"iso_language_code"</code><code class="p">:</code> <code class="s2">"en"</code><code class="p">,</code> 
   <code class="nt">"result_type"</code><code class="p">:</code> <code class="s2">"recent"</code>
  <code class="p">}</code>
 <code class="p">},</code> 
 <code class="err">...</code>
<code class="p">]</code></pre>
<p id="tweets_are_imbu">Tweets are imbued with some of the richest metadata that you'll
      find on the social web, and <a class="xref" href="">???</a>
      elaborates on some of the many possibilities.</p>
</div>
</div>
<div class="sect1" data-original-filename="ch01.xml" id="analyzing_the__characters">
<div class="titlepage"><div><div><h2 class="title">Analyzing the 140 Characters</h2></div></div></div>
<p id="the_online_twee">The online <a id="id538228" class="indexterm"></a><a id="id538236" class="indexterm"></a><a id="id538244" class="indexterm"></a><a id="id538253" class="indexterm"></a><a id="id538261" class="indexterm"></a><a id="id538269" class="indexterm"></a><a id="twe1.4" class="indexterm"></a><a id="an1.4" class="indexterm"></a><a id="tp1.4" class="indexterm"></a><a id="twes1.4" class="indexterm"></a><a id="fi1.4" class="indexterm"></a>documentation is always the definitive source for Twitter
    platform objects, and it's worthwhile to bookmark the <a class="ulink" href="http://bit.ly/1a1l3WL" target="_top">Tweets</a> page, because it's one that
    you'll refer to quite frequently as you get familiarized with the basic
    anatomy of a tweet. No attempt is made here or elsewhere in the book to
    regurgitate online documentation, but a few notes are of interest given
    that you might still be a bit overwhelmed by the 5 KB of information that
    a tweet comprises. For simplicity of nomenclature, let's assume that we've
    extracted a single tweet from the search results and stored it in a
    variable named <code class="literal">t</code>. For example, <code class="literal">t.keys()</code> returns the top-level fields for the
    tweet <a id="id538356" class="indexterm"></a>and <code class="literal">t['id']</code> accesses the
    identifier of the tweet.</p>
<div class="note" id="if_youre_follo_id1"><p id="if_youre_follo_id2">If you're following along with the IPython Notebook for this
        chapter, the exact tweet that's under scrutiny is stored in a variable
        named <code class="literal">t</code> so that you can
        interactively access its fields and explore more easily. The current
        discussion assumes the same nomenclature, so values should correspond
        one-for-one.</p></div>
<div class="itemizedlist" id="the_humanreada_id1"><ul class="itemizedlist">
<li class="listitem">
<p id="the_humanreada_id2">The human-readable text of a tweet is available <a id="id538391" class="indexterm"></a>through <code class="literal">t['text']</code>:</p>
<pre class="programlisting" data-language="py" id="rt_hassanmusic"><code class="n">RT</code> <code class="nd">@hassanmusician</code><code class="p">:</code> <code class="c">#MentionSomeoneImportantForYou God.</code></pre>
</li>
<li class="listitem">
<p id="the_entities_in">The entities in the text of a tweet are conveniently processed
          for you and <a id="id538434" class="indexterm"></a>available through <code class="literal">t['entities']</code>:</p>
<pre class="programlisting" data-language="json" id="user_mention"><code class="p">{</code>
 <code class="nt">"user_mentions"</code><code class="p">:</code> <code class="p">[</code>
  <code class="p">{</code>
   <code class="nt">"indices"</code><code class="p">:</code> <code class="p">[</code>
    <code class="mi">3</code><code class="p">,</code> 
    <code class="mi">18</code>
   <code class="p">],</code> 
   <code class="nt">"screen_name"</code><code class="p">:</code> <code class="s2">"hassanmusician"</code><code class="p">,</code> 
   <code class="nt">"id"</code><code class="p">:</code> <code class="mi">56259379</code><code class="p">,</code> 
   <code class="nt">"name"</code><code class="p">:</code> <code class="s2">"Download the NEW LP!"</code><code class="p">,</code> 
   <code class="nt">"id_str"</code><code class="p">:</code> <code class="s2">"56259379"</code>
  <code class="p">}</code>
 <code class="p">],</code> 
 <code class="nt">"hashtags"</code><code class="p">:</code> <code class="p">[</code>
  <code class="p">{</code>
   <code class="nt">"indices"</code><code class="p">:</code> <code class="p">[</code>
    <code class="mi">20</code><code class="p">,</code> 
    <code class="mi">50</code>
   <code class="p">],</code> 
   <code class="nt">"text"</code><code class="p">:</code> <code class="s2">"MentionSomeoneImportantForYou"</code>
  <code class="p">}</code>
 <code class="p">],</code> 
 <code class="nt">"urls"</code><code class="p">:</code> <code class="p">[]</code>
<code class="p">}</code></pre>
</li>
<li class="listitem"><p id="clues_as_to_the">Clues as to the "interestingness" of a<a id="id538696" class="indexterm"></a><a id="id538701" class="indexterm"></a> tweet are available through <code class="literal">t['favorite_count']</code> and <code class="literal">t['retweet_count']</code>, which return the
          number of times it's been bookmarked or retweeted,
          respectively.</p></li>
<li class="listitem"><p id="if_a_tweet_has_">If a tweet has been retweeted, <a id="id538724" class="indexterm"></a>the <code class="literal">t['retweeted_status']</code> field provides
          significant detail about the original tweet itself and its author.
          Keep in mind that sometimes the text of a tweet changes as it is
          retweeted, as users add reactions or otherwise manipulate the
          text.</p></li>
<li class="listitem"><p id="the_tretweete">The <code class="literal">t['retweeted']</code> field
          <a id="id538748" class="indexterm"></a>denotes whether or not the authenticated user (via an
          authorized application) has retweeted this particular tweet. Fields
          that vary <span class="keep-together">depending</span> upon the
          point of view of the particular user are denoted in Twitter's
          developer documentation as <span class="emphasis"><em>perspectival</em></span>, which
          means that their values will vary depending upon the perspective of
          the user.</p></li>
<li class="listitem"><p id="additionally_n">Additionally, note that only original tweets are retweeted
          from the standpoint of the API and information management. Thus, the
          <code class="literal">retweet_count</code> reflects the total
          number of times that the original tweet has been retweeted and
          should reflect the same value in both the original tweet and all
          subsequent retweets. In other words, retweets aren't retweeted. It
          may be a bit counterintuitive at first, but if you think you're
          retweeting a retweet, you're actually just retweeting the original
          tweet that you were exposed to through a proxy. See <a class="xref" href="ch01.html#examinepatternsinretweets" title="Examining Patterns in Retweets">“Examining Patterns in Retweets”</a> later in this chapter for a
          more nuanced discussion about the difference between retweeting vs
          quoting a tweet.</p></li>
</ul></div>
<div class="warning" id="a_common_mistak_id1"><p id="a_common_mistak_id2">A common mistake is to check the value of the <code class="literal">retweeted</code> field to determine whether or not a
      tweet has ever been retweeted by anyone. To check whether a tweet has
      ever been retweeted, you should instead see whether a <code class="literal">retweeted_status</code> node wrapper exists in the
      tweet.</p></div>
<p id="you_should_tink">You should tinker around with the sample tweet and consult the
    documentation to clarify any lingering questions you might have before
    moving forward. A good working knowledge of a tweet's anatomy is critical
    to effectively mining <a id="id538813" class="indexterm"></a><a id="id538821" class="indexterm"></a><a id="id538829" class="indexterm"></a><a id="id538837" class="indexterm"></a>Twitter data.</p>
<div class="sect2" id="analyzing-twitter-data">
<div class="titlepage"><div><div><h3 class="title">Extracting Tweet Entities</h3></div></div></div>
<p id="next_lets_dis">Next, let's distill the <a id="id538856" class="indexterm"></a><a id="id538863" class="indexterm"></a><a id="id538868" class="indexterm"></a>entities and the text of the tweets into a convenient data
      structure for further examination. <a class="xref" href="ch01.html#list-comprehension" title="Example 1-6. Extracting text, screen names, and hashtags from tweets">Example 1-6</a>
      extracts the text, screen names, and hashtags from the tweets that are
      collected and introduces a Python <a id="id538883" class="indexterm"></a><a id="id538888" class="indexterm"></a><a id="id538893" class="indexterm"></a>idiom called a <span class="emphasis"><em>double</em></span> (or
      <span class="emphasis"><em>nested</em></span>) <span class="emphasis"><em>list comprehension</em></span>. If
      you understand a (single) list comprehension, the code formatting should
      illustrate the double list comprehension as simply a collection of
      values that are derived from a nested loop as opposed to the results of
      a single loop. List comprehensions are particularly powerful because
      they usually yield substantial performance gains over nested lists and
      provide an <a id="id538912" class="indexterm"></a><a id="id538920" class="indexterm"></a>intuitive (once you’re familiar with them) yet terse
      syntax. </p>
<div class="note" id="list_comprehens_id1"><p id="list_comprehens_id2">List comprehensions are used frequently throughout this book,
          and it's worth consulting <a class="xref" href="">???</a> or the <a class="ulink" href="http://bit.ly/1a1l1hy" target="_top">official Python tutorial</a> for
          more details if you'd like additional context.</p></div>
<div class="example" id="list-comprehension">
<div class="example-title">Example 1-6. Extracting text, screen names, and hashtags from tweets</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="status_texts__"><code class="n">status_texts</code> <code class="o">=</code> <code class="p">[</code> <code class="n">status</code><code class="p">[</code><code class="s">'text'</code><code class="p">]</code> 
                 <code class="k">for</code> <code class="n">status</code> <code class="ow">in</code> <code class="n">statuses</code> <code class="p">]</code>

<code class="n">screen_names</code> <code class="o">=</code> <code class="p">[</code> <code class="n">user_mention</code><code class="p">[</code><code class="s">'screen_name'</code><code class="p">]</code> 
                 <code class="k">for</code> <code class="n">status</code> <code class="ow">in</code> <code class="n">statuses</code>
                     <code class="k">for</code> <code class="n">user_mention</code> <code class="ow">in</code> <code class="n">status</code><code class="p">[</code><code class="s">'entities'</code><code class="p">][</code><code class="s">'user_mentions'</code><code class="p">]</code> <code class="p">]</code>

<code class="n">hashtags</code> <code class="o">=</code> <code class="p">[</code> <code class="n">hashtag</code><code class="p">[</code><code class="s">'text'</code><code class="p">]</code> 
             <code class="k">for</code> <code class="n">status</code> <code class="ow">in</code> <code class="n">statuses</code>
                 <code class="k">for</code> <code class="n">hashtag</code> <code class="ow">in</code> <code class="n">status</code><code class="p">[</code><code class="s">'entities'</code><code class="p">][</code><code class="s">'hashtags'</code><code class="p">]</code> <code class="p">]</code>

<code class="c"># Compute a collection of all words from all tweets</code>
<code class="n">words</code> <code class="o">=</code> <code class="p">[</code> <code class="n">w</code> 
          <code class="k">for</code> <code class="n">t</code> <code class="ow">in</code> <code class="n">status_texts</code> 
              <code class="k">for</code> <code class="n">w</code> <code class="ow">in</code> <code class="n">t</code><code class="o">.</code><code class="n">split</code><code class="p">()</code> <code class="p">]</code>

<code class="c"># Explore the first 5 items for each...</code>

<code class="k">print</code> <code class="n">json</code><code class="o">.</code><code class="n">dumps</code><code class="p">(</code><code class="n">status_texts</code><code class="p">[</code><code class="mi">0</code><code class="p">:</code><code class="mi">5</code><code class="p">],</code> <code class="n">indent</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code>
<code class="k">print</code> <code class="n">json</code><code class="o">.</code><code class="n">dumps</code><code class="p">(</code><code class="n">screen_names</code><code class="p">[</code><code class="mi">0</code><code class="p">:</code><code class="mi">5</code><code class="p">],</code> <code class="n">indent</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code> 
<code class="k">print</code> <code class="n">json</code><code class="o">.</code><code class="n">dumps</code><code class="p">(</code><code class="n">hashtags</code><code class="p">[</code><code class="mi">0</code><code class="p">:</code><code class="mi">5</code><code class="p">],</code> <code class="n">indent</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code>
<code class="k">print</code> <code class="n">json</code><code class="o">.</code><code class="n">dumps</code><code class="p">(</code><code class="n">words</code><code class="p">[</code><code class="mi">0</code><code class="p">:</code><code class="mi">5</code><code class="p">],</code> <code class="n">indent</code><code class="o">=</code><code class="mi">1</code><code class="p">)</code></pre></div>
</div>
<p id="sample_output_f">Sample output follows; it displays five status texts, screen
      names, and hashtags to provide a feel for what's in the data.<a id="id539576" class="indexterm"></a></p>
<div class="note" id="in_python_synt_id1"><p id="in_python_synt_id2">In Python, syntax in which square brackets appear after a list
        or string value, such as <code class="literal">status_texts[0:5]</code>, is indicative of
        <span class="emphasis"><em>slicing</em></span>, whereby you can easily extract items
        from lists or substrings from strings. In this particular case,
        <code class="literal">[0:5]</code> indicates that you'd like the
        first five items in the list <code class="literal">status_texts</code> (corresponding to items at
        indices 0 through 4). See <a class="xref" href="">???</a> for a more extended
        description of slicing in Python.</p></div>
<pre class="programlisting" data-language="py" id="uckathl"><code class="p">[</code>
 <code class="s">"</code><code class="se">\u201c</code><code class="s">@KathleenMariee_: #MentionSomeOneImportantForYou @AhhlicksCruise..., </code>
 <code class="s">"#MentionSomeoneImportantForYou My bf @Linkin_Sunrise."</code><code class="p">,</code> 
 <code class="s">"RT @hassanmusician: #MentionSomeoneImportantForYou God."</code><code class="p">,</code> 
 <code class="s">"#MentionSomeoneImportantForYou @Louis_Tomlinson"</code><code class="p">,</code> 
 <code class="s">"#MentionSomeoneImportantForYou @Delta_Universe"</code>
<code class="p">]</code>
<code class="p">[</code>
 <code class="s">"KathleenMariee_"</code><code class="p">,</code> 
 <code class="s">"AhhlicksCruise"</code><code class="p">,</code> 
 <code class="s">"itsravennn_cx"</code><code class="p">,</code> 
 <code class="s">"kandykisses_13"</code><code class="p">,</code> 
 <code class="s">"BMOLOGY"</code>
<code class="p">]</code>
<code class="p">[</code>
 <code class="s">"MentionSomeOneImportantForYou"</code><code class="p">,</code> 
 <code class="s">"MentionSomeoneImportantForYou"</code><code class="p">,</code> 
 <code class="s">"MentionSomeoneImportantForYou"</code><code class="p">,</code> 
 <code class="s">"MentionSomeoneImportantForYou"</code><code class="p">,</code> 
 <code class="s">"MentionSomeoneImportantForYou"</code>
<code class="p">]</code>
<code class="p">[</code>
 <code class="s">"</code><code class="se">\u201c</code><code class="s">@KathleenMariee_:"</code><code class="p">,</code> 
 <code class="s">"#MentionSomeOneImportantForYou"</code><code class="p">,</code> 
 <code class="s">"@AhhlicksCruise"</code><code class="p">,</code> 
 <code class="s">","</code><code class="p">,</code> 
 <code class="s">"@itsravennn_cx"</code>
<code class="p">]</code></pre>
<p id="as_expected_m">As expected, #MentionSomeoneImportantForYou dominates the hashtag
      output. The output also provides a few commonly occurring screen names
      that are worth <span class="keep-together">investigating</span>.</p>
</div>
<div class="sect2" id="analyzing_tweets_and_tweet_entities_with_frequency_analysis">
<div class="titlepage"><div><div><h3 class="title">Analyzing Tweets and Tweet Entities with Frequency
      Analysis</h3></div></div></div>
<p id="virtually_all_a">Virtually all analysis <a id="twe1.4.2" class="indexterm"></a><a id="tw1.4.2" class="indexterm"></a><a id="fr1.4.2" class="indexterm"></a><a id="an1.4.2" class="indexterm"></a>boils down to the simple exercise of counting things on
      some level, and much of what we'll be doing in this book is manipulating
      data so that it can be counted and further manipulated in meaningful
      ways.</p>
<p id="from_an_empiric">From an empirical standpoint, counting observable things is the
      starting point for just about everything, and thus the starting point
      for any kind of statistical filtering or manipulation that strives to
      find what may be a faint signal in noisy data. Whereas we just extracted
      the first 5 items of each unranked list to get a feel for the data,
      let's now take a closer look at what's in the data by computing a
      frequency distribution and looking at the top 10 items in each
      list.</p>
<p id="as_of_python_">As of Python 2.7, a <a class="ulink" href="http://bit.ly/1a1l4tC" target="_top"><code class="literal">collections</code></a> module is <a id="id539938" class="indexterm"></a><a id="id539946" class="indexterm"></a><a id="id539953" class="indexterm"></a>available that provides a counter that makes computing a
      frequency distribution rather trivial. <a class="xref" href="ch01.html#basic-frequency-analysis" title="Example 1-7. Creating a basic frequency distribution from the words in tweets">Example 1-7</a> demonstrates how to use a <code class="literal">Counter</code> to compute frequency distributions as
      ranked lists of terms. Among the more compelling reasons for mining
      Twitter data is to try to answer the question of what people are talking
      about <span class="emphasis"><em>right now</em></span>. One of the simplest techniques you
      could apply to answer this question is basic frequency analysis, just as
      we are performing here.</p>
<div class="example" id="basic-frequency-analysis">
<div class="example-title">Example 1-7. Creating a basic frequency distribution from the words in
        tweets</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="from_collection"><code class="kn">from</code> <code class="nn">collections</code> <code class="kn">import</code> <code class="n">Counter</code>

<code class="k">for</code> <code class="n">item</code> <code class="ow">in</code> <code class="p">[</code><code class="n">words</code><code class="p">,</code> <code class="n">screen_names</code><code class="p">,</code> <code class="n">hashtags</code><code class="p">]:</code>
    <code class="n">c</code> <code class="o">=</code> <code class="n">Counter</code><code class="p">(</code><code class="n">item</code><code class="p">)</code>
    <code class="k">print</code> <code class="n">c</code><code class="o">.</code><code class="n">most_common</code><code class="p">()[:</code><code class="mi">10</code><code class="p">]</code> <code class="c"># top 10</code>
    <code class="k">print</code></pre></div>
</div>
<p id="here_are_some_s">Here are some sample results from frequency analysis of
      tweets:</p>
<pre class="programlisting" id="umentionsom">[(u'#MentionSomeoneImportantForYou', 92), (u'RT', 34), (u'my', 10), 
 (u',', 6), (u'@justinbieber', 6), (u'&lt;3', 6), (u'My', 5), (u'and', 4), 
 (u'I', 4), (u'te', 3)]

[(u'justinbieber', 6), (u'Kid_Charliej', 2), (u'Cavillafuerte', 2), 
 (u'touchmestyles_', 1), (u'aliceorr96', 1), (u'gymleeam', 1), (u'fienas', 1), 
 (u'nayely_1D', 1), (u'angelchute', 1)]

[(u'MentionSomeoneImportantForYou', 94), (u'mentionsomeoneimportantforyou', 3), 
 (u'NoHomo', 1), (u'Love', 1), (u'MentionSomeOneImportantForYou', 1), 
 (u'MyHeart', 1),  (u'bebesito', 1)]</pre>
<p id="the_result_of_t">The result of the frequency distribution is a map of key/value
      pairs corresponding to terms and their frequencies, so let's make
      reviewing the results a little easier on the eyes by emitting a tabular
      format. You can install a package called <code class="literal">prettytable</code> by typing <strong class="userinput"><code>pip install prettytable</code></strong> in a terminal; this
      package provides a convenient way to emit a fixed-width tabular format
      that can be easily copied-and-pasted.</p>
<p id="shows_how_to_us"><a class="xref" href="ch01.html#prettytable" title="Example 1-8. Using prettytable to display tuples in a nice tabular format">Example 1-8</a> shows how to use it to display the
      same results.</p>
<div class="example" id="prettytable">
<div class="example-title">Example 1-8. Using prettytable to display tuples in a nice tabular
          format</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="from_prettytabl"><code class="kn">from</code> <code class="nn">prettytable</code> <code class="kn">import</code> <code class="n">PrettyTable</code>

<code class="k">for</code> <code class="n">label</code><code class="p">,</code> <code class="n">data</code> <code class="ow">in</code> <code class="p">((</code><code class="s">'Word'</code><code class="p">,</code> <code class="n">words</code><code class="p">),</code> 
                    <code class="p">(</code><code class="s">'Screen Name'</code><code class="p">,</code> <code class="n">screen_names</code><code class="p">),</code> 
                    <code class="p">(</code><code class="s">'Hashtag'</code><code class="p">,</code> <code class="n">hashtags</code><code class="p">)):</code>
    <code class="n">pt</code> <code class="o">=</code> <code class="n">PrettyTable</code><code class="p">(</code><code class="n">field_names</code><code class="o">=</code><code class="p">[</code><code class="n">label</code><code class="p">,</code> <code class="s">'Count'</code><code class="p">])</code> 
    <code class="n">c</code> <code class="o">=</code> <code class="n">Counter</code><code class="p">(</code><code class="n">data</code><code class="p">)</code>
    <code class="p">[</code> <code class="n">pt</code><code class="o">.</code><code class="n">add_row</code><code class="p">(</code><code class="n">kv</code><code class="p">)</code> <code class="k">for</code> <code class="n">kv</code> <code class="ow">in</code> <code class="n">c</code><code class="o">.</code><code class="n">most_common</code><code class="p">()[:</code><code class="mi">10</code><code class="p">]</code> <code class="p">]</code>
    <code class="n">pt</code><code class="o">.</code><code class="n">align</code><code class="p">[</code><code class="n">label</code><code class="p">],</code> <code class="n">pt</code><code class="o">.</code><code class="n">align</code><code class="p">[</code><code class="s">'Count'</code><code class="p">]</code> <code class="o">=</code> <code class="s">'l'</code><code class="p">,</code> <code class="s">'r'</code> <code class="c"># Set column alignment</code>
    <code class="k">print</code> <code class="n">pt</code></pre></div>
</div>
<p id="the_results_fro">The results from <a class="xref" href="ch01.html#prettytable" title="Example 1-8. Using prettytable to display tuples in a nice tabular format">Example 1-8</a> are displayed as a
      series of nicely formatted text-based tables that are easy to skim, as
      the following output demonstrates.</p>
<pre class="programlisting" id="programlisting_id1">+--------------------------------+-------+
| Word                           | Count |
+--------------------------------+-------+
| #MentionSomeoneImportantForYou |    92 |
| RT                             |    34 |
| my                             |    10 |
| ,                              |     6 |
| @justinbieber                  |     6 |
| &amp;lt;3                          |     6 |
| My                             |     5 |
| and                            |     4 |
| I                              |     4 |
| te                             |     3 |
+--------------------------------+-------+
+----------------+-------+
| Screen Name    | Count |
+----------------+-------+
| justinbieber   |     6 |
| Kid_Charliej   |     2 |
| Cavillafuerte  |     2 |
| touchmestyles_ |     1 |
| aliceorr96     |     1 |
| gymleeam       |     1 |
| fienas         |     1 |
| nayely_1D      |     1 |
| angelchute     |     1 |
+----------------+-------+
+-------------------------------+-------+
| Hashtag                       | Count |
+-------------------------------+-------+
| MentionSomeoneImportantForYou |    94 |
| mentionsomeoneimportantforyou |     3 |
| NoHomo                        |     1 |
| Love                          |     1 |
| MentionSomeOneImportantForYou |     1 |
| MyHeart                       |     1 |
| bebesito                      |     1 |
+-------------------------------+-------+</pre>
<p id="a_quick_skim_of">A quick skim of the results reveals at least one marginally
      surprising thing: Justin Bieber is high on the list of entities for this
      small sample of data, and given his popularity with tweens on Twitter he
      may very well have been the "most important someone" for this trending
      topic, though the results here are inconclusive. The appearance of
      <code class="literal">&amp;lt;3</code> is also interesting because
      it is an escaped form of <code class="literal">&lt;3</code>, which
      represents a heart shape (that's rotated 90 degrees, like other
      emoticons and smileys) and is a common abbreviation for "loves." Given
      the nature of the query, it's not surprising to see a value like
      <code class="literal">&amp;lt;3</code>, although it may initially
      seem like junk or noise.</p>
<p id="although_the_en">Although the entities with a frequency greater than two are
      interesting, the broader results are also revealing in other ways. For
      example, "RT" was a very common token, implying that there were a
      significant number of retweets (we'll investigate this observation
      further in <a class="xref" href="ch01.html#examinepatternsinretweets" title="Examining Patterns in Retweets">“Examining Patterns in Retweets”</a>). Finally, as
      might be expected, the #MentionSomeoneImportantForYou hashtag and a
      couple of case-sensitive variations dominated the hashtags; a
      data-processing takeaway is that it would be worthwhile to normalize
      each word, screen name, and hashtag to lowercase when tabulating
      frequencies since there will inevitably be variation <a id="id540630" class="indexterm"></a><a id="id540638" class="indexterm"></a><a id="id540646" class="indexterm"></a><a id="id540654" class="indexterm"></a>in tweets.</p>
</div>
<div class="sect2" id="computing_the_lexical_diversity_of_tweets">
<div class="titlepage"><div><div><h3 class="title">Computing the Lexical Diversity of Tweets</h3></div></div></div>
<p id="a_slightly_more">A slightly more <a id="tw1.4.3" class="indexterm"></a><a id="an1.4.3" class="indexterm"></a><a id="le1.4.3" class="indexterm"></a>advanced measurement that involves calculating simple
      frequencies and can be applied to unstructured text is a metric called
      <span class="emphasis"><em>lexical diversity</em></span>. Mathematically, this is an
      expression of the number of <span class="emphasis"><em>unique</em></span> tokens in the
      text divided by the <span class="emphasis"><em>total</em></span> number of tokens in the
      text, which are both elementary yet important metrics in and of
      themselves. Lexical diversity is an interesting concept in the area of
      interpersonal communications because it provides a quantitative measure
      for the diversity of an individual's or group's vocabulary. For example,
      suppose you are listening to someone who repeatedly says "and stuff" to
      broadly generalize information as opposed to providing specific examples
      to reinforce points with more detail or clarity. Now, contrast that
      speaker to someone else who seldom uses the word "stuff" to generalize
      and instead reinforces points with concrete examples. The speaker who
      repeatedly says "and stuff" would have a lower lexical diversity than
      the speaker who uses a more diverse vocabulary, and chances are
      reasonably good that you'd walk away from the conversation feeling as
      though the speaker with the higher lexical diversity understands the
      subject matter better.</p>
<p id="as_applied_to_t">As applied to tweets or similar online communications, lexical
      diversity can be worth considering as a primitive statistic for
      answering a number of questions, such as how broad or narrow the subject
      matter is that an individual or group discusses. Although an overall
      assessment could be interesting, breaking down the analysis to specific
      time periods could yield additional insight, as could comparing
      different groups or individuals. For example, it would be interesting to
      measure whether or not there is a significant difference between the
      lexical diversity of two soft drink companies such as <a class="ulink" href="http://bit.ly/1a1l5xR" target="_top">Coca-Cola</a> and <a class="ulink" href="http://bit.ly/1a1l7pt" target="_top">Pepsi</a> as an entry point for
      exploration if you were comparing the effectiveness of their social
      media marketing campaigns on Twitter.</p>
<p id="with_a_basic_un">With a basic understanding of how to use a statistic like lexical
      diversity to analyze textual content such as tweets, let's now compute
      the lexical diversity for statuses, screen names, and hashtags for our
      working data set, as shown in <a class="xref" href="ch01.html#tweet-lexical-diversity" title="Example 1-9. Calculating lexical diversity for tweets">Example 1-9</a>.</p>
<div class="example" id="tweet-lexical-diversity">
<div class="example-title">Example 1-9. Calculating lexical diversity for tweets</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="a_function_fo"><code class="c"># A function for computing lexical diversity</code>
<code class="k">def</code> <code class="nf">lexical_diversity</code><code class="p">(</code><code class="n">tokens</code><code class="p">):</code>
    <code class="k">return</code> <code class="mf">1.0</code><code class="o">*</code><code class="nb">len</code><code class="p">(</code><code class="nb">set</code><code class="p">(</code><code class="n">tokens</code><code class="p">))</code><code class="o">/</code><code class="nb">len</code><code class="p">(</code><code class="n">tokens</code><code class="p">)</code> 

<code class="c"># A function for computing the average number of words per tweet</code>
<code class="k">def</code> <code class="nf">average_words</code><code class="p">(</code><code class="n">statuses</code><code class="p">):</code>
    <code class="n">total_words</code> <code class="o">=</code> <code class="nb">sum</code><code class="p">([</code> <code class="nb">len</code><code class="p">(</code><code class="n">s</code><code class="o">.</code><code class="n">split</code><code class="p">())</code> <code class="k">for</code> <code class="n">s</code> <code class="ow">in</code> <code class="n">statuses</code> <code class="p">])</code> 
    <code class="k">return</code> <code class="mf">1.0</code><code class="o">*</code><code class="n">total_words</code><code class="o">/</code><code class="nb">len</code><code class="p">(</code><code class="n">statuses</code><code class="p">)</code>

<code class="k">print</code> <code class="n">lexical_diversity</code><code class="p">(</code><code class="n">words</code><code class="p">)</code>
<code class="k">print</code> <code class="n">lexical_diversity</code><code class="p">(</code><code class="n">screen_names</code><code class="p">)</code>
<code class="k">print</code> <code class="n">lexical_diversity</code><code class="p">(</code><code class="n">hashtags</code><code class="p">)</code>
<code class="k">print</code> <code class="n">average_words</code><code class="p">(</code><code class="n">status_texts</code><code class="p">)</code></pre></div>
</div>
<div class="warning" id="prior_to_python_id1"><p id="prior_to_python_id2">Prior to Python 3.0, the division operator (<code class="literal">/</code>) applies the <code class="literal">floor</code> function and returns an integer value
        (unless one of the operands is a floating-point value). Multiply
        either the numerator or the denominator by 1.0 to avoid truncation
        errors.</p></div>
<p id="the_results_of__id2">The results of <a class="xref" href="ch01.html#tweet-lexical-diversity" title="Example 1-9. Calculating lexical diversity for tweets">Example 1-9</a>
      follow:</p>
<pre class="programlisting" id="programlisting_id2">0.67610619469
0.955414012739
0.0686274509804
5.76530612245</pre>
<p id="there_are_a_few">There are a few observations worth considering in the
      results:</p>
<p id="the_lexical_div_id1"></p>
<div class="itemizedlist" id="the_lexical_div_id2"><ul class="itemizedlist">
<li class="listitem"><p id="the_lexical_div_id3">The lexical diversity of the words in the text of the tweets
            is around 0.67. One way to interpret that figure would be to say
            that about two out of every three words is unique, or you might
            say that each status update carries around 67% unique information.
            Given that the average number of words in each tweet is around
            six, that translates to about four unique words per tweet.
            Intuition aligns with the data in that the nature of a
            #MentionSomeoneImportantForYou trending hashtag is to solicit a
            response that will probably be a few words long. In any event, a
            value of 0.67 is on the high side for lexical diversity of
            ordinary human communication, but given the nature of the data, it
            seems very reasonable.</p></li>
<li class="listitem"><p id="the_lexical_div_id4">The lexical diversity of the<a id="id541160" class="indexterm"></a> screen names, however, is even higher, with a value
            of 0.95, which means that about 19 out of 20 screen names
            mentioned are unique. This observation also makes sense given that
            many answers to the question will be a screen name, and that most
            people won't be providing the same responses for the solicitous
            hashtag.</p></li>
<li class="listitem"><p id="the_lexical_div_id5">The lexical diversity of the hashtags is <a id="id541179" class="indexterm"></a>extremely low at a value of around 0.068, implying
            that very few values other than the #MentionSomeoneImportantForYou
            hashtag appear multiple times in the results. Again, this makes
            good sense given that most responses are short and that hashtags
            really wouldn't make much sense to introduce as a response to the
            prompt of mentioning someone important for you.</p></li>
<li class="listitem"><p id="the_average_num">The average number of words per tweet is very low at a value
            of just under 6, which makes sense given the nature of the
            hashtag, which is designed to solicit short responses consisting
            of just a few words.</p></li>
</ul></div>
<p id="what_would_be_i">What would be interesting at this point would be to zoom in on
      some of the data and see if there were any common responses or other
      insights that could come from a more qualitative analysis. Given an
      average number of words per tweet as low as 6, it's unlikely that users
      applied any abbreviations to stay within the 140 characters, so the
      amount of noise for the data should be remarkably low, and additional
      frequency analysis may reveal some fascinating <a id="id541206" class="indexterm"></a><a id="id541214" class="indexterm"></a><a id="id541222" class="indexterm"></a>things.</p>
</div>
<div class="sect2" id="examinepatternsinretweets">
<div class="titlepage"><div><div><h3 class="title">Examining Patterns in Retweets</h3></div></div></div>
<p id="even_though_the">Even though the user <a id="an1.4.4" class="indexterm"></a><a id="re1.4.4" class="indexterm"></a><a id="pa1.4.4" class="indexterm"></a><a id="tw1.4.4" class="indexterm"></a>interface and many Twitter clients have long since adopted
      the native Retweet API used to populate status <a id="id541290" class="indexterm"></a>values such as <code class="literal">retweet_count</code> and <code class="literal">retweeted_status</code>, some <a id="id541307" class="indexterm"></a>Twitter users may prefer to <a class="ulink" href="http://bit.ly/1a1l7FZ" target="_top">quote a tweet</a>, which <a id="id541318" class="indexterm"></a><a id="id541326" class="indexterm"></a>entails a workflow involving copying and pasting the text
      and prepending "RT @<span class="emphasis"><em>username</em></span>" or suffixing "/via
      @<span class="emphasis"><em>username</em></span>" to provide attribution.</p>
<div class="note" id="when_mining_twi_id1"><p id="when_mining_twi_id2">When mining Twitter data, you'll probably want to both account
        for the tweet metadata and use heuristics to analyze the 140
        characters for conventions such as "RT @<span class="emphasis"><em>username</em></span>"
        or "/via @<span class="emphasis"><em>username</em></span>" when considering retweets, in
        order to maximize the efficacy of your analysis. See <a class="xref" href="">???</a> for a more
        detailed discussion on retweeting with Twitter's native Retweet API
        versus "quoting" tweets and using conventions to apply
        attribution.</p></div>
<p id="a_good_exercise">A good exercise at this point would be to further analyze the data
      to determine if there was a particular tweet that was highly retweeted
      or if there were just lots of "one-off" retweets. The approach we'll
      take to find the most popular retweets is to simply iterate over each
      status update and store out the retweet count, originator of the
      retweet, and text of the retweet if the status update is a retweet.
      <a class="xref" href="ch01.html#finding_popular_retweets" title="Example 1-10. Finding the most popular retweets">Example 1-10</a> demonstrates how to capture
      these values with a list comprehension and sort by the retweet count to
      display the top few results.</p>
<div class="example" id="finding_popular_retweets">
<div class="example-title">Example 1-10. Finding the most popular retweets</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="retweets____"><code class="n">retweets</code> <code class="o">=</code> <code class="p">[</code>
            <code class="c"># Store out a tuple of these three values ...</code>
            <code class="p">(</code><code class="n">status</code><code class="p">[</code><code class="s">'retweet_count'</code><code class="p">],</code> 
             <code class="n">status</code><code class="p">[</code><code class="s">'retweeted_status'</code><code class="p">][</code><code class="s">'user'</code><code class="p">][</code><code class="s">'screen_name'</code><code class="p">],</code>
             <code class="n">status</code><code class="p">[</code><code class="s">'text'</code><code class="p">])</code> 
            
            <code class="c"># ... for each status ...</code>
            <code class="k">for</code> <code class="n">status</code> <code class="ow">in</code> <code class="n">statuses</code> 
            
            <code class="c"># ... so long as the status meets this condition.</code>
                <code class="k">if</code> <code class="n">status</code><code class="o">.</code><code class="n">has_key</code><code class="p">(</code><code class="s">'retweeted_status'</code><code class="p">)</code>
           <code class="p">]</code>

<code class="c"># Slice off the first 5 from the sorted results and display each item in the tuple</code>

<code class="n">pt</code> <code class="o">=</code> <code class="n">PrettyTable</code><code class="p">(</code><code class="n">field_names</code><code class="o">=</code><code class="p">[</code><code class="s">'Count'</code><code class="p">,</code> <code class="s">'Screen Name'</code><code class="p">,</code> <code class="s">'Text'</code><code class="p">])</code>
<code class="p">[</code> <code class="n">pt</code><code class="o">.</code><code class="n">add_row</code><code class="p">(</code><code class="n">row</code><code class="p">)</code> <code class="k">for</code> <code class="n">row</code> <code class="ow">in</code> <code class="nb">sorted</code><code class="p">(</code><code class="n">retweets</code><code class="p">,</code> <code class="n">reverse</code><code class="o">=</code><code class="bp">True</code><code class="p">)[:</code><code class="mi">5</code><code class="p">]</code> <code class="p">]</code>
<code class="n">pt</code><code class="o">.</code><code class="n">max_width</code><code class="p">[</code><code class="s">'Text'</code><code class="p">]</code> <code class="o">=</code> <code class="mi">50</code>
<code class="n">pt</code><code class="o">.</code><code class="n">align</code><code class="o">=</code> <code class="s">'l'</code>
<code class="k">print</code> <code class="n">pt</code></pre></div>
</div>
<p id="results_from_ar">Results from <a class="xref" href="ch01.html#finding_popular_retweets" title="Example 1-10. Finding the most popular retweets">Example 1-10</a> are
      interesting:</p>
<pre class="programlisting" id="programlisting_id3">+-------+----------------+----------------------------------------------------+
| Count | Screen Name    | Text                                               |
+-------+----------------+----------------------------------------------------+
| 23    | hassanmusician | RT @hassanmusician: #MentionSomeoneImportantForYou |
|       |                | God.                                               |
| 21    | HSweethearts   | RT @HSweethearts: #MentionSomeoneImportantForYou   |
|       |                | my high school sweetheart ❤                        |
| 15    | LosAlejandro_  | RT @LosAlejandro_: ¿Nadie te menciono en           |
|       |                | "#MentionSomeoneImportantForYou"? JAJAJAJAJAJAJAJA |
|       |                | JAJAJAJAJAJAJAJAJAJAJAJAJAJAJAJAJAJAJAJA Ven, ...  |
| 9     | SCOTTSUMME     | RT @SCOTTSUMME: #MentionSomeoneImportantForYou My  |
|       |                | Mum. Shes loving, caring, strong, all in one. I    |
|       |                | love her so much ❤❤❤❤                            |
| 7     | degrassihaha   | RT @degrassihaha: #MentionSomeoneImportantForYou I |
|       |                | can't put every Degrassi cast member, crew member, |
|       |                | and writer in just one tweet....                   |
+-------+----------------+----------------------------------------------------+</pre>
<p id="god_tops_the_">"God" tops the list, followed closely by "my high school
      sweetheart," and coming in at number four on the list is "My Mum." None
      of the top five items in the list correspond to Twitter user accounts,
      although we might have suspected this (with the exception of
      @justinbieber) from the previous analysis. Inspection of results further
      down the list does reveal particular user mentions, but the sample we
      have drawn from for this query is so small that no trends emerge.
      Searching for a larger sample of results would likely yield some user
      mentions with a frequency greater than one, which would be interesting
      to further analyze. The possibilities for further analysis are pretty
      open-ended, and by now, hopefully, you're itching to try out some custom
      queries of your own.</p>
<div class="note" id="suggested_exerc_id1"><p id="suggested_exerc_id2">Suggested exercises are at the end of this chapter. Be sure to
        also check out <a class="xref" href="">???</a> as a source of
        inspiration: it includes more than two dozen recipes presented in a
        cookbook-style format.</p></div>
<p id="before_we_move_">Before we move on, a subtlety worth noting is that it's quite
      possible (and probable, given the relatively low frequencies of the
      retweets observed in this section) that the original tweets that were
      retweeted may not exist in our sample search results set. For example,
      the most popular retweet in the sample results originated from a user
      with a screen name of @hassanmusician and was retweeted 23 times.
      However, closer inspection of the data reveals that we collected only 1
      of the 23 retweets in our search results. Neither the original tweet nor
      any of the other 22 retweets appears in the data set. This doesn't pose
      any particular problems, although it might beg the question of who the
      other 22 retweeters for this status were.</p>
<p id="the_answer_to_t">The answer to this kind of question is a valuable one because it
      allows us to take content that represents a concept, such as "God" in
      this case, and discover a group of other users who apparently share the
      same sentiment or common interest. As previously mentioned, a handy way
      to model data involving people and the things that they're interested in
      is called <a id="id541849" class="indexterm"></a><a id="id541856" class="indexterm"></a><a id="id541864" class="indexterm"></a>an <span class="emphasis"><em>interest graph</em></span>; this is the
      primary data structure that supports analysis in <a class="xref" href="">???</a>.
      Interpretative speculation about these users could suggest that they are
      spiritual or religious individuals, and further analysis of their
      particular tweets might corroborate that inference. <a class="xref" href="ch01.html#find_retweeters" title="Example 1-11. Looking up users who have retweeted a status">Example 1-11</a> shows how to find these individuals
      <a id="id541888" class="indexterm"></a>with the <a class="ulink" href="http://bit.ly/1a1l64H" target="_top"><code class="literal">GET
      statuses/retweets/:id</code> API</a>.</p>
<div class="example" id="find_retweeters">
<div class="example-title">Example 1-11. Looking up users who have retweeted a status</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="get_the_origi"><code class="c"># Get the original tweet id for a tweet from its retweeted_status node </code>
<code class="c"># and insert it here in place of the sample value that is provided</code>
<code class="c"># from the text of the book</code>

<code class="n">_retweets</code> <code class="o">=</code> <code class="n">twitter_api</code><code class="o">.</code><code class="n">statuses</code><code class="o">.</code><code class="n">retweets</code><code class="p">(</code><code class="nb">id</code><code class="o">=</code><code class="mi">317127304981667841</code><code class="p">)</code>
<code class="k">print</code> <code class="p">[</code><code class="n">r</code><code class="p">[</code><code class="s">'user'</code><code class="p">][</code><code class="s">'screen_name'</code><code class="p">]</code> <code class="k">for</code> <code class="n">r</code> <code class="ow">in</code> <code class="n">_retweets</code><code class="p">]</code></pre></div>
</div>
<p id="further_analysi">Further analysis of the users who retweeted this particular status
      for any particular religious or spiritual affiliation is left as an
      independent <a id="id542050" class="indexterm"></a><a id="id542058" class="indexterm"></a><a id="id542066" class="indexterm"></a><a id="id542075" class="indexterm"></a>exercise.</p>
</div>
<div class="sect2" id="twitter-histograms">
<div class="titlepage"><div><div><h3 class="title">Visualizing Frequency Data with Histograms</h3></div></div></div>
<p id="a_nice_feature_">A nice feature of <a id="fr1.4.5" class="indexterm"></a><a id="an1.4.5" class="indexterm"></a><a id="hi1.4.5" class="indexterm"></a><a id="hg1.4.5" class="indexterm"></a><a id="vi1.4.5" class="indexterm"></a>IPython Notebook is its ability to generate and insert
      high-quality and customizable plots of data as part of an interactive
      workflow. In particular, <a id="ma1.4.5" class="indexterm"></a>the <code class="literal"><a class="ulink" href="http://bit.ly/1a1l7Wv" target="_top">matplotlib</a></code> package and
      other scientific computing tools that are available for IPython Notebook
      are quite powerful and capable of generating complex figures with very
      little effort once you understand the basic workflows.</p>
<p id="to_illustrate_t">To illustrate the use of <code class="literal">matplotlib</code>'s plotting capabilities, let's plot
      some data for display. To get warmed up, we’ll consider a plot that
      displays the results from the <code class="literal">words</code>
      variable as defined in <a class="xref" href="ch01.html#tweet-lexical-diversity" title="Example 1-9. Calculating lexical diversity for tweets">Example 1-9</a>. With
      the help of a <code class="literal">Counter</code>, it's easy to
      generate a sorted list of tuples where each tuple is a <code class="literal">(word, frequency)</code> pair; the x-axis value will
      correspond to the index of the tuple, and the y-axis will correspond to
      the frequency for the word in that tuple. It would generally be
      impractical to try to plot each word as a value on the x-axis, although
      that's what the x-axis is representing. <a class="xref" href="ch01.html#freqdist1" title="Figure 1-4. A plot displaying the sorted frequencies for the words computed by Example 1-8">Figure 1-4</a>
      displays a plot for the same words data that we previously rendered as a
      table in <a class="xref" href="ch01.html#prettytable" title="Example 1-8. Using prettytable to display tuples in a nice tabular format">Example 1-8</a>. The y-axis values on the plot
      correspond to the number of times a word appeared. Although labels for
      each word are not provided, x-axis values have been sorted so that the
      relationship between word frequencies is more apparent. Each axis has
      been adjusted to a logarithmic scale to "squash" the curve being
      displayed. The plot can be generated directly in IPython Notebook
      <a id="id542221" class="indexterm"></a>with the code shown in <a class="xref" href="ch01.html#freqdist" title="Example 1-12. Plotting frequencies of words">Example 1-12</a>.</p>
<div class="figure" id="freqdist1">
<div class="figure-contents"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000001583/images/mswb_0104.png" alt="A plot displaying the sorted frequencies for the words computed by"></div></div>
<div class="figure-title">Figure 1-4. A plot displaying the sorted frequencies for the words computed
        by <a class="xref" href="ch01.html#prettytable" title="Example 1-8. Using prettytable to display tuples in a nice tabular format">Example 1-8</a>
</div>
</div>
<div class="note" id="if_you_are_usin_id1">
<p id="if_you_are_usin_id2">If you are using the virtual machine, your IPython Notebooks
        should be configured to use plotting capabilities out of the box. If
        you are running on your own local environment, be sure to have started
        IPython Notebook with <a class="ulink" href="http://bit.ly/1a1l6BN" target="_top">PyLab</a>
        enabled as follows:</p>
<pre class="programlisting" id="ipython_noteboo">ipython notebook --pylab=inline</pre>
</div>
<div class="example" id="freqdist">
<div class="example-title">Example 1-12. Plotting frequencies of words</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="word_counts__s"><code class="n">word_counts</code> <code class="o">=</code> <code class="nb">sorted</code><code class="p">(</code><code class="n">Counter</code><code class="p">(</code><code class="n">words</code><code class="p">)</code><code class="o">.</code><code class="n">values</code><code class="p">(),</code> <code class="n">reverse</code><code class="o">=</code><code class="bp">True</code><code class="p">)</code>

<code class="n">plt</code><code class="o">.</code><code class="n">loglog</code><code class="p">(</code><code class="n">word_counts</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">ylabel</code><code class="p">(</code><code class="s">"Freq"</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">xlabel</code><code class="p">(</code><code class="s">"Word Rank"</code><code class="p">)</code></pre></div>
</div>
<p id="a_plot_of_frequ">A plot of frequency values is intuitive and convenient, but it can also be
      useful to group together data values into bins that correspond to a
      range of frequencies. For example, how many words have a frequency
      between 1 and 5, between 5 and 10, between 10 and 15, and so forth? A
      <a class="ulink" href="http://bit.ly/1a1l6Sk" target="_top"><span class="emphasis"><em>histogram</em></span></a> is
      designed <a id="id542439" class="indexterm"></a><a id="id542447" class="indexterm"></a>for precisely this purpose and provides a convenient
      visualization for displaying tabulated frequencies as adjacent
      rectangles, where the area of each rectangle is a measure of the data
      values that fall within that particular range of values. Figures <a class="xref" href="ch01.html#hist1" title="Figure 1-5. Histograms of tabulated frequency data for words, screen names, and hashtags, each displaying a particular kind of data that is grouped by frequency">1-5</a> and <a class="xref" href="ch01.html#hist2" title="Figure 1-6. A histogram of retweet frequencies">1-6</a> show histograms of
      the tabular data generated from Examples <a class="xref" href="ch01.html#prettytable" title="Example 1-8. Using prettytable to display tuples in a nice tabular format">1-8</a> and <a class="xref" href="ch01.html#finding_popular_retweets" title="Example 1-10. Finding the most popular retweets">1-10</a>,
      respectively. Although the histograms don't have x-axis labels that show
      us which words have which frequencies, that's not really their purpose.
      A histogram gives us insight into the underlying frequency distribution,
      with the x-axis corresponding to a range for words that each have a
      frequency within that range and the y-axis corresponding to the total
      frequency of all words that appear within that range.</p>
<p id="when_interpreti">When interpreting <a class="xref" href="ch01.html#hist1" title="Figure 1-5. Histograms of tabulated frequency data for words, screen names, and hashtags, each displaying a particular kind of data that is grouped by frequency">Figure 1-5</a>, look back to the
      corresponding tabular data and consider that there are a large number of
      words, screen names, or hashtags that <a id="sc1.4.5" class="indexterm"></a><a id="ha1.4.5" class="indexterm"></a>have low frequencies and appear few times in the text;
      however, when we combine all of these low-frequency terms and bin them
      together into a range of "all words with frequency between 1 and 10," we
      see that the total number of these low-frequency words accounts for most
      of the text. More concretely, we see that there are approximately 10
      words that account for almost all of the frequencies as rendered by the
      area of the large blue rectangle, while there are just a couple of words
      with much higher frequencies: "#MentionSomeoneImportantForYou" and "RT,"
      with respective frequencies of 34 and 92 as given by our tabulated
      data.</p>
<p id="likewise_when_">Likewise, when interpreting <a class="xref" href="ch01.html#hist2" title="Figure 1-6. A histogram of retweet frequencies">Figure 1-6</a>, we see that
      there are a select few tweets that are retweeted with a much higher
      frequencies than the bulk of the tweets, which are retweeted only once
      and account for the majority of the volume given by the largest blue
      rectangle on the left side of the histogram.</p>
<div class="figure" id="hist1">
<div class="figure-contents"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000001583/images/mswb_0105.png" alt="Histograms of tabulated frequency data for words, screen names, and hashtags, each displaying a particular kind of data that is grouped by frequency"></div></div>
<div class="figure-title">Figure 1-5. Histograms of tabulated frequency data for words, screen names,
        and hashtags, each displaying a particular kind of data that is
        grouped by frequency</div>
</div>
<div class="figure" id="hist2">
<div class="figure-contents"><div class="mediaobject"><img src="http://orm-chimera-prod.s3.amazonaws.com/1234000001583/images/mswb_0106.png" alt="A histogram of retweet frequencies"></div></div>
<div class="figure-title">Figure 1-6. A histogram of retweet frequencies</div>
</div>
<p id="the_code_for_ge">The code for generating these histograms directly in IPython
      Notebook is given in Examples <a class="xref" href="ch01.html#hist1-code" title="Example 1-13. Generating histograms of words, screen names, and hashtags">1-13</a> and <a class="xref" href="ch01.html#hist2-code" title="Example 1-14. Generating a histogram of retweet counts">1-14</a>. Taking some time to explore the
      capabilities of matplotlib and other scientific computing tools is a
      worthwhile <a id="id542585" class="indexterm"></a><a id="id542594" class="indexterm"></a><a id="id542602" class="indexterm"></a>investment.</p>
<div class="warning" id="installation_of_id1"><p id="installation_of_id2">Installation of scientific computing tools such as <code class="literal">matplotlib</code> can potentially be a frustrating
        experience because of certain dynamically loaded libraries in their
        dependency chain, and the pain involved can vary from version to
        version and operating system to operating system. It is highly
        recommended that you take advantage of the virtual machine experience
        for this book, as outlined in <a class="xref" href="">???</a>, if you don't
        already have these tools installed.</p></div>
<div class="example" id="hist1-code">
<div class="example-title">Example 1-13. Generating histograms of words, screen names, and
        hashtags</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="for_label_data"><code class="k">for</code> <code class="n">label</code><code class="p">,</code> <code class="n">data</code> <code class="ow">in</code> <code class="p">((</code><code class="s">'Words'</code><code class="p">,</code> <code class="n">words</code><code class="p">),</code> 
                    <code class="p">(</code><code class="s">'Screen Names'</code><code class="p">,</code> <code class="n">screen_names</code><code class="p">),</code> 
                    <code class="p">(</code><code class="s">'Hashtags'</code><code class="p">,</code> <code class="n">hashtags</code><code class="p">)):</code>

    <code class="c"># Build a frequency map for each set of data</code>
    <code class="c"># and plot the values</code>
    <code class="n">c</code> <code class="o">=</code> <code class="n">Counter</code><code class="p">(</code><code class="n">data</code><code class="p">)</code>
    <code class="n">plt</code><code class="o">.</code><code class="n">hist</code><code class="p">(</code><code class="n">c</code><code class="o">.</code><code class="n">values</code><code class="p">())</code>
    
    <code class="c"># Add a title and y-label ...</code>
    <code class="n">plt</code><code class="o">.</code><code class="n">title</code><code class="p">(</code><code class="n">label</code><code class="p">)</code>
    <code class="n">plt</code><code class="o">.</code><code class="n">ylabel</code><code class="p">(</code><code class="s">"Number of items in bin"</code><code class="p">)</code>
    <code class="n">plt</code><code class="o">.</code><code class="n">xlabel</code><code class="p">(</code><code class="s">"Bins (number of times an item appeared)"</code><code class="p">)</code>
    
    <code class="c"># ... and display as a new figure</code>
    <code class="n">plt</code><code class="o">.</code><code class="n">figure</code><code class="p">()</code></pre></div>
</div>
<div class="example" id="hist2-code">
<div class="example-title">Example 1-14. Generating a histogram of retweet counts</div>
<div class="example-contents"><pre class="programlisting" data-language="py" id="using_undersc"><code class="c"># Using underscores while unpacking values in</code>
<code class="c"># a tuple is idiomatic for discarding them</code>

<code class="n">counts</code> <code class="o">=</code> <code class="p">[</code><code class="n">count</code> <code class="k">for</code> <code class="n">count</code><code class="p">,</code> <code class="n">_</code><code class="p">,</code> <code class="n">_</code> <code class="ow">in</code> <code class="n">retweets</code><code class="p">]</code>

<code class="n">plt</code><code class="o">.</code><code class="n">hist</code><code class="p">(</code><code class="n">counts</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">title</code><code class="p">(</code><code class="s">"Retweets"</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">xlabel</code><code class="p">(</code><code class="s">'Bins (number of times retweeted)'</code><code class="p">)</code>
<code class="n">plt</code><code class="o">.</code><code class="n">ylabel</code><code class="p">(</code><code class="s">'Number of tweets in bin'</code><code class="p">)</code>

<code class="k">print</code> <code class="n">counts</code></pre></div>
</div>
</div>
</div>
<div class="sect1" data-original-filename="ch01.xml" id="I_sect11_d1e1820">
<div class="titlepage"><div><div><h2 class="title">Closing Remarks</h2></div></div></div>
<p id="this_chapter_in">This chapter <a id="id543125" class="indexterm"></a><a id="id543133" class="indexterm"></a><a id="id543141" class="indexterm"></a><a id="id543149" class="indexterm"></a><a id="id543157" class="indexterm"></a><a id="id543165" class="indexterm"></a>introduced Twitter as a successful technology platform that
    has grown virally and become "all the rage," given its ability to satisfy
    some fundamental human desires relating to communication, curiosity, and
    the self-organizing behavior that has emerged from its chaotic network
    dynamics. The example code in this chapter got you up and running with
    Twitter's API, illustrated how easy (and fun) it is to use Python to
    interactively explore and analyze Twitter data, and provided some starting
    templates that you can use for mining tweets. We started out the chapter
    by learning how to create an authenticated connection and then progressed
    through a series of examples that illustrated how to discover trending
    topics for particular locales, how to search for tweets that might be
    interesting, and how to analyze those tweets using some elementary but
    effective techniques based on frequency analysis and simple statistics.
    Even what seemed like a somewhat arbitrary trending topic turned out to
    lead us down worthwhile paths with lots of possibilities for additional
    analysis.</p>
<div class="note" id="contains_a_numb_id1"><p id="contains_a_numb_id2"><a class="xref" href="">???</a> contains a number of Twitter
      recipes covering a broad array of topics that range from tweet
      harvesting and analysis to the effective use of storage for archiving
      tweets to techniques for analyzing followers for insights.</p></div>
<p id="one_of_the_prim">One of the primary takeaways from this chapter from an analytical
    standpoint is that counting is generally the first step to any kind of
    meaningful quantitative analysis. Although basic frequency analysis is
    simple, it is a powerful tool for your repertoire that shouldn’t be
    overlooked just because it’s so obvious; besides, many other advanced
    statistics depend on it. On the contrary, frequency analysis and measures
    such as lexical diversity should be employed early and often, for
    precisely the reason that doing so is so obvious and simple. Oftentimes,
    but not always, the results from the simplest techniques can rival the
    quality of those from more sophisticated analytics. With respect to data
    in the Twitterverse, these modest techniques can usually get you quite a
    long way toward answering the question, “What are people talking about
    right now?” Now that's something we'd all like to know, isn't it?</p>
<div class="note" id="the_source_code_id1"><p id="the_source_code_id2">The source code outlined for this chapter and all other chapters
      is available at <a class="ulink" href="http://bit.ly/1a1kNqy" target="_top">GitHub</a> in a
      convenient IPython Notebook format that you're highly encouraged to try
      out from the comfort of your own web browser.</p></div>
</div>
<div class="sect1" data-original-filename="ch01.xml" id="recommended_exercises">
<div class="titlepage"><div><div><h2 class="title">Recommended Exercises</h2></div></div></div>
<p id="bookmark_and_tw_id1"></p>
<div class="itemizedlist" id="bookmark_and_tw_id2"><ul class="itemizedlist">
<li class="listitem"><p id="bookmark_and_tw_id3">Bookmark and <a id="id543244" class="indexterm"></a>spend some time reviewing <a class="ulink" href="http://bit.ly/1a1kSKQ" target="_top">Twitter's API documentation</a>. In
          particular, spend some time browsing the information on the <a class="ulink" href="http://bit.ly/1a1kZ9i" target="_top">REST API</a> and <a class="ulink" href="http://bit.ly/1a1kSL8" target="_top">platform objects</a>.</p></li>
<li class="listitem"><p id="if_you_havent_">If you haven't already, get comfortable working in <a class="ulink" href="http://bit.ly/1a1laRY" target="_top">IPython</a> and <a class="ulink" href="http://bit.ly/1a1laSf" target="_top">IPython Notebook</a> as a more
          productive alternative to the traditional Python interpreter. Over
          the course of your social web mining career, the saved time and
          increased productivity will really start to add up.</p></li>
<li class="listitem"><p id="if_you_have_a_t">If you have a Twitter account <a id="id543291" class="indexterm"></a>with a nontrivial number of tweets, request your
          historical tweet archive from your <a class="ulink" href="http://bit.ly/1a1lb8D" target="_top">account settings</a> and analyze it.
          The export of your account data includes files organized by time
          period in a convenient JSON format. See the
          <span class="emphasis"><em>README.txt</em></span> file included in the downloaded
          archive for more details. What are the most common terms that appear
          in your tweets? Who do you retweet the most often? How many of your
          tweets are retweeted (and why do you think this is the case)?</p></li>
<li class="listitem"><p id="take_some_time_">Take some time to explore Twitter's REST API with its <a class="ulink" href="http://bit.ly/1a1kWui" target="_top">developer console</a>. Although we
          opted to dive in with the <code class="literal">twitter</code>
          Python package in a programmatic fashion in this chapter, the
          console can be useful for exploring the API, the effects of
          parameters, and more. The command-line tool <a class="ulink" href="http://bit.ly/1a1kZq1" target="_top">Twurl</a> is another option to
          consider if you prefer working in a terminal.</p></li>
<li class="listitem"><p id="complete_the_ex">Complete the exercise of determining whether there seems to be
          a spiritual or religious affiliation for the users who retweeted the
          status citing "God" as someone important to them, or follow the
          workflow in this chapter for a trending topic or arbitrary search
          query of your own choosing. Explore some of the <a class="ulink" href="http://bit.ly/1a1l3pN" target="_top">advanced search features</a> that
          are available for more precise querying.</p></li>
<li class="listitem"><p id="explore_yahoo_">Explore <a class="ulink" href="http://yhoo.it/1a1kZ9u" target="_top">Yahoo! GeoPlanet's
          Where On Earth ID API</a> so that you can compare and contrast
          trends from different locales.</p></li>
<li class="listitem"><p id="take_a_closer_l">Take a closer look at <a class="ulink" href="http://bit.ly/1a1l7Wv" target="_top"><code class="literal">matplotlib</code></a> and learn how to create
          <a class="ulink" href="http://bit.ly/1a1lccP" target="_top">beautiful plots of 2D and 3D data
          with IPython Notebook</a>.</p></li>
<li class="listitem"><p id="explore_and_app">Explore and apply some of the exercises from <a class="xref" href="">???</a>.</p></li>
</ul></div>
</div>
<div class="sect1" data-original-filename="ch01.xml" id="online_resources">
<div class="titlepage"><div><div><h2 class="title">Online Resources</h2></div></div></div>
<p id="the_twitter_api">The <a id="id543402" class="indexterm"></a>following list of links from this chapter may be useful for
    review:</p>
<div class="itemizedlist" id="beautiful_plots_id1"><ul class="itemizedlist">
<li class="listitem"><p id="beautiful_plots_id2"><a class="ulink" href="http://bit.ly/1a1lccP" target="_top">Beautiful plots of 2D and
          3D data with IPython Notebook</a></p></li>
<li class="listitem"><p id="ipython_magic_"><a class="ulink" href="http://bit.ly/1a1kXyf" target="_top">IPython "magic
          functions"</a></p></li>
<li class="listitem"><p id="jsonorg"><a class="ulink" href="http://bit.ly/1a1l2lJ" target="_top">json.org</a></p></li>
<li class="listitem"><p id="pylab"><a class="ulink" href="http://bit.ly/1a1l6BN" target="_top">PyLab</a></p></li>
<li class="listitem"><p id="python_list_com"><a class="ulink" href="http://bit.ly/1a1l1hy" target="_top">Python list
          comprehensions</a></p></li>
<li class="listitem"><p id="the_official_py"><a class="ulink" href="http://bit.ly/1a1l1hy" target="_top">The official Python
          tutorial</a></p></li>
<li class="listitem"><p id="oauth"><a class="ulink" href="http://bit.ly/1a1kZWN" target="_top">OAuth</a></p></li>
<li class="listitem"><p id="twitter_api_doc"><a class="ulink" href="http://bit.ly/1a1kSKQ" target="_top">Twitter API
          documentation</a></p></li>
<li class="listitem"><p id="twitter_api_rat"><a class="ulink" href="http://bit.ly/1a1l2ly" target="_top">Twitter API Rate Limiting
          in v1.1</a></p></li>
<li class="listitem"><p id="twitter_develop_id1"><a class="ulink" href="http://bit.ly/1a1kWui" target="_top">Twitter developer
          console</a></p></li>
<li class="listitem"><p id="twitter_develop_id2"><a class="ulink" href="http://bit.ly/1a1kX1a" target="_top">Twitter Developer Rules of
          the Road</a></p></li>
<li class="listitem"><p id="twitters_oauth"><a class="ulink" href="http://bit.ly/1a1kZWW" target="_top">Twitter's OAuth
          documentation</a></p></li>
<li class="listitem"><p id="twitter_search_"><a class="ulink" href="http://bit.ly/1a1l3pN" target="_top">Twitter Search API
          operators</a></p></li>
<li class="listitem"><p id="twitter_streami"><a class="ulink" href="http://bit.ly/1a1l1ya" target="_top">Twitter Streaming
          API</a></p></li>
<li class="listitem"><p id="twitter_terms_o"><a class="ulink" href="http://bit.ly/1a1kWKB" target="_top">Twitter terms of
          service</a></p></li>
<li class="listitem"><p id="twurl"><a class="ulink" href="http://bit.ly/1a1kZq1" target="_top">Twurl</a></p></li>
<li class="listitem"><p id="yahoo_geoplane"><a class="ulink" href="http://yhoo.it/1a1kZ9u" target="_top">Yahoo! GeoPlanet's Where
          On Earth ID API</a></p></li>
</ul></div>
</div>
<div class="footnotes">
<br><hr style="width: 100; align: left;">
<div id="ftn.id532653" class="footnote"><p><a href="#id532653" class="para"><sup class="para">[1] </sup></a>Although it's an implementation detail, it may be worth noting
          that Twitter's v1.1 API still implements OAuth 1.0a, whereas many
          other social web properties have since upgraded to OAuth 2.0.</p></div>
</div></section>